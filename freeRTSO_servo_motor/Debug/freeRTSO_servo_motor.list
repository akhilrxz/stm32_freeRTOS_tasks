
freeRTSO_servo_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004944  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb8  08004bb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bc0  08004bc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004108  20000074  08004c3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  08004c3c  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c24  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b63  00000000  00000000  00034cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00037830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00038900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002313b  00000000  00000000  000398c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001300c  00000000  00000000  0005ca03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8689  00000000  00000000  0006fa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148098  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  001480e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004afc 	.word	0x08004afc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004afc 	.word	0x08004afc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000090 	.word	0x20000090
 8000544:	20000144 	.word	0x20000144

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fb7f 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f825 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f931 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f905 	bl	8000768 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800055e:	f000 f88d 	bl	800067c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <main+0x4c>)
 8000566:	f001 fd79 	bl	800205c <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of servo */
  osThreadDef(servo, servo_fun, osPriorityNormal, 0, 128);
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <main+0x50>)
 800056c:	1d3c      	adds	r4, r7, #4
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  servoHandle = osThreadCreate(osThread(servo), NULL);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f002 ff6e 	bl	8003462 <osThreadCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <main+0x54>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f002 ff62 	bl	8003454 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x48>
 8000592:	bf00      	nop
 8000594:	20000344 	.word	0x20000344
 8000598:	08004b1c 	.word	0x08004b1c
 800059c:	200003d0 	.word	0x200003d0

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 f9da 	bl	8004968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <SystemClock_Config+0xd4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a29      	ldr	r2, [pc, #164]	; (8000674 <SystemClock_Config+0xd4>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <SystemClock_Config+0xd4>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xd8>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xd8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000614:	2310      	movs	r3, #16
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f95c 	bl	80018ec <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800063a:	f000 f95f 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fdca 	bl	80011f4 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000666:	f000 f949 	bl	80008fc <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006b6:	220f      	movs	r2, #15
 80006b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006d6:	f001 fba7 	bl	8001e28 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006e0:	f000 f90c 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ee:	4619      	mov	r1, r3
 80006f0:	481c      	ldr	r0, [pc, #112]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006f2:	f001 ff45 	bl	8002580 <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006fc:	f000 f8fe 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000700:	4818      	ldr	r0, [pc, #96]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000702:	f001 fc51 	bl	8001fa8 <HAL_TIM_PWM_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800070c:	f000 f8f6 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4619      	mov	r1, r3
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000720:	f002 fb2e 	bl	8002d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800072a:	f000 f8e7 	bl	80008fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072e:	2360      	movs	r3, #96	; 0x60
 8000730:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000732:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000748:	f001 fe58 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000752:	f000 f8d3 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000758:	f000 f922 	bl	80009a0 <HAL_TIM_MspPostInit>

}
 800075c:	bf00      	nop
 800075e:	3738      	adds	r7, #56	; 0x38
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000344 	.word	0x20000344

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f002 fb7e 	bl	8002ea0 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f8a7 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000038c 	.word	0x2000038c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a25      	ldr	r2, [pc, #148]	; (800088c <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <MX_GPIO_Init+0xd0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xd0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_GPIO_Init+0xd4>)
 8000848:	f000 fcba 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_GPIO_Init+0xd8>)
 8000864:	f000 fb18 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xd4>)
 8000880:	f000 fb0a 	bl	8000e98 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <servo_fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_servo_fun */
void servo_fun(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  htim2.Instance->CCR1 = 25;  // duty cycle is .5 ms
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <servo_fun+0x3c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2219      	movs	r2, #25
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34
		 	  osDelay(1000);
 80008a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ac:	f002 fe25 	bl	80034fa <osDelay>
		 	  htim2.Instance->CCR1 = 75;  // duty cycle is 1.5 ms
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <servo_fun+0x3c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	224b      	movs	r2, #75	; 0x4b
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
		 	  osDelay(1000);
 80008b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008bc:	f002 fe1d 	bl	80034fa <osDelay>
		 	  htim2.Instance->CCR1 = 125;  // duty cycle is 2.5 ms
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <servo_fun+0x3c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	227d      	movs	r2, #125	; 0x7d
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
              osDelay(1000);
 80008c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008cc:	f002 fe15 	bl	80034fa <osDelay>
	  htim2.Instance->CCR1 = 25;  // duty cycle is .5 ms
 80008d0:	e7e6      	b.n	80008a0 <servo_fun+0x8>
 80008d2:	bf00      	nop
 80008d4:	20000344 	.word	0x20000344

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 f9d3 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40000400 	.word	0x40000400

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x54>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_MspInit+0x54>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x54>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x54>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fa79 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000970:	d10d      	bne.n	800098e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_TIM_Base_MspInit+0x3c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009c0:	d11d      	bne.n	80009fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009de:	2301      	movs	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009fa:	f000 fa4d 	bl	8000e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_UART_MspInit+0x8c>)
 8000a86:	f000 fa07 	bl	8000e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40004400 	.word	0x40004400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <HAL_InitTick+0xe4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a32      	ldr	r2, [pc, #200]	; (8000b84 <HAL_InitTick+0xe4>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_InitTick+0xe4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fca6 	bl	8001428 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae6:	f000 fc77 	bl	80013d8 <HAL_RCC_GetPCLK1Freq>
 8000aea:	6378      	str	r0, [r7, #52]	; 0x34
 8000aec:	e004      	b.n	8000af8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aee:	f000 fc73 	bl	80013d8 <HAL_RCC_GetPCLK1Freq>
 8000af2:	4603      	mov	r3, r0
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <HAL_InitTick+0xe8>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	0c9b      	lsrs	r3, r3, #18
 8000b02:	3b01      	subs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <HAL_InitTick+0xec>)
 8000b08:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <HAL_InitTick+0xf0>)
 8000b0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_InitTick+0xec>)
 8000b0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b12:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_InitTick+0xec>)
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_InitTick+0xec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_InitTick+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_InitTick+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000b2c:	4817      	ldr	r0, [pc, #92]	; (8000b8c <HAL_InitTick+0xec>)
 8000b2e:	f001 f97b 	bl	8001e28 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d11b      	bne.n	8000b78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <HAL_InitTick+0xec>)
 8000b42:	f001 f9c1 	bl	8001ec8 <HAL_TIM_Base_Start_IT>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d111      	bne.n	8000b78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b54:	201d      	movs	r0, #29
 8000b56:	f000 f991 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d808      	bhi.n	8000b72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	201d      	movs	r0, #29
 8000b66:	f000 f96d 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_InitTick+0xf4>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	e002      	b.n	8000b78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3738      	adds	r7, #56	; 0x38
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	200003d4 	.word	0x200003d4
 8000b90:	40000400 	.word	0x40000400
 8000b94:	20000004 	.word	0x20000004

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <TIM3_IRQHandler+0x10>)
 8000bca:	f001 fb0f 	bl	80021ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200003d4 	.word	0x200003d4

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f003 fe77 	bl	800491c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc8b 	bl	8000548 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c40:	08004bc8 	.word	0x08004bc8
  ldr r2, =_sbss
 8000c44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c48:	2000417c 	.word	0x2000417c

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f7ff ff0e 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe40 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000041c 	.word	0x2000041c

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000041c 	.word	0x2000041c

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e165      	b.n	8001180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8154 	bne.w	800117a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80ae 	beq.w	800117a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5c      	ldr	r2, [pc, #368]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a58      	ldr	r2, [pc, #352]	; (800119c <HAL_GPIO_Init+0x304>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x308>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d025      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d01f      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x310>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x314>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <HAL_GPIO_Init+0x318>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x20a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x206>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <HAL_GPIO_Init+0x320>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x202>
 8001096:	2306      	movs	r3, #6
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 800109a:	2307      	movs	r3, #7
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x304>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_GPIO_Init+0x324>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_GPIO_Init+0x324>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_GPIO_Init+0x324>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a26      	ldr	r2, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <HAL_GPIO_Init+0x324>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae96 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0cc      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d90c      	bls.n	8001230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b65      	ldr	r3, [pc, #404]	; (80013ac <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0b8      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a58      	ldr	r2, [pc, #352]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800126a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	494d      	ldr	r1, [pc, #308]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	4313      	orrs	r3, r2
 800127c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d044      	beq.n	8001314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d119      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e07f      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d003      	beq.n	80012b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b2:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e06f      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e067      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f023 0203 	bic.w	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4934      	ldr	r1, [pc, #208]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e4:	f7ff fcea 	bl	8000cbc <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	f7ff fce6 	bl	8000cbc <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e04f      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 020c 	and.w	r2, r3, #12
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	429a      	cmp	r2, r3
 8001312:	d1eb      	bne.n	80012ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_RCC_ClockConfig+0x1b8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d20c      	bcs.n	800133c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_RCC_ClockConfig+0x1b8>)
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_RCC_ClockConfig+0x1b8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d001      	beq.n	800133c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e032      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4916      	ldr	r1, [pc, #88]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	490e      	ldr	r1, [pc, #56]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	4313      	orrs	r3, r2
 8001378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800137a:	f000 f887 	bl	800148c <HAL_RCC_GetSysClockFreq>
 800137e:	4602      	mov	r2, r0
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	490a      	ldr	r1, [pc, #40]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_ClockConfig+0x1c8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fb80 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00
 80013b0:	40023800 	.word	0x40023800
 80013b4:	08004b40 	.word	0x08004b40
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000

080013d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013dc:	f7ff fff0 	bl	80013c0 <HAL_RCC_GetHCLKFreq>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	0a9b      	lsrs	r3, r3, #10
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	4903      	ldr	r1, [pc, #12]	; (80013fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ee:	5ccb      	ldrb	r3, [r1, r3]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	08004b50 	.word	0x08004b50

08001400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001404:	f7ff ffdc 	bl	80013c0 <HAL_RCC_GetHCLKFreq>
 8001408:	4602      	mov	r2, r0
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	0b5b      	lsrs	r3, r3, #13
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	4903      	ldr	r1, [pc, #12]	; (8001424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001416:	5ccb      	ldrb	r3, [r1, r3]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	08004b50 	.word	0x08004b50

08001428 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	220f      	movs	r2, #15
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_RCC_GetClockConfig+0x5c>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_RCC_GetClockConfig+0x5c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_RCC_GetClockConfig+0x5c>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_GetClockConfig+0x5c>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_RCC_GetClockConfig+0x60>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 020f 	and.w	r2, r3, #15
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40023c00 	.word	0x40023c00

0800148c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800148c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001490:	b0ae      	sub	sp, #184	; 0xb8
 8001492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b2:	4bcb      	ldr	r3, [pc, #812]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	f200 8206 	bhi.w	80018cc <HAL_RCC_GetSysClockFreq+0x440>
 80014c0:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014fd 	.word	0x080014fd
 80014cc:	080018cd 	.word	0x080018cd
 80014d0:	080018cd 	.word	0x080018cd
 80014d4:	080018cd 	.word	0x080018cd
 80014d8:	08001505 	.word	0x08001505
 80014dc:	080018cd 	.word	0x080018cd
 80014e0:	080018cd 	.word	0x080018cd
 80014e4:	080018cd 	.word	0x080018cd
 80014e8:	0800150d 	.word	0x0800150d
 80014ec:	080018cd 	.word	0x080018cd
 80014f0:	080018cd 	.word	0x080018cd
 80014f4:	080018cd 	.word	0x080018cd
 80014f8:	080016fd 	.word	0x080016fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014fc:	4bb9      	ldr	r3, [pc, #740]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001502:	e1e7      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001504:	4bb8      	ldr	r3, [pc, #736]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800150a:	e1e3      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150c:	4bb4      	ldr	r3, [pc, #720]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001518:	4bb1      	ldr	r3, [pc, #708]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d071      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001524:	4bae      	ldr	r3, [pc, #696]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	2200      	movs	r2, #0
 800152c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001530:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800153c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800154a:	4622      	mov	r2, r4
 800154c:	462b      	mov	r3, r5
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	0159      	lsls	r1, r3, #5
 8001558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800155c:	0150      	lsls	r0, r2, #5
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4621      	mov	r1, r4
 8001564:	1a51      	subs	r1, r2, r1
 8001566:	6439      	str	r1, [r7, #64]	; 0x40
 8001568:	4629      	mov	r1, r5
 800156a:	eb63 0301 	sbc.w	r3, r3, r1
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800157c:	4649      	mov	r1, r9
 800157e:	018b      	lsls	r3, r1, #6
 8001580:	4641      	mov	r1, r8
 8001582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001586:	4641      	mov	r1, r8
 8001588:	018a      	lsls	r2, r1, #6
 800158a:	4641      	mov	r1, r8
 800158c:	1a51      	subs	r1, r2, r1
 800158e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001590:	4649      	mov	r1, r9
 8001592:	eb63 0301 	sbc.w	r3, r3, r1
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80015a4:	4649      	mov	r1, r9
 80015a6:	00cb      	lsls	r3, r1, #3
 80015a8:	4641      	mov	r1, r8
 80015aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ae:	4641      	mov	r1, r8
 80015b0:	00ca      	lsls	r2, r1, #3
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	4603      	mov	r3, r0
 80015b8:	4622      	mov	r2, r4
 80015ba:	189b      	adds	r3, r3, r2
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
 80015be:	462b      	mov	r3, r5
 80015c0:	460a      	mov	r2, r1
 80015c2:	eb42 0303 	adc.w	r3, r2, r3
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015d4:	4629      	mov	r1, r5
 80015d6:	024b      	lsls	r3, r1, #9
 80015d8:	4621      	mov	r1, r4
 80015da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015de:	4621      	mov	r1, r4
 80015e0:	024a      	lsls	r2, r1, #9
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015f8:	f7fe fe0a 	bl	8000210 <__aeabi_uldivmod>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4613      	mov	r3, r2
 8001602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001606:	e067      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001608:	4b75      	ldr	r3, [pc, #468]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	2200      	movs	r2, #0
 8001610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001614:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001618:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800161c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001620:	67bb      	str	r3, [r7, #120]	; 0x78
 8001622:	2300      	movs	r3, #0
 8001624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001626:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800162a:	4622      	mov	r2, r4
 800162c:	462b      	mov	r3, r5
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0159      	lsls	r1, r3, #5
 8001638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800163c:	0150      	lsls	r0, r2, #5
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4621      	mov	r1, r4
 8001644:	1a51      	subs	r1, r2, r1
 8001646:	62b9      	str	r1, [r7, #40]	; 0x28
 8001648:	4629      	mov	r1, r5
 800164a:	eb63 0301 	sbc.w	r3, r3, r1
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800165c:	4649      	mov	r1, r9
 800165e:	018b      	lsls	r3, r1, #6
 8001660:	4641      	mov	r1, r8
 8001662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001666:	4641      	mov	r1, r8
 8001668:	018a      	lsls	r2, r1, #6
 800166a:	4641      	mov	r1, r8
 800166c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001670:	4649      	mov	r1, r9
 8001672:	eb63 0b01 	sbc.w	fp, r3, r1
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001682:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800168a:	4692      	mov	sl, r2
 800168c:	469b      	mov	fp, r3
 800168e:	4623      	mov	r3, r4
 8001690:	eb1a 0303 	adds.w	r3, sl, r3
 8001694:	623b      	str	r3, [r7, #32]
 8001696:	462b      	mov	r3, r5
 8001698:	eb4b 0303 	adc.w	r3, fp, r3
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016aa:	4629      	mov	r1, r5
 80016ac:	028b      	lsls	r3, r1, #10
 80016ae:	4621      	mov	r1, r4
 80016b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b4:	4621      	mov	r1, r4
 80016b6:	028a      	lsls	r2, r1, #10
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016c0:	2200      	movs	r2, #0
 80016c2:	673b      	str	r3, [r7, #112]	; 0x70
 80016c4:	677a      	str	r2, [r7, #116]	; 0x74
 80016c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016ca:	f7fe fda1 	bl	8000210 <__aeabi_uldivmod>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4613      	mov	r3, r2
 80016d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016d8:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	3301      	adds	r3, #1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016fa:	e0eb      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d06b      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	2200      	movs	r2, #0
 800171c:	66bb      	str	r3, [r7, #104]	; 0x68
 800171e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001726:	663b      	str	r3, [r7, #96]	; 0x60
 8001728:	2300      	movs	r3, #0
 800172a:	667b      	str	r3, [r7, #100]	; 0x64
 800172c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001730:	4622      	mov	r2, r4
 8001732:	462b      	mov	r3, r5
 8001734:	f04f 0000 	mov.w	r0, #0
 8001738:	f04f 0100 	mov.w	r1, #0
 800173c:	0159      	lsls	r1, r3, #5
 800173e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001742:	0150      	lsls	r0, r2, #5
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4621      	mov	r1, r4
 800174a:	1a51      	subs	r1, r2, r1
 800174c:	61b9      	str	r1, [r7, #24]
 800174e:	4629      	mov	r1, r5
 8001750:	eb63 0301 	sbc.w	r3, r3, r1
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001762:	4659      	mov	r1, fp
 8001764:	018b      	lsls	r3, r1, #6
 8001766:	4651      	mov	r1, sl
 8001768:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800176c:	4651      	mov	r1, sl
 800176e:	018a      	lsls	r2, r1, #6
 8001770:	4651      	mov	r1, sl
 8001772:	ebb2 0801 	subs.w	r8, r2, r1
 8001776:	4659      	mov	r1, fp
 8001778:	eb63 0901 	sbc.w	r9, r3, r1
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001788:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800178c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001790:	4690      	mov	r8, r2
 8001792:	4699      	mov	r9, r3
 8001794:	4623      	mov	r3, r4
 8001796:	eb18 0303 	adds.w	r3, r8, r3
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	462b      	mov	r3, r5
 800179e:	eb49 0303 	adc.w	r3, r9, r3
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017b0:	4629      	mov	r1, r5
 80017b2:	024b      	lsls	r3, r1, #9
 80017b4:	4621      	mov	r1, r4
 80017b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017ba:	4621      	mov	r1, r4
 80017bc:	024a      	lsls	r2, r1, #9
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c6:	2200      	movs	r2, #0
 80017c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017d0:	f7fe fd1e 	bl	8000210 <__aeabi_uldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4613      	mov	r3, r2
 80017da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017de:	e065      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x420>
 80017e0:	40023800 	.word	0x40023800
 80017e4:	00f42400 	.word	0x00f42400
 80017e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ec:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	2200      	movs	r2, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	4611      	mov	r1, r2
 80017f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017fc:	653b      	str	r3, [r7, #80]	; 0x50
 80017fe:	2300      	movs	r3, #0
 8001800:	657b      	str	r3, [r7, #84]	; 0x54
 8001802:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001806:	4642      	mov	r2, r8
 8001808:	464b      	mov	r3, r9
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	0159      	lsls	r1, r3, #5
 8001814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001818:	0150      	lsls	r0, r2, #5
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4641      	mov	r1, r8
 8001820:	1a51      	subs	r1, r2, r1
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	4649      	mov	r1, r9
 8001826:	eb63 0301 	sbc.w	r3, r3, r1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001838:	4659      	mov	r1, fp
 800183a:	018b      	lsls	r3, r1, #6
 800183c:	4651      	mov	r1, sl
 800183e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001842:	4651      	mov	r1, sl
 8001844:	018a      	lsls	r2, r1, #6
 8001846:	4651      	mov	r1, sl
 8001848:	1a54      	subs	r4, r2, r1
 800184a:	4659      	mov	r1, fp
 800184c:	eb63 0501 	sbc.w	r5, r3, r1
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	00eb      	lsls	r3, r5, #3
 800185a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185e:	00e2      	lsls	r2, r4, #3
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	4643      	mov	r3, r8
 8001866:	18e3      	adds	r3, r4, r3
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	464b      	mov	r3, r9
 800186c:	eb45 0303 	adc.w	r3, r5, r3
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800187e:	4629      	mov	r1, r5
 8001880:	028b      	lsls	r3, r1, #10
 8001882:	4621      	mov	r1, r4
 8001884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001888:	4621      	mov	r1, r4
 800188a:	028a      	lsls	r2, r1, #10
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001894:	2200      	movs	r2, #0
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
 8001898:	64fa      	str	r2, [r7, #76]	; 0x4c
 800189a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800189e:	f7fe fcb7 	bl	8000210 <__aeabi_uldivmod>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4613      	mov	r3, r2
 80018a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0f1b      	lsrs	r3, r3, #28
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80018ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018ca:	e003      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	37b8      	adds	r7, #184	; 0xb8
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400

080018ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e28d      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8083 	beq.w	8001a12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800190c:	4b94      	ldr	r3, [pc, #592]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b04      	cmp	r3, #4
 8001916:	d019      	beq.n	800194c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001918:	4b91      	ldr	r3, [pc, #580]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001920:	2b08      	cmp	r3, #8
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001924:	4b8e      	ldr	r3, [pc, #568]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001930:	d00c      	beq.n	800194c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001932:	4b8b      	ldr	r3, [pc, #556]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d112      	bne.n	8001964 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b84      	ldr	r3, [pc, #528]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x124>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e25a      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x90>
 800196e:	4b7c      	ldr	r3, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a7b      	ldr	r2, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xcc>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0xb4>
 8001986:	4b76      	ldr	r3, [pc, #472]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a75      	ldr	r2, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b73      	ldr	r3, [pc, #460]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a72      	ldr	r2, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xcc>
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a6e      	ldr	r2, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a6b      	ldr	r2, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f97c 	bl	8000cbc <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f978 	bl	8000cbc <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e21f      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b61      	ldr	r3, [pc, #388]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xdc>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff f968 	bl	8000cbc <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff f964 	bl	8000cbc <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e20b      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x104>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d06f      	beq.n	8001afe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a1e:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d017      	beq.n	8001a5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d105      	bne.n	8001a42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a36:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d11c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d116      	bne.n	8001a88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x186>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e1d3      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4937      	ldr	r1, [pc, #220]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	e03a      	b.n	8001afe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a90:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_RCC_OscConfig+0x278>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f911 	bl	8000cbc <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f90d 	bl	8000cbc <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1b4      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4925      	ldr	r1, [pc, #148]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x278>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f8f0 	bl	8000cbc <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f8ec 	bl	8000cbc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e193      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d036      	beq.n	8001b78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d016      	beq.n	8001b40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f8d0 	bl	8000cbc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b20:	f7ff f8cc 	bl	8000cbc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e173      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x234>
 8001b3e:	e01b      	b.n	8001b78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7ff f8b9 	bl	8000cbc <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4c:	e00e      	b.n	8001b6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff f8b5 	bl	8000cbc <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d907      	bls.n	8001b6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e15c      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
 8001b60:	40023800 	.word	0x40023800
 8001b64:	42470000 	.word	0x42470000
 8001b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6c:	4b8a      	ldr	r3, [pc, #552]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ea      	bne.n	8001b4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8097 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b83      	ldr	r3, [pc, #524]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b79      	ldr	r3, [pc, #484]	; (8001d9c <HAL_RCC_OscConfig+0x4b0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x4b0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	; (8001d9c <HAL_RCC_OscConfig+0x4b0>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f875 	bl	8000cbc <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff f871 	bl	8000cbc <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e118      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x4b0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x31e>
 8001bfc:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
 8001c08:	e01c      	b.n	8001c44 <HAL_RCC_OscConfig+0x358>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x340>
 8001c12:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	4a60      	ldr	r2, [pc, #384]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1e:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	4a5d      	ldr	r2, [pc, #372]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_OscConfig+0x358>
 8001c2c:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	4a59      	ldr	r2, [pc, #356]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	; 0x70
 8001c38:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	f023 0304 	bic.w	r3, r3, #4
 8001c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d015      	beq.n	8001c78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f836 	bl	8000cbc <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7ff f832 	bl	8000cbc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e0d7      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0ee      	beq.n	8001c54 <HAL_RCC_OscConfig+0x368>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f820 	bl	8000cbc <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c80:	f7ff f81c 	bl	8000cbc <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e0c1      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c96:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ee      	bne.n	8001c80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80ad 	beq.w	8001e18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d060      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d145      	bne.n	8001d5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <HAL_RCC_OscConfig+0x4b4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fff0 	bl	8000cbc <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe ffec 	bl	8000cbc <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e093      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	3b01      	subs	r3, #1
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	071b      	lsls	r3, r3, #28
 8001d2a:	491b      	ldr	r1, [pc, #108]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0x4b4>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7fe ffc1 	bl	8000cbc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7fe ffbd 	bl	8000cbc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e064      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x452>
 8001d5c:	e05c      	b.n	8001e18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_RCC_OscConfig+0x4b4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7fe ffaa 	bl	8000cbc <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7fe ffa6 	bl	8000cbc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e04d      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x480>
 8001d8a:	e045      	b.n	8001e18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e040      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_RCC_OscConfig+0x538>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d030      	beq.n	8001e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d129      	bne.n	8001e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d122      	bne.n	8001e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d119      	bne.n	8001e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	3b01      	subs	r3, #1
 8001dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d10f      	bne.n	8001e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e041      	b.n	8001ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fd86 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 fc7a 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d001      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e04e      	b.n	8001f7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d022      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d01d      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d018      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00e      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d004      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d111      	bne.n	8001f6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d010      	beq.n	8001f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6a:	e007      	b.n	8001f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40000c00 	.word	0x40000c00
 8001f9c:	40010400 	.word	0x40010400
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40001800 	.word	0x40001800

08001fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f839 	bl	8002046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 fbba 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_TIM_PWM_Start+0x24>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e022      	b.n	80020c6 <HAL_TIM_PWM_Start+0x6a>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b04      	cmp	r3, #4
 8002084:	d109      	bne.n	800209a <HAL_TIM_PWM_Start+0x3e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	e015      	b.n	80020c6 <HAL_TIM_PWM_Start+0x6a>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d109      	bne.n	80020b4 <HAL_TIM_PWM_Start+0x58>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e008      	b.n	80020c6 <HAL_TIM_PWM_Start+0x6a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07c      	b.n	80021c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d104      	bne.n	80020de <HAL_TIM_PWM_Start+0x82>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020dc:	e013      	b.n	8002106 <HAL_TIM_PWM_Start+0xaa>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d104      	bne.n	80020ee <HAL_TIM_PWM_Start+0x92>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ec:	e00b      	b.n	8002106 <HAL_TIM_PWM_Start+0xaa>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d104      	bne.n	80020fe <HAL_TIM_PWM_Start+0xa2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020fc:	e003      	b.n	8002106 <HAL_TIM_PWM_Start+0xaa>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fe10 	bl	8002d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <HAL_TIM_PWM_Start+0x174>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d004      	beq.n	8002128 <HAL_TIM_PWM_Start+0xcc>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <HAL_TIM_PWM_Start+0x178>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_TIM_PWM_Start+0xd0>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_TIM_PWM_Start+0xd2>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_TIM_PWM_Start+0x174>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d022      	beq.n	8002192 <HAL_TIM_PWM_Start+0x136>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d01d      	beq.n	8002192 <HAL_TIM_PWM_Start+0x136>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <HAL_TIM_PWM_Start+0x17c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d018      	beq.n	8002192 <HAL_TIM_PWM_Start+0x136>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_TIM_PWM_Start+0x180>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_TIM_PWM_Start+0x136>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <HAL_TIM_PWM_Start+0x184>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00e      	beq.n	8002192 <HAL_TIM_PWM_Start+0x136>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_TIM_PWM_Start+0x178>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_TIM_PWM_Start+0x136>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_TIM_PWM_Start+0x188>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_TIM_PWM_Start+0x136>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_TIM_PWM_Start+0x18c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d111      	bne.n	80021b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d010      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b4:	e007      	b.n	80021c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40010400 	.word	0x40010400
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40001800 	.word	0x40001800

080021ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d122      	bne.n	8002248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b02      	cmp	r3, #2
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0202 	mvn.w	r2, #2
 8002218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa77 	bl	8002722 <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa69 	bl	800270e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fa7a 	bl	8002736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b04      	cmp	r3, #4
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0204 	mvn.w	r2, #4
 800226c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa4d 	bl	8002722 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa3f 	bl	800270e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fa50 	bl	8002736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0208 	mvn.w	r2, #8
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2204      	movs	r2, #4
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa23 	bl	8002722 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa15 	bl	800270e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fa26 	bl	8002736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d122      	bne.n	8002344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b10      	cmp	r3, #16
 800230a:	d11b      	bne.n	8002344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0210 	mvn.w	r2, #16
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2208      	movs	r2, #8
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f9f9 	bl	8002722 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f9eb 	bl	800270e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f9fc 	bl	8002736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0201 	mvn.w	r2, #1
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fab4 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b80      	cmp	r3, #128	; 0x80
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b80      	cmp	r3, #128	; 0x80
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fd78 	bl	8002e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9c1 	bl	800274a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0220 	mvn.w	r2, #32
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fd42 	bl	8002e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002416:	2302      	movs	r3, #2
 8002418:	e0ae      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	f200 809f 	bhi.w	8002568 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002465 	.word	0x08002465
 8002434:	08002569 	.word	0x08002569
 8002438:	08002569 	.word	0x08002569
 800243c:	08002569 	.word	0x08002569
 8002440:	080024a5 	.word	0x080024a5
 8002444:	08002569 	.word	0x08002569
 8002448:	08002569 	.word	0x08002569
 800244c:	08002569 	.word	0x08002569
 8002450:	080024e7 	.word	0x080024e7
 8002454:	08002569 	.word	0x08002569
 8002458:	08002569 	.word	0x08002569
 800245c:	08002569 	.word	0x08002569
 8002460:	08002527 	.word	0x08002527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fa18 	bl	80028a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6999      	ldr	r1, [r3, #24]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	619a      	str	r2, [r3, #24]
      break;
 80024a2:	e064      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fa68 	bl	8002980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6999      	ldr	r1, [r3, #24]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	021a      	lsls	r2, r3, #8
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	619a      	str	r2, [r3, #24]
      break;
 80024e4:	e043      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fabd 	bl	8002a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0208 	orr.w	r2, r2, #8
 8002500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0204 	bic.w	r2, r2, #4
 8002510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69d9      	ldr	r1, [r3, #28]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
      break;
 8002524:	e023      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fb11 	bl	8002b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69d9      	ldr	r1, [r3, #28]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	021a      	lsls	r2, r3, #8
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	61da      	str	r2, [r3, #28]
      break;
 8002566:	e002      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
      break;
 800256c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_TIM_ConfigClockSource+0x1c>
 8002598:	2302      	movs	r3, #2
 800259a:	e0b4      	b.n	8002706 <HAL_TIM_ConfigClockSource+0x186>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d4:	d03e      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0xd4>
 80025d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025da:	f200 8087 	bhi.w	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	f000 8086 	beq.w	80026f2 <HAL_TIM_ConfigClockSource+0x172>
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d87f      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d01a      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0xa6>
 80025f0:	2b70      	cmp	r3, #112	; 0x70
 80025f2:	d87b      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d050      	beq.n	800269a <HAL_TIM_ConfigClockSource+0x11a>
 80025f8:	2b60      	cmp	r3, #96	; 0x60
 80025fa:	d877      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d03c      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xfa>
 8002600:	2b50      	cmp	r3, #80	; 0x50
 8002602:	d873      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d058      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0x13a>
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d86f      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d064      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x15a>
 8002610:	2b30      	cmp	r3, #48	; 0x30
 8002612:	d86b      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d060      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x15a>
 8002618:	2b20      	cmp	r3, #32
 800261a:	d867      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d05c      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x15a>
 8002620:	2b10      	cmp	r3, #16
 8002622:	d05a      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x15a>
 8002624:	e062      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f000 fb5d 	bl	8002cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	609a      	str	r2, [r3, #8]
      break;
 8002652:	e04f      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f000 fb46 	bl	8002cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002676:	609a      	str	r2, [r3, #8]
      break;
 8002678:	e03c      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	461a      	mov	r2, r3
 8002688:	f000 faba 	bl	8002c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2150      	movs	r1, #80	; 0x50
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fb13 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 8002698:	e02c      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f000 fad9 	bl	8002c5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2160      	movs	r1, #96	; 0x60
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fb03 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 80026b8:	e01c      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f000 fa9a 	bl	8002c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 faf3 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 80026d8:	e00c      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f000 faea 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 80026ea:	e003      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      break;
 80026f0:	e000      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a40      	ldr	r2, [pc, #256]	; (8002874 <TIM_Base_SetConfig+0x114>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277e:	d00f      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3d      	ldr	r2, [pc, #244]	; (8002878 <TIM_Base_SetConfig+0x118>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00b      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3c      	ldr	r2, [pc, #240]	; (800287c <TIM_Base_SetConfig+0x11c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3b      	ldr	r2, [pc, #236]	; (8002880 <TIM_Base_SetConfig+0x120>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3a      	ldr	r2, [pc, #232]	; (8002884 <TIM_Base_SetConfig+0x124>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d108      	bne.n	80027b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a2f      	ldr	r2, [pc, #188]	; (8002874 <TIM_Base_SetConfig+0x114>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c0:	d027      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <TIM_Base_SetConfig+0x118>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d023      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2b      	ldr	r2, [pc, #172]	; (800287c <TIM_Base_SetConfig+0x11c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2a      	ldr	r2, [pc, #168]	; (8002880 <TIM_Base_SetConfig+0x120>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a29      	ldr	r2, [pc, #164]	; (8002884 <TIM_Base_SetConfig+0x124>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d017      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <TIM_Base_SetConfig+0x128>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a27      	ldr	r2, [pc, #156]	; (800288c <TIM_Base_SetConfig+0x12c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00f      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a26      	ldr	r2, [pc, #152]	; (8002890 <TIM_Base_SetConfig+0x130>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <TIM_Base_SetConfig+0x134>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a24      	ldr	r2, [pc, #144]	; (8002898 <TIM_Base_SetConfig+0x138>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a23      	ldr	r2, [pc, #140]	; (800289c <TIM_Base_SetConfig+0x13c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <TIM_Base_SetConfig+0x114>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0xf8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <TIM_Base_SetConfig+0x124>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800
 8002880:	40000c00 	.word	0x40000c00
 8002884:	40010400 	.word	0x40010400
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400
 8002890:	40014800 	.word	0x40014800
 8002894:	40001800 	.word	0x40001800
 8002898:	40001c00 	.word	0x40001c00
 800289c:	40002000 	.word	0x40002000

080028a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 0302 	bic.w	r3, r3, #2
 80028e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a20      	ldr	r2, [pc, #128]	; (8002978 <TIM_OC1_SetConfig+0xd8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_OC1_SetConfig+0x64>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1f      	ldr	r2, [pc, #124]	; (800297c <TIM_OC1_SetConfig+0xdc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10c      	bne.n	800291e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 0308 	bic.w	r3, r3, #8
 800290a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <TIM_OC1_SetConfig+0xd8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_OC1_SetConfig+0x8e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <TIM_OC1_SetConfig+0xdc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	621a      	str	r2, [r3, #32]
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40010000 	.word	0x40010000
 800297c:	40010400 	.word	0x40010400

08002980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0210 	bic.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0320 	bic.w	r3, r3, #32
 80029ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <TIM_OC2_SetConfig+0xe4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_OC2_SetConfig+0x68>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <TIM_OC2_SetConfig+0xe8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10d      	bne.n	8002a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <TIM_OC2_SetConfig+0xe4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <TIM_OC2_SetConfig+0x94>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <TIM_OC2_SetConfig+0xe8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d113      	bne.n	8002a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40010400 	.word	0x40010400

08002a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <TIM_OC3_SetConfig+0xe0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_OC3_SetConfig+0x66>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <TIM_OC3_SetConfig+0xe4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10d      	bne.n	8002aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <TIM_OC3_SetConfig+0xe0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <TIM_OC3_SetConfig+0x92>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <TIM_OC3_SetConfig+0xe4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d113      	bne.n	8002b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40010400 	.word	0x40010400

08002b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	031b      	lsls	r3, r3, #12
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <TIM_OC4_SetConfig+0xa4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_OC4_SetConfig+0x68>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <TIM_OC4_SetConfig+0xa8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d109      	bne.n	8002bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40010400 	.word	0x40010400

08002c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 030a 	bic.w	r3, r3, #10
 8002c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b087      	sub	sp, #28
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0210 	bic.w	r2, r3, #16
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	031b      	lsls	r3, r3, #12
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f043 0307 	orr.w	r3, r3, #7
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	021a      	lsls	r2, r3, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2201      	movs	r2, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1a      	ldr	r2, [r3, #32]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	401a      	ands	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e05a      	b.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d01d      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d10c      	bne.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40000c00 	.word	0x40000c00
 8002e6c:	40010400 	.word	0x40010400
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40001800 	.word	0x40001800

08002e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e03f      	b.n	8002f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fda2 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f829 	bl	8002f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b0c0      	sub	sp, #256	; 0x100
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	ea40 0301 	orr.w	r3, r0, r1
 8002f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f94:	f021 010c 	bic.w	r1, r1, #12
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb6:	6999      	ldr	r1, [r3, #24]
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	ea40 0301 	orr.w	r3, r0, r1
 8002fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <UART_SetConfig+0x2cc>)
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d005      	beq.n	8002fdc <UART_SetConfig+0xa0>
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b8d      	ldr	r3, [pc, #564]	; (800320c <UART_SetConfig+0x2d0>)
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d104      	bne.n	8002fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fdc:	f7fe fa10 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8002fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fe4:	e003      	b.n	8002fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fe6:	f7fe f9f7 	bl	80013d8 <HAL_RCC_GetPCLK1Freq>
 8002fea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff8:	f040 810c 	bne.w	8003214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003006:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800300a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800300e:	4622      	mov	r2, r4
 8003010:	462b      	mov	r3, r5
 8003012:	1891      	adds	r1, r2, r2
 8003014:	65b9      	str	r1, [r7, #88]	; 0x58
 8003016:	415b      	adcs	r3, r3
 8003018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800301a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800301e:	4621      	mov	r1, r4
 8003020:	eb12 0801 	adds.w	r8, r2, r1
 8003024:	4629      	mov	r1, r5
 8003026:	eb43 0901 	adc.w	r9, r3, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800303a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303e:	4690      	mov	r8, r2
 8003040:	4699      	mov	r9, r3
 8003042:	4623      	mov	r3, r4
 8003044:	eb18 0303 	adds.w	r3, r8, r3
 8003048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800304c:	462b      	mov	r3, r5
 800304e:	eb49 0303 	adc.w	r3, r9, r3
 8003052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003062:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800306a:	460b      	mov	r3, r1
 800306c:	18db      	adds	r3, r3, r3
 800306e:	653b      	str	r3, [r7, #80]	; 0x50
 8003070:	4613      	mov	r3, r2
 8003072:	eb42 0303 	adc.w	r3, r2, r3
 8003076:	657b      	str	r3, [r7, #84]	; 0x54
 8003078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800307c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003080:	f7fd f8c6 	bl	8000210 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4b61      	ldr	r3, [pc, #388]	; (8003210 <UART_SetConfig+0x2d4>)
 800308a:	fba3 2302 	umull	r2, r3, r3, r2
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	011c      	lsls	r4, r3, #4
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800309c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	1891      	adds	r1, r2, r2
 80030aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80030ac:	415b      	adcs	r3, r3
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030b4:	4641      	mov	r1, r8
 80030b6:	eb12 0a01 	adds.w	sl, r2, r1
 80030ba:	4649      	mov	r1, r9
 80030bc:	eb43 0b01 	adc.w	fp, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030d4:	4692      	mov	sl, r2
 80030d6:	469b      	mov	fp, r3
 80030d8:	4643      	mov	r3, r8
 80030da:	eb1a 0303 	adds.w	r3, sl, r3
 80030de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030e2:	464b      	mov	r3, r9
 80030e4:	eb4b 0303 	adc.w	r3, fp, r3
 80030e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003100:	460b      	mov	r3, r1
 8003102:	18db      	adds	r3, r3, r3
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
 8003106:	4613      	mov	r3, r2
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
 800310e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003116:	f7fd f87b 	bl	8000210 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4611      	mov	r1, r2
 8003120:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <UART_SetConfig+0x2d4>)
 8003122:	fba3 2301 	umull	r2, r3, r3, r1
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2264      	movs	r2, #100	; 0x64
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	1acb      	subs	r3, r1, r3
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <UART_SetConfig+0x2d4>)
 8003138:	fba3 2302 	umull	r2, r3, r3, r2
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003144:	441c      	add	r4, r3
 8003146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003150:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003160:	415b      	adcs	r3, r3
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003168:	4641      	mov	r1, r8
 800316a:	1851      	adds	r1, r2, r1
 800316c:	6339      	str	r1, [r7, #48]	; 0x30
 800316e:	4649      	mov	r1, r9
 8003170:	414b      	adcs	r3, r1
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003180:	4659      	mov	r1, fp
 8003182:	00cb      	lsls	r3, r1, #3
 8003184:	4651      	mov	r1, sl
 8003186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318a:	4651      	mov	r1, sl
 800318c:	00ca      	lsls	r2, r1, #3
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	4603      	mov	r3, r0
 8003194:	4642      	mov	r2, r8
 8003196:	189b      	adds	r3, r3, r2
 8003198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800319c:	464b      	mov	r3, r9
 800319e:	460a      	mov	r2, r1
 80031a0:	eb42 0303 	adc.w	r3, r2, r3
 80031a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031bc:	460b      	mov	r3, r1
 80031be:	18db      	adds	r3, r3, r3
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c2:	4613      	mov	r3, r2
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031d2:	f7fd f81d 	bl	8000210 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <UART_SetConfig+0x2d4>)
 80031dc:	fba3 1302 	umull	r1, r3, r3, r2
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	2164      	movs	r1, #100	; 0x64
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	3332      	adds	r3, #50	; 0x32
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <UART_SetConfig+0x2d4>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	f003 0207 	and.w	r2, r3, #7
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4422      	add	r2, r4
 8003202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003204:	e105      	b.n	8003412 <UART_SetConfig+0x4d6>
 8003206:	bf00      	nop
 8003208:	40011000 	.word	0x40011000
 800320c:	40011400 	.word	0x40011400
 8003210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800321e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003226:	4642      	mov	r2, r8
 8003228:	464b      	mov	r3, r9
 800322a:	1891      	adds	r1, r2, r2
 800322c:	6239      	str	r1, [r7, #32]
 800322e:	415b      	adcs	r3, r3
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003236:	4641      	mov	r1, r8
 8003238:	1854      	adds	r4, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb43 0501 	adc.w	r5, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	4643      	mov	r3, r8
 8003256:	18e3      	adds	r3, r4, r3
 8003258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800325c:	464b      	mov	r3, r9
 800325e:	eb45 0303 	adc.w	r3, r5, r3
 8003262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003272:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003282:	4629      	mov	r1, r5
 8003284:	008b      	lsls	r3, r1, #2
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328c:	4621      	mov	r1, r4
 800328e:	008a      	lsls	r2, r1, #2
 8003290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003294:	f7fc ffbc 	bl	8000210 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4b60      	ldr	r3, [pc, #384]	; (8003420 <UART_SetConfig+0x4e4>)
 800329e:	fba3 2302 	umull	r2, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	011c      	lsls	r4, r3, #4
 80032a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032aa:	2200      	movs	r2, #0
 80032ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032b8:	4642      	mov	r2, r8
 80032ba:	464b      	mov	r3, r9
 80032bc:	1891      	adds	r1, r2, r2
 80032be:	61b9      	str	r1, [r7, #24]
 80032c0:	415b      	adcs	r3, r3
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c8:	4641      	mov	r1, r8
 80032ca:	1851      	adds	r1, r2, r1
 80032cc:	6139      	str	r1, [r7, #16]
 80032ce:	4649      	mov	r1, r9
 80032d0:	414b      	adcs	r3, r1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e0:	4659      	mov	r1, fp
 80032e2:	00cb      	lsls	r3, r1, #3
 80032e4:	4651      	mov	r1, sl
 80032e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ea:	4651      	mov	r1, sl
 80032ec:	00ca      	lsls	r2, r1, #3
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	4642      	mov	r2, r8
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032fc:	464b      	mov	r3, r9
 80032fe:	460a      	mov	r2, r1
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	67bb      	str	r3, [r7, #120]	; 0x78
 8003312:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003320:	4649      	mov	r1, r9
 8003322:	008b      	lsls	r3, r1, #2
 8003324:	4641      	mov	r1, r8
 8003326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332a:	4641      	mov	r1, r8
 800332c:	008a      	lsls	r2, r1, #2
 800332e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003332:	f7fc ff6d 	bl	8000210 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4b39      	ldr	r3, [pc, #228]	; (8003420 <UART_SetConfig+0x4e4>)
 800333c:	fba3 1302 	umull	r1, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	2164      	movs	r1, #100	; 0x64
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	3332      	adds	r3, #50	; 0x32
 800334e:	4a34      	ldr	r2, [pc, #208]	; (8003420 <UART_SetConfig+0x4e4>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335a:	441c      	add	r4, r3
 800335c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003360:	2200      	movs	r2, #0
 8003362:	673b      	str	r3, [r7, #112]	; 0x70
 8003364:	677a      	str	r2, [r7, #116]	; 0x74
 8003366:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800336a:	4642      	mov	r2, r8
 800336c:	464b      	mov	r3, r9
 800336e:	1891      	adds	r1, r2, r2
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	415b      	adcs	r3, r3
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800337a:	4641      	mov	r1, r8
 800337c:	1851      	adds	r1, r2, r1
 800337e:	6039      	str	r1, [r7, #0]
 8003380:	4649      	mov	r1, r9
 8003382:	414b      	adcs	r3, r1
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003392:	4659      	mov	r1, fp
 8003394:	00cb      	lsls	r3, r1, #3
 8003396:	4651      	mov	r1, sl
 8003398:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339c:	4651      	mov	r1, sl
 800339e:	00ca      	lsls	r2, r1, #3
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	4603      	mov	r3, r0
 80033a6:	4642      	mov	r2, r8
 80033a8:	189b      	adds	r3, r3, r2
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ac:	464b      	mov	r3, r9
 80033ae:	460a      	mov	r2, r1
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	663b      	str	r3, [r7, #96]	; 0x60
 80033c0:	667a      	str	r2, [r7, #100]	; 0x64
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033ce:	4649      	mov	r1, r9
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	4641      	mov	r1, r8
 80033d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033d8:	4641      	mov	r1, r8
 80033da:	008a      	lsls	r2, r1, #2
 80033dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033e0:	f7fc ff16 	bl	8000210 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <UART_SetConfig+0x4e4>)
 80033ea:	fba3 1302 	umull	r1, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2164      	movs	r1, #100	; 0x64
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	3332      	adds	r3, #50	; 0x32
 80033fc:	4a08      	ldr	r2, [pc, #32]	; (8003420 <UART_SetConfig+0x4e4>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	f003 020f 	and.w	r2, r3, #15
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4422      	add	r2, r4
 8003410:	609a      	str	r2, [r3, #8]
}
 8003412:	bf00      	nop
 8003414:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	51eb851f 	.word	0x51eb851f

08003424 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003436:	2b84      	cmp	r3, #132	; 0x84
 8003438:	d005      	beq.n	8003446 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800343a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4413      	add	r3, r2
 8003442:	3303      	adds	r3, #3
 8003444:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003458:	f000 faf6 	bl	8003a48 <vTaskStartScheduler>
  
  return osOK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	bd80      	pop	{r7, pc}

08003462 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003464:	b089      	sub	sp, #36	; 0x24
 8003466:	af04      	add	r7, sp, #16
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <osThreadCreate+0x54>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01c      	beq.n	80034b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685c      	ldr	r4, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681d      	ldr	r5, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691e      	ldr	r6, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ffc8 	bl	8003424 <makeFreeRtosPriority>
 8003494:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800349e:	9202      	str	r2, [sp, #8]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	9100      	str	r1, [sp, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	4632      	mov	r2, r6
 80034a8:	4629      	mov	r1, r5
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 f8ed 	bl	800368a <xTaskCreateStatic>
 80034b0:	4603      	mov	r3, r0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e01c      	b.n	80034f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685c      	ldr	r4, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034c2:	b29e      	uxth	r6, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ffaa 	bl	8003424 <makeFreeRtosPriority>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	9200      	str	r2, [sp, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	4632      	mov	r2, r6
 80034de:	4629      	mov	r1, r5
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 f92f 	bl	8003744 <xTaskCreate>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d001      	beq.n	80034f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034f0:	68fb      	ldr	r3, [r7, #12]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <osDelay+0x16>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	e000      	b.n	8003512 <osDelay+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fa64 	bl	80039e0 <vTaskDelay>
  
  return osOK;
 8003518:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f103 0208 	add.w	r2, r3, #8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800353a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f103 0208 	add.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f103 0208 	add.w	r2, r3, #8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035da:	d103      	bne.n	80035e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e00c      	b.n	80035fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3308      	adds	r3, #8
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e002      	b.n	80035f2 <vListInsert+0x2e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d2f6      	bcs.n	80035ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6852      	ldr	r2, [r2, #4]
 8003656:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d103      	bne.n	800366a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	1e5a      	subs	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800368a:	b580      	push	{r7, lr}
 800368c:	b08e      	sub	sp, #56	; 0x38
 800368e:	af04      	add	r7, sp, #16
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	61fb      	str	r3, [r7, #28]
}
 80036cc:	bf00      	nop
 80036ce:	e7fe      	b.n	80036ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036d0:	23b4      	movs	r3, #180	; 0xb4
 80036d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2bb4      	cmp	r3, #180	; 0xb4
 80036d8:	d00a      	beq.n	80036f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61bb      	str	r3, [r7, #24]
}
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01e      	beq.n	8003736 <xTaskCreateStatic+0xac>
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01b      	beq.n	8003736 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003706:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	2202      	movs	r2, #2
 800370c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003710:	2300      	movs	r3, #0
 8003712:	9303      	str	r3, [sp, #12]
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f851 	bl	80037d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003730:	f000 f8ec 	bl	800390c <prvAddNewTaskToReadyList>
 8003734:	e001      	b.n	800373a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800373a:	697b      	ldr	r3, [r7, #20]
	}
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af04      	add	r7, sp, #16
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fef5 	bl	8004548 <pvPortMalloc>
 800375e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003766:	20b4      	movs	r0, #180	; 0xb4
 8003768:	f000 feee 	bl	8004548 <pvPortMalloc>
 800376c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
 800377a:	e005      	b.n	8003788 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800377c:	6978      	ldr	r0, [r7, #20]
 800377e:	f000 ffaf 	bl	80046e0 <vPortFree>
 8003782:	e001      	b.n	8003788 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d017      	beq.n	80037be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	2300      	movs	r3, #0
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	9302      	str	r3, [sp, #8]
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f80f 	bl	80037d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037b2:	69f8      	ldr	r0, [r7, #28]
 80037b4:	f000 f8aa 	bl	800390c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037b8:	2301      	movs	r3, #1
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	e002      	b.n	80037c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037c4:	69bb      	ldr	r3, [r7, #24]
	}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037e8:	3b01      	subs	r3, #1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f023 0307 	bic.w	r3, r3, #7
 80037f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	617b      	str	r3, [r7, #20]
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01f      	beq.n	800385e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e012      	b.n	800384a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	7819      	ldrb	r1, [r3, #0]
 800382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	3334      	adds	r3, #52	; 0x34
 8003834:	460a      	mov	r2, r1
 8003836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3301      	adds	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b0f      	cmp	r3, #15
 800384e:	d9e9      	bls.n	8003824 <prvInitialiseNewTask+0x54>
 8003850:	e000      	b.n	8003854 <prvInitialiseNewTask+0x84>
			{
				break;
 8003852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800385c:	e003      	b.n	8003866 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	2b06      	cmp	r3, #6
 800386a:	d901      	bls.n	8003870 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800386c:	2306      	movs	r3, #6
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	2200      	movs	r2, #0
 8003880:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	3304      	adds	r3, #4
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fe6b 	bl	8003562 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	3318      	adds	r3, #24
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fe66 	bl	8003562 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	f1c3 0207 	rsb	r2, r3, #7
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	334c      	adds	r3, #76	; 0x4c
 80038c0:	2260      	movs	r2, #96	; 0x60
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f84f 	bl	8004968 <memset>
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <prvInitialiseNewTask+0x130>)
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <prvInitialiseNewTask+0x134>)
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <prvInitialiseNewTask+0x138>)
 80038da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	69b8      	ldr	r0, [r7, #24]
 80038e2:	f000 fc1f 	bl	8004124 <pxPortInitialiseStack>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f8:	bf00      	nop
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	08004b78 	.word	0x08004b78
 8003904:	08004b98 	.word	0x08004b98
 8003908:	08004b58 	.word	0x08004b58

0800390c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003914:	f000 fd36 	bl	8004384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <prvAddNewTaskToReadyList+0xb8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <prvAddNewTaskToReadyList+0xb8>)
 8003920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003922:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <prvAddNewTaskToReadyList+0xbc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <prvAddNewTaskToReadyList+0xbc>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003930:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <prvAddNewTaskToReadyList+0xb8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d110      	bne.n	800395a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003938:	f000 facc 	bl	8003ed4 <prvInitialiseTaskLists>
 800393c:	e00d      	b.n	800395a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <prvAddNewTaskToReadyList+0xc0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <prvAddNewTaskToReadyList+0xbc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	429a      	cmp	r2, r3
 8003952:	d802      	bhi.n	800395a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003954:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <prvAddNewTaskToReadyList+0xbc>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <prvAddNewTaskToReadyList+0xc4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <prvAddNewTaskToReadyList+0xc4>)
 8003962:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <prvAddNewTaskToReadyList+0xc8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <prvAddNewTaskToReadyList+0xc8>)
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <prvAddNewTaskToReadyList+0xcc>)
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f7ff fdf5 	bl	800357c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003992:	f000 fd27 	bl	80043e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <prvAddNewTaskToReadyList+0xc0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <prvAddNewTaskToReadyList+0xbc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d207      	bcs.n	80039bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <prvAddNewTaskToReadyList+0xd0>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000520 	.word	0x20000520
 80039c8:	20000420 	.word	0x20000420
 80039cc:	2000052c 	.word	0x2000052c
 80039d0:	2000053c 	.word	0x2000053c
 80039d4:	20000528 	.word	0x20000528
 80039d8:	20000424 	.word	0x20000424
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d017      	beq.n	8003a22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <vTaskDelay+0x60>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <vTaskDelay+0x30>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60bb      	str	r3, [r7, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a10:	f000 f884 	bl	8003b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a14:	2100      	movs	r1, #0
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fb1e 	bl	8004058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a1c:	f000 f88c 	bl	8003b38 <xTaskResumeAll>
 8003a20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <vTaskDelay+0x64>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000548 	.word	0x20000548
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a56:	463a      	mov	r2, r7
 8003a58:	1d39      	adds	r1, r7, #4
 8003a5a:	f107 0308 	add.w	r3, r7, #8
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fd58 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	9202      	str	r2, [sp, #8]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	460a      	mov	r2, r1
 8003a76:	4921      	ldr	r1, [pc, #132]	; (8003afc <vTaskStartScheduler+0xb4>)
 8003a78:	4821      	ldr	r0, [pc, #132]	; (8003b00 <vTaskStartScheduler+0xb8>)
 8003a7a:	f7ff fe06 	bl	800368a <xTaskCreateStatic>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <vTaskStartScheduler+0xbc>)
 8003a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <vTaskStartScheduler+0xbc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e001      	b.n	8003a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d11b      	bne.n	8003ad4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	613b      	str	r3, [r7, #16]
}
 8003aae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <vTaskStartScheduler+0xc0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	334c      	adds	r3, #76	; 0x4c
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <vTaskStartScheduler+0xc4>)
 8003ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <vTaskStartScheduler+0xc8>)
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <vTaskStartScheduler+0xcc>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <vTaskStartScheduler+0xd0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ace:	f000 fbb7 	bl	8004240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ad2:	e00e      	b.n	8003af2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ada:	d10a      	bne.n	8003af2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <vTaskStartScheduler+0xa8>
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08004b38 	.word	0x08004b38
 8003b00:	08003ea5 	.word	0x08003ea5
 8003b04:	20000544 	.word	0x20000544
 8003b08:	20000420 	.word	0x20000420
 8003b0c:	20000010 	.word	0x20000010
 8003b10:	20000540 	.word	0x20000540
 8003b14:	2000052c 	.word	0x2000052c
 8003b18:	20000524 	.word	0x20000524

08003b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <vTaskSuspendAll+0x18>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <vTaskSuspendAll+0x18>)
 8003b28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20000548 	.word	0x20000548

08003b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	603b      	str	r3, [r7, #0]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b64:	f000 fc0e 	bl	8004384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d161      	bne.n	8003c3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b7a:	4b35      	ldr	r3, [pc, #212]	; (8003c50 <xTaskResumeAll+0x118>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d05d      	beq.n	8003c3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b82:	e02e      	b.n	8003be2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b84:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <xTaskResumeAll+0x11c>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fd50 	bl	8003636 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fd4b 	bl	8003636 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <xTaskResumeAll+0x120>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <xTaskResumeAll+0x120>)
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <xTaskResumeAll+0x124>)
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f7ff fcd7 	bl	800357c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <xTaskResumeAll+0x128>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003bdc:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <xTaskResumeAll+0x12c>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <xTaskResumeAll+0x11c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1cc      	bne.n	8003b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bf0:	f000 fa12 	bl	8004018 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <xTaskResumeAll+0x130>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d010      	beq.n	8003c22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c00:	f000 f836 	bl	8003c70 <xTaskIncrementTick>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <xTaskResumeAll+0x12c>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f1      	bne.n	8003c00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <xTaskResumeAll+0x130>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <xTaskResumeAll+0x12c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <xTaskResumeAll+0x134>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c3e:	f000 fbd1 	bl	80043e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c42:	68bb      	ldr	r3, [r7, #8]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000548 	.word	0x20000548
 8003c50:	20000520 	.word	0x20000520
 8003c54:	200004e0 	.word	0x200004e0
 8003c58:	20000528 	.word	0x20000528
 8003c5c:	20000424 	.word	0x20000424
 8003c60:	20000420 	.word	0x20000420
 8003c64:	20000534 	.word	0x20000534
 8003c68:	20000530 	.word	0x20000530
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <xTaskIncrementTick+0x144>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 808e 	bne.w	8003da0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <xTaskIncrementTick+0x148>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c8c:	4a4a      	ldr	r2, [pc, #296]	; (8003db8 <xTaskIncrementTick+0x148>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c98:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	603b      	str	r3, [r7, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xTaskIncrementTick+0x46>
 8003cb8:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <xTaskIncrementTick+0x150>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4a3e      	ldr	r2, [pc, #248]	; (8003dc0 <xTaskIncrementTick+0x150>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <xTaskIncrementTick+0x154>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <xTaskIncrementTick+0x154>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	f000 f99f 	bl	8004018 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d348      	bcc.n	8003d76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cf4:	601a      	str	r2, [r3, #0]
					break;
 8003cf6:	e03e      	b.n	8003d76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf8:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d203      	bcs.n	8003d18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d16:	e02e      	b.n	8003d76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fc8a 	bl	8003636 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fc81 	bl	8003636 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2201      	movs	r2, #1
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <xTaskIncrementTick+0x15c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <xTaskIncrementTick+0x15c>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <xTaskIncrementTick+0x160>)
 8003d54:	441a      	add	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7ff fc0d 	bl	800357c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <xTaskIncrementTick+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3b9      	bcc.n	8003ce4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d74:	e7b6      	b.n	8003ce4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <xTaskIncrementTick+0x164>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	4914      	ldr	r1, [pc, #80]	; (8003dd0 <xTaskIncrementTick+0x160>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d901      	bls.n	8003d92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <xTaskIncrementTick+0x168>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e004      	b.n	8003daa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <xTaskIncrementTick+0x16c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <xTaskIncrementTick+0x16c>)
 8003da8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003daa:	697b      	ldr	r3, [r7, #20]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000548 	.word	0x20000548
 8003db8:	20000524 	.word	0x20000524
 8003dbc:	200004d8 	.word	0x200004d8
 8003dc0:	200004dc 	.word	0x200004dc
 8003dc4:	20000538 	.word	0x20000538
 8003dc8:	20000540 	.word	0x20000540
 8003dcc:	20000528 	.word	0x20000528
 8003dd0:	20000424 	.word	0x20000424
 8003dd4:	20000420 	.word	0x20000420
 8003dd8:	20000534 	.word	0x20000534
 8003ddc:	20000530 	.word	0x20000530

08003de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <vTaskSwitchContext+0xac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <vTaskSwitchContext+0xb0>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003df4:	e044      	b.n	8003e80 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <vTaskSwitchContext+0xb0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <vTaskSwitchContext+0xb4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	f1c3 031f 	rsb	r3, r3, #31
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	4921      	ldr	r1, [pc, #132]	; (8003e98 <vTaskSwitchContext+0xb8>)
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	607b      	str	r3, [r7, #4]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <vTaskSwitchContext+0x5a>
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <vTaskSwitchContext+0xb8>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d104      	bne.n	8003e6c <vTaskSwitchContext+0x8c>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <vTaskSwitchContext+0xbc>)
 8003e74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <vTaskSwitchContext+0xbc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	334c      	adds	r3, #76	; 0x4c
 8003e7c:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <vTaskSwitchContext+0xc0>)
 8003e7e:	6013      	str	r3, [r2, #0]
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	20000548 	.word	0x20000548
 8003e90:	20000534 	.word	0x20000534
 8003e94:	20000528 	.word	0x20000528
 8003e98:	20000424 	.word	0x20000424
 8003e9c:	20000420 	.word	0x20000420
 8003ea0:	20000010 	.word	0x20000010

08003ea4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003eac:	f000 f852 	bl	8003f54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <prvIdleTask+0x28>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d9f9      	bls.n	8003eac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <prvIdleTask+0x2c>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ec8:	e7f0      	b.n	8003eac <prvIdleTask+0x8>
 8003eca:	bf00      	nop
 8003ecc:	20000424 	.word	0x20000424
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	e00c      	b.n	8003efa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <prvInitialiseTaskLists+0x60>)
 8003eec:	4413      	add	r3, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fb17 	bl	8003522 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d9ef      	bls.n	8003ee0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f00:	480d      	ldr	r0, [pc, #52]	; (8003f38 <prvInitialiseTaskLists+0x64>)
 8003f02:	f7ff fb0e 	bl	8003522 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f06:	480d      	ldr	r0, [pc, #52]	; (8003f3c <prvInitialiseTaskLists+0x68>)
 8003f08:	f7ff fb0b 	bl	8003522 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f0c:	480c      	ldr	r0, [pc, #48]	; (8003f40 <prvInitialiseTaskLists+0x6c>)
 8003f0e:	f7ff fb08 	bl	8003522 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f12:	480c      	ldr	r0, [pc, #48]	; (8003f44 <prvInitialiseTaskLists+0x70>)
 8003f14:	f7ff fb05 	bl	8003522 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f18:	480b      	ldr	r0, [pc, #44]	; (8003f48 <prvInitialiseTaskLists+0x74>)
 8003f1a:	f7ff fb02 	bl	8003522 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <prvInitialiseTaskLists+0x78>)
 8003f20:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <prvInitialiseTaskLists+0x64>)
 8003f22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <prvInitialiseTaskLists+0x7c>)
 8003f26:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <prvInitialiseTaskLists+0x68>)
 8003f28:	601a      	str	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000424 	.word	0x20000424
 8003f38:	200004b0 	.word	0x200004b0
 8003f3c:	200004c4 	.word	0x200004c4
 8003f40:	200004e0 	.word	0x200004e0
 8003f44:	200004f4 	.word	0x200004f4
 8003f48:	2000050c 	.word	0x2000050c
 8003f4c:	200004d8 	.word	0x200004d8
 8003f50:	200004dc 	.word	0x200004dc

08003f54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f5a:	e019      	b.n	8003f90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f5c:	f000 fa12 	bl	8004384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <prvCheckTasksWaitingTermination+0x50>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fb62 	bl	8003636 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <prvCheckTasksWaitingTermination+0x54>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <prvCheckTasksWaitingTermination+0x54>)
 8003f7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <prvCheckTasksWaitingTermination+0x58>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <prvCheckTasksWaitingTermination+0x58>)
 8003f84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f86:	f000 fa2d 	bl	80043e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f810 	bl	8003fb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <prvCheckTasksWaitingTermination+0x58>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e1      	bne.n	8003f5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200004f4 	.word	0x200004f4
 8003fa8:	20000520 	.word	0x20000520
 8003fac:	20000508 	.word	0x20000508

08003fb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	334c      	adds	r3, #76	; 0x4c
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fce9 	bl	8004994 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d108      	bne.n	8003fde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fb85 	bl	80046e0 <vPortFree>
				vPortFree( pxTCB );
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fb82 	bl	80046e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fdc:	e018      	b.n	8004010 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d103      	bne.n	8003ff0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fb79 	bl	80046e0 <vPortFree>
	}
 8003fee:	e00f      	b.n	8004010 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d00a      	beq.n	8004010 <prvDeleteTCB+0x60>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60fb      	str	r3, [r7, #12]
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <prvDeleteTCB+0x5e>
	}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <prvResetNextTaskUnblockTime+0x38>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <prvResetNextTaskUnblockTime+0x3c>)
 800402a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800402e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004030:	e008      	b.n	8004044 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004032:	4b07      	ldr	r3, [pc, #28]	; (8004050 <prvResetNextTaskUnblockTime+0x38>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <prvResetNextTaskUnblockTime+0x3c>)
 8004042:	6013      	str	r3, [r2, #0]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	200004d8 	.word	0x200004d8
 8004054:	20000540 	.word	0x20000540

08004058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004062:	4b29      	ldr	r3, [pc, #164]	; (8004108 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004068:	4b28      	ldr	r3, [pc, #160]	; (800410c <prvAddCurrentTaskToDelayedList+0xb4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fae1 	bl	8003636 <uxListRemove>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <prvAddCurrentTaskToDelayedList+0xb4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43da      	mvns	r2, r3
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4013      	ands	r3, r2
 800408e:	4a20      	ldr	r2, [pc, #128]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004090:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004098:	d10a      	bne.n	80040b0 <prvAddCurrentTaskToDelayedList+0x58>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4619      	mov	r1, r3
 80040a8:	481a      	ldr	r0, [pc, #104]	; (8004114 <prvAddCurrentTaskToDelayedList+0xbc>)
 80040aa:	f7ff fa67 	bl	800357c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040ae:	e026      	b.n	80040fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d209      	bcs.n	80040dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f7ff fa75 	bl	80035c4 <vListInsert>
}
 80040da:	e010      	b.n	80040fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <prvAddCurrentTaskToDelayedList+0xc4>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7ff fa6b 	bl	80035c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d202      	bcs.n	80040fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000524 	.word	0x20000524
 800410c:	20000420 	.word	0x20000420
 8004110:	20000528 	.word	0x20000528
 8004114:	2000050c 	.word	0x2000050c
 8004118:	200004dc 	.word	0x200004dc
 800411c:	200004d8 	.word	0x200004d8
 8004120:	20000540 	.word	0x20000540

08004124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3b04      	subs	r3, #4
 8004134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800413c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3b04      	subs	r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f023 0201 	bic.w	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b04      	subs	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004154:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <pxPortInitialiseStack+0x64>)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b14      	subs	r3, #20
 800415e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3b04      	subs	r3, #4
 800416a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f06f 0202 	mvn.w	r2, #2
 8004172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3b20      	subs	r3, #32
 8004178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800417a:	68fb      	ldr	r3, [r7, #12]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	0800418d 	.word	0x0800418d

0800418c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <prvTaskExitError+0x54>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800419e:	d00a      	beq.n	80041b6 <prvTaskExitError+0x2a>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	60fb      	str	r3, [r7, #12]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <prvTaskExitError+0x28>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60bb      	str	r3, [r7, #8]
}
 80041c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041ca:	bf00      	nop
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0fc      	beq.n	80041cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	2000000c 	.word	0x2000000c
	...

080041f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <pxCurrentTCBConst2>)
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6808      	ldr	r0, [r1, #0]
 80041f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fa:	f380 8809 	msr	PSP, r0
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8811 	msr	BASEPRI, r0
 800420a:	4770      	bx	lr
 800420c:	f3af 8000 	nop.w

08004210 <pxCurrentTCBConst2>:
 8004210:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop

08004218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004218:	4808      	ldr	r0, [pc, #32]	; (800423c <prvPortStartFirstTask+0x24>)
 800421a:	6800      	ldr	r0, [r0, #0]
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f380 8808 	msr	MSP, r0
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f380 8814 	msr	CONTROL, r0
 800422a:	b662      	cpsie	i
 800422c:	b661      	cpsie	f
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	df00      	svc	0
 8004238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800423a:	bf00      	nop
 800423c:	e000ed08 	.word	0xe000ed08

08004240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004246:	4b46      	ldr	r3, [pc, #280]	; (8004360 <xPortStartScheduler+0x120>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a46      	ldr	r2, [pc, #280]	; (8004364 <xPortStartScheduler+0x124>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10a      	bne.n	8004266 <xPortStartScheduler+0x26>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <xPortStartScheduler+0x120>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3f      	ldr	r2, [pc, #252]	; (8004368 <xPortStartScheduler+0x128>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10a      	bne.n	8004286 <xPortStartScheduler+0x46>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <xPortStartScheduler+0x12c>)
 8004288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4b31      	ldr	r3, [pc, #196]	; (8004370 <xPortStartScheduler+0x130>)
 80042ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042ae:	4b31      	ldr	r3, [pc, #196]	; (8004374 <xPortStartScheduler+0x134>)
 80042b0:	2207      	movs	r2, #7
 80042b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b4:	e009      	b.n	80042ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <xPortStartScheduler+0x134>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	4a2d      	ldr	r2, [pc, #180]	; (8004374 <xPortStartScheduler+0x134>)
 80042be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d0ef      	beq.n	80042b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <xPortStartScheduler+0x134>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f1c3 0307 	rsb	r3, r3, #7
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d00a      	beq.n	80042f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60bb      	str	r3, [r7, #8]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <xPortStartScheduler+0x134>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <xPortStartScheduler+0x134>)
 8004300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xPortStartScheduler+0x134>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <xPortStartScheduler+0x134>)
 800430c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <xPortStartScheduler+0x138>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a17      	ldr	r2, [pc, #92]	; (8004378 <xPortStartScheduler+0x138>)
 800431c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <xPortStartScheduler+0x138>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a14      	ldr	r2, [pc, #80]	; (8004378 <xPortStartScheduler+0x138>)
 8004328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800432c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800432e:	f000 f8dd 	bl	80044ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <xPortStartScheduler+0x13c>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004338:	f000 f8fc 	bl	8004534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <xPortStartScheduler+0x140>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <xPortStartScheduler+0x140>)
 8004342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004348:	f7ff ff66 	bl	8004218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800434c:	f7ff fd48 	bl	8003de0 <vTaskSwitchContext>
	prvTaskExitError();
 8004350:	f7ff ff1c 	bl	800418c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00
 8004364:	410fc271 	.word	0x410fc271
 8004368:	410fc270 	.word	0x410fc270
 800436c:	e000e400 	.word	0xe000e400
 8004370:	2000054c 	.word	0x2000054c
 8004374:	20000550 	.word	0x20000550
 8004378:	e000ed20 	.word	0xe000ed20
 800437c:	2000000c 	.word	0x2000000c
 8004380:	e000ef34 	.word	0xe000ef34

08004384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
}
 800439c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800439e:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <vPortEnterCritical+0x58>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <vPortEnterCritical+0x58>)
 80043a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <vPortEnterCritical+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10f      	bne.n	80043d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <vPortEnterCritical+0x5c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <vPortEnterCritical+0x4a>
	}
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	2000000c 	.word	0x2000000c
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <vPortExitCritical+0x50>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <vPortExitCritical+0x24>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	607b      	str	r3, [r7, #4]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <vPortExitCritical+0x50>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3b01      	subs	r3, #1
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <vPortExitCritical+0x50>)
 8004410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <vPortExitCritical+0x50>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <vPortExitCritical+0x42>
 800441a:	2300      	movs	r3, #0
 800441c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	2000000c 	.word	0x2000000c
	...

08004440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004440:	f3ef 8009 	mrs	r0, PSP
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <pxCurrentTCBConst>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f01e 0f10 	tst.w	lr, #16
 8004450:	bf08      	it	eq
 8004452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004464:	f380 8811 	msr	BASEPRI, r0
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f7ff fcb6 	bl	8003de0 <vTaskSwitchContext>
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f380 8811 	msr	BASEPRI, r0
 800447c:	bc09      	pop	{r0, r3}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004486:	f01e 0f10 	tst.w	lr, #16
 800448a:	bf08      	it	eq
 800448c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004490:	f380 8809 	msr	PSP, r0
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst>:
 80044a0:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
}
 80044c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044c2:	f7ff fbd5 	bl	8003c70 <xTaskIncrementTick>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <SysTick_Handler+0x40>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f383 8811 	msr	BASEPRI, r3
}
 80044de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <vPortSetupTimerInterrupt+0x38>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <vPortSetupTimerInterrupt+0x3c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <vPortSetupTimerInterrupt+0x40>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <vPortSetupTimerInterrupt+0x44>)
 800450a:	3b01      	subs	r3, #1
 800450c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 8004510:	2207      	movs	r2, #7
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e010 	.word	0xe000e010
 8004524:	e000e018 	.word	0xe000e018
 8004528:	20000000 	.word	0x20000000
 800452c:	10624dd3 	.word	0x10624dd3
 8004530:	e000e014 	.word	0xe000e014

08004534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004544 <vPortEnableVFP+0x10>
 8004538:	6801      	ldr	r1, [r0, #0]
 800453a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800453e:	6001      	str	r1, [r0, #0]
 8004540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004542:	bf00      	nop
 8004544:	e000ed88 	.word	0xe000ed88

08004548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004554:	f7ff fae2 	bl	8003b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004558:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <pvPortMalloc+0x180>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004560:	f000 f920 	bl	80047a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <pvPortMalloc+0x184>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 8093 	bne.w	8004698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01d      	beq.n	80045b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004578:	2208      	movs	r2, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b00      	cmp	r3, #0
 8004588:	d014      	beq.n	80045b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	3308      	adds	r3, #8
 8004592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <pvPortMalloc+0x6c>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	617b      	str	r3, [r7, #20]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d06e      	beq.n	8004698 <pvPortMalloc+0x150>
 80045ba:	4b45      	ldr	r3, [pc, #276]	; (80046d0 <pvPortMalloc+0x188>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d869      	bhi.n	8004698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045c4:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <pvPortMalloc+0x18c>)
 80045c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045c8:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <pvPortMalloc+0x18c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ce:	e004      	b.n	80045da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d903      	bls.n	80045ec <pvPortMalloc+0xa4>
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f1      	bne.n	80045d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045ec:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <pvPortMalloc+0x180>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d050      	beq.n	8004698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2208      	movs	r2, #8
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1ad2      	subs	r2, r2, r3
 8004610:	2308      	movs	r3, #8
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	429a      	cmp	r2, r3
 8004616:	d91f      	bls.n	8004658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <pvPortMalloc+0xf8>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	613b      	str	r3, [r7, #16]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004652:	69b8      	ldr	r0, [r7, #24]
 8004654:	f000 f908 	bl	8004868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <pvPortMalloc+0x188>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <pvPortMalloc+0x188>)
 8004664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <pvPortMalloc+0x188>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <pvPortMalloc+0x190>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d203      	bcs.n	800467a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <pvPortMalloc+0x188>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <pvPortMalloc+0x190>)
 8004678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <pvPortMalloc+0x184>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	431a      	orrs	r2, r3
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <pvPortMalloc+0x194>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a11      	ldr	r2, [pc, #68]	; (80046dc <pvPortMalloc+0x194>)
 8004696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004698:	f7ff fa4e 	bl	8003b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <pvPortMalloc+0x174>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60fb      	str	r3, [r7, #12]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <pvPortMalloc+0x172>
	return pvReturn;
 80046bc:	69fb      	ldr	r3, [r7, #28]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3728      	adds	r7, #40	; 0x28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	2000415c 	.word	0x2000415c
 80046cc:	20004170 	.word	0x20004170
 80046d0:	20004160 	.word	0x20004160
 80046d4:	20004154 	.word	0x20004154
 80046d8:	20004164 	.word	0x20004164
 80046dc:	20004168 	.word	0x20004168

080046e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04d      	beq.n	800478e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046f2:	2308      	movs	r3, #8
 80046f4:	425b      	negs	r3, r3
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b24      	ldr	r3, [pc, #144]	; (8004798 <vPortFree+0xb8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <vPortFree+0x44>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60fb      	str	r3, [r7, #12]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <vPortFree+0x62>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60bb      	str	r3, [r7, #8]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <vPortFree+0xb8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01e      	beq.n	800478e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11a      	bne.n	800478e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <vPortFree+0xb8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004768:	f7ff f9d8 	bl	8003b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <vPortFree+0xbc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4413      	add	r3, r2
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <vPortFree+0xbc>)
 8004778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800477a:	6938      	ldr	r0, [r7, #16]
 800477c:	f000 f874 	bl	8004868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <vPortFree+0xc0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	4a06      	ldr	r2, [pc, #24]	; (80047a0 <vPortFree+0xc0>)
 8004788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800478a:	f7ff f9d5 	bl	8003b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20004170 	.word	0x20004170
 800479c:	20004160 	.word	0x20004160
 80047a0:	2000416c 	.word	0x2000416c

080047a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <prvHeapInit+0xac>)
 80047b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3307      	adds	r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <prvHeapInit+0xac>)
 80047d4:	4413      	add	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <prvHeapInit+0xb0>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047e2:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <prvHeapInit+0xb0>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047f0:	2208      	movs	r2, #8
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a15      	ldr	r2, [pc, #84]	; (8004858 <prvHeapInit+0xb4>)
 8004804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <prvHeapInit+0xb4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <prvHeapInit+0xb4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <prvHeapInit+0xb4>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <prvHeapInit+0xb8>)
 8004832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <prvHeapInit+0xbc>)
 800483a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <prvHeapInit+0xc0>)
 800483e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	20000554 	.word	0x20000554
 8004854:	20004154 	.word	0x20004154
 8004858:	2000415c 	.word	0x2000415c
 800485c:	20004164 	.word	0x20004164
 8004860:	20004160 	.word	0x20004160
 8004864:	20004170 	.word	0x20004170

08004868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004870:	4b28      	ldr	r3, [pc, #160]	; (8004914 <prvInsertBlockIntoFreeList+0xac>)
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e002      	b.n	800487c <prvInsertBlockIntoFreeList+0x14>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	d8f7      	bhi.n	8004876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d108      	bne.n	80048aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d118      	bne.n	80048f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <prvInsertBlockIntoFreeList+0xb0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d00d      	beq.n	80048e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e008      	b.n	80048f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <prvInsertBlockIntoFreeList+0xb0>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e003      	b.n	80048f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d002      	beq.n	8004906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20004154 	.word	0x20004154
 8004918:	2000415c 	.word	0x2000415c

0800491c <__libc_init_array>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	4d0d      	ldr	r5, [pc, #52]	; (8004954 <__libc_init_array+0x38>)
 8004920:	4c0d      	ldr	r4, [pc, #52]	; (8004958 <__libc_init_array+0x3c>)
 8004922:	1b64      	subs	r4, r4, r5
 8004924:	10a4      	asrs	r4, r4, #2
 8004926:	2600      	movs	r6, #0
 8004928:	42a6      	cmp	r6, r4
 800492a:	d109      	bne.n	8004940 <__libc_init_array+0x24>
 800492c:	4d0b      	ldr	r5, [pc, #44]	; (800495c <__libc_init_array+0x40>)
 800492e:	4c0c      	ldr	r4, [pc, #48]	; (8004960 <__libc_init_array+0x44>)
 8004930:	f000 f8e4 	bl	8004afc <_init>
 8004934:	1b64      	subs	r4, r4, r5
 8004936:	10a4      	asrs	r4, r4, #2
 8004938:	2600      	movs	r6, #0
 800493a:	42a6      	cmp	r6, r4
 800493c:	d105      	bne.n	800494a <__libc_init_array+0x2e>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	f855 3b04 	ldr.w	r3, [r5], #4
 8004944:	4798      	blx	r3
 8004946:	3601      	adds	r6, #1
 8004948:	e7ee      	b.n	8004928 <__libc_init_array+0xc>
 800494a:	f855 3b04 	ldr.w	r3, [r5], #4
 800494e:	4798      	blx	r3
 8004950:	3601      	adds	r6, #1
 8004952:	e7f2      	b.n	800493a <__libc_init_array+0x1e>
 8004954:	08004bc0 	.word	0x08004bc0
 8004958:	08004bc0 	.word	0x08004bc0
 800495c:	08004bc0 	.word	0x08004bc0
 8004960:	08004bc4 	.word	0x08004bc4

08004964 <__retarget_lock_acquire_recursive>:
 8004964:	4770      	bx	lr

08004966 <__retarget_lock_release_recursive>:
 8004966:	4770      	bx	lr

08004968 <memset>:
 8004968:	4402      	add	r2, r0
 800496a:	4603      	mov	r3, r0
 800496c:	4293      	cmp	r3, r2
 800496e:	d100      	bne.n	8004972 <memset+0xa>
 8004970:	4770      	bx	lr
 8004972:	f803 1b01 	strb.w	r1, [r3], #1
 8004976:	e7f9      	b.n	800496c <memset+0x4>

08004978 <cleanup_glue>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	460c      	mov	r4, r1
 800497c:	6809      	ldr	r1, [r1, #0]
 800497e:	4605      	mov	r5, r0
 8004980:	b109      	cbz	r1, 8004986 <cleanup_glue+0xe>
 8004982:	f7ff fff9 	bl	8004978 <cleanup_glue>
 8004986:	4621      	mov	r1, r4
 8004988:	4628      	mov	r0, r5
 800498a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498e:	f000 b869 	b.w	8004a64 <_free_r>
	...

08004994 <_reclaim_reent>:
 8004994:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <_reclaim_reent+0xb4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4283      	cmp	r3, r0
 800499a:	b570      	push	{r4, r5, r6, lr}
 800499c:	4604      	mov	r4, r0
 800499e:	d051      	beq.n	8004a44 <_reclaim_reent+0xb0>
 80049a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049a2:	b143      	cbz	r3, 80049b6 <_reclaim_reent+0x22>
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d14a      	bne.n	8004a40 <_reclaim_reent+0xac>
 80049aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049ac:	6819      	ldr	r1, [r3, #0]
 80049ae:	b111      	cbz	r1, 80049b6 <_reclaim_reent+0x22>
 80049b0:	4620      	mov	r0, r4
 80049b2:	f000 f857 	bl	8004a64 <_free_r>
 80049b6:	6961      	ldr	r1, [r4, #20]
 80049b8:	b111      	cbz	r1, 80049c0 <_reclaim_reent+0x2c>
 80049ba:	4620      	mov	r0, r4
 80049bc:	f000 f852 	bl	8004a64 <_free_r>
 80049c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049c2:	b111      	cbz	r1, 80049ca <_reclaim_reent+0x36>
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 f84d 	bl	8004a64 <_free_r>
 80049ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049cc:	b111      	cbz	r1, 80049d4 <_reclaim_reent+0x40>
 80049ce:	4620      	mov	r0, r4
 80049d0:	f000 f848 	bl	8004a64 <_free_r>
 80049d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80049d6:	b111      	cbz	r1, 80049de <_reclaim_reent+0x4a>
 80049d8:	4620      	mov	r0, r4
 80049da:	f000 f843 	bl	8004a64 <_free_r>
 80049de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80049e0:	b111      	cbz	r1, 80049e8 <_reclaim_reent+0x54>
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f83e 	bl	8004a64 <_free_r>
 80049e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80049ea:	b111      	cbz	r1, 80049f2 <_reclaim_reent+0x5e>
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 f839 	bl	8004a64 <_free_r>
 80049f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049f4:	b111      	cbz	r1, 80049fc <_reclaim_reent+0x68>
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 f834 	bl	8004a64 <_free_r>
 80049fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049fe:	b111      	cbz	r1, 8004a06 <_reclaim_reent+0x72>
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 f82f 	bl	8004a64 <_free_r>
 8004a06:	69a3      	ldr	r3, [r4, #24]
 8004a08:	b1e3      	cbz	r3, 8004a44 <_reclaim_reent+0xb0>
 8004a0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4798      	blx	r3
 8004a10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a12:	b1b9      	cbz	r1, 8004a44 <_reclaim_reent+0xb0>
 8004a14:	4620      	mov	r0, r4
 8004a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a1a:	f7ff bfad 	b.w	8004978 <cleanup_glue>
 8004a1e:	5949      	ldr	r1, [r1, r5]
 8004a20:	b941      	cbnz	r1, 8004a34 <_reclaim_reent+0xa0>
 8004a22:	3504      	adds	r5, #4
 8004a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a26:	2d80      	cmp	r5, #128	; 0x80
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	d1f8      	bne.n	8004a1e <_reclaim_reent+0x8a>
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 f819 	bl	8004a64 <_free_r>
 8004a32:	e7ba      	b.n	80049aa <_reclaim_reent+0x16>
 8004a34:	680e      	ldr	r6, [r1, #0]
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 f814 	bl	8004a64 <_free_r>
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	e7ef      	b.n	8004a20 <_reclaim_reent+0x8c>
 8004a40:	2500      	movs	r5, #0
 8004a42:	e7ef      	b.n	8004a24 <_reclaim_reent+0x90>
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	bf00      	nop
 8004a48:	20000010 	.word	0x20000010

08004a4c <__malloc_lock>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__malloc_lock+0x8>)
 8004a4e:	f7ff bf89 	b.w	8004964 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	20004174 	.word	0x20004174

08004a58 <__malloc_unlock>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__malloc_unlock+0x8>)
 8004a5a:	f7ff bf84 	b.w	8004966 <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	20004174 	.word	0x20004174

08004a64 <_free_r>:
 8004a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d044      	beq.n	8004af4 <_free_r+0x90>
 8004a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6e:	9001      	str	r0, [sp, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f1a1 0404 	sub.w	r4, r1, #4
 8004a76:	bfb8      	it	lt
 8004a78:	18e4      	addlt	r4, r4, r3
 8004a7a:	f7ff ffe7 	bl	8004a4c <__malloc_lock>
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <_free_r+0x94>)
 8004a80:	9801      	ldr	r0, [sp, #4]
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	b933      	cbnz	r3, 8004a94 <_free_r+0x30>
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	6014      	str	r4, [r2, #0]
 8004a8a:	b003      	add	sp, #12
 8004a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a90:	f7ff bfe2 	b.w	8004a58 <__malloc_unlock>
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d908      	bls.n	8004aaa <_free_r+0x46>
 8004a98:	6825      	ldr	r5, [r4, #0]
 8004a9a:	1961      	adds	r1, r4, r5
 8004a9c:	428b      	cmp	r3, r1
 8004a9e:	bf01      	itttt	eq
 8004aa0:	6819      	ldreq	r1, [r3, #0]
 8004aa2:	685b      	ldreq	r3, [r3, #4]
 8004aa4:	1949      	addeq	r1, r1, r5
 8004aa6:	6021      	streq	r1, [r4, #0]
 8004aa8:	e7ed      	b.n	8004a86 <_free_r+0x22>
 8004aaa:	461a      	mov	r2, r3
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b10b      	cbz	r3, 8004ab4 <_free_r+0x50>
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	d9fa      	bls.n	8004aaa <_free_r+0x46>
 8004ab4:	6811      	ldr	r1, [r2, #0]
 8004ab6:	1855      	adds	r5, r2, r1
 8004ab8:	42a5      	cmp	r5, r4
 8004aba:	d10b      	bne.n	8004ad4 <_free_r+0x70>
 8004abc:	6824      	ldr	r4, [r4, #0]
 8004abe:	4421      	add	r1, r4
 8004ac0:	1854      	adds	r4, r2, r1
 8004ac2:	42a3      	cmp	r3, r4
 8004ac4:	6011      	str	r1, [r2, #0]
 8004ac6:	d1e0      	bne.n	8004a8a <_free_r+0x26>
 8004ac8:	681c      	ldr	r4, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	6053      	str	r3, [r2, #4]
 8004ace:	4421      	add	r1, r4
 8004ad0:	6011      	str	r1, [r2, #0]
 8004ad2:	e7da      	b.n	8004a8a <_free_r+0x26>
 8004ad4:	d902      	bls.n	8004adc <_free_r+0x78>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	6003      	str	r3, [r0, #0]
 8004ada:	e7d6      	b.n	8004a8a <_free_r+0x26>
 8004adc:	6825      	ldr	r5, [r4, #0]
 8004ade:	1961      	adds	r1, r4, r5
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf04      	itt	eq
 8004ae4:	6819      	ldreq	r1, [r3, #0]
 8004ae6:	685b      	ldreq	r3, [r3, #4]
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	bf04      	itt	eq
 8004aec:	1949      	addeq	r1, r1, r5
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	6054      	str	r4, [r2, #4]
 8004af2:	e7ca      	b.n	8004a8a <_free_r+0x26>
 8004af4:	b003      	add	sp, #12
 8004af6:	bd30      	pop	{r4, r5, pc}
 8004af8:	20004178 	.word	0x20004178

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
