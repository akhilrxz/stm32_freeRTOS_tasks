
freeRTOS_ldr_adc_pwm1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005254  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c8  080054c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d0  080054d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004150  20000074  0800554c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041c4  0800554c  000241c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001600a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd4  00000000  00000000  000360ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00038e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003a058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246b8  00000000  00000000  0003b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ae  00000000  00000000  0005f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e507a  00000000  00000000  00073e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d80  00000000  00000000  00158f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800540c 	.word	0x0800540c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800540c 	.word	0x0800540c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000090 	.word	0x20000090
 8000544:	20000144 	.word	0x20000144

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fc15 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f821 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f97f 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f953 	bl	8000804 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800055e:	f000 f889 	bl	8000674 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000562:	f000 f8d9 	bl	8000718 <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of idr_pwm */
  osThreadDef(idr_pwm, idr_pwm_fun, osPriorityNormal, 0, 128);
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <main+0x48>)
 8000568:	1d3c      	adds	r4, r7, #4
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  idr_pwmHandle = osThreadCreate(osThread(idr_pwm), NULL);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fbfc 	bl	8003d7a <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <main+0x4c>)
 8000586:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f003 fbf0 	bl	8003d6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x44>
 800058e:	bf00      	nop
 8000590:	0800542c 	.word	0x0800542c
 8000594:	20000418 	.word	0x20000418

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fe66 	bl	8005278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <SystemClock_Config+0xd4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a29      	ldr	r2, [pc, #164]	; (800066c <SystemClock_Config+0xd4>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xd4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <SystemClock_Config+0xd8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a22      	ldr	r2, [pc, #136]	; (8000670 <SystemClock_Config+0xd8>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <SystemClock_Config+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800060c:	2310      	movs	r3, #16
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000616:	2304      	movs	r3, #4
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fdec 	bl	8002204 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000632:	f000 f9b5 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fa5a 	bl	8001b0c <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065e:	f000 f99f 	bl	80009a0 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_ADC1_Init+0x98>)
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_ADC1_Init+0x9c>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ADC1_Init+0x98>)
 800068e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000692:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ADC1_Init+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ADC1_Init+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_ADC1_Init+0x98>)
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_ADC1_Init+0xa0>)
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_ADC1_Init+0x98>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_ADC1_Init+0x98>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_ADC1_Init+0x98>)
 80006d6:	f000 fb93 	bl	8000e00 <HAL_ADC_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f95e 	bl	80009a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_ADC1_Init+0x98>)
 80006f6:	f000 fd65 	bl	80011c4 <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000700:	f000 f94e 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000344 	.word	0x20000344
 8000710:	40012000 	.word	0x40012000
 8000714:	0f000001 	.word	0x0f000001

08000718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]
 8000746:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_TIM2_Init+0xe8>)
 800074a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_TIM2_Init+0xe8>)
 8000752:	220f      	movs	r2, #15
 8000754:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_TIM2_Init+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_TIM2_Init+0xe8>)
 800075e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000762:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_TIM2_Init+0xe8>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_TIM2_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <MX_TIM2_Init+0xe8>)
 8000772:	f001 ffe5 	bl	8002740 <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800077c:	f000 f910 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	4619      	mov	r1, r3
 800078c:	481c      	ldr	r0, [pc, #112]	; (8000800 <MX_TIM2_Init+0xe8>)
 800078e:	f002 fb83 	bl	8002e98 <HAL_TIM_ConfigClockSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000798:	f000 f902 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800079c:	4818      	ldr	r0, [pc, #96]	; (8000800 <MX_TIM2_Init+0xe8>)
 800079e:	f002 f88f 	bl	80028c0 <HAL_TIM_PWM_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007a8:	f000 f8fa 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4619      	mov	r1, r3
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_TIM2_Init+0xe8>)
 80007bc:	f002 ff6c 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007c6:	f000 f8eb 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	2360      	movs	r3, #96	; 0x60
 80007cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80007ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <MX_TIM2_Init+0xe8>)
 80007e4:	f002 fa96 	bl	8002d14 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007ee:	f000 f8d7 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <MX_TIM2_Init+0xe8>)
 80007f4:	f000 f96a 	bl	8000acc <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3738      	adds	r7, #56	; 0x38
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000038c 	.word	0x2000038c

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f002 ffbc 	bl	80037b8 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f8ab 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200003d4 	.word	0x200003d4
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_GPIO_Init+0xac>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_GPIO_Init+0xac>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_GPIO_Init+0xac>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_GPIO_Init+0xac>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_GPIO_Init+0xac>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_GPIO_Init+0xac>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_GPIO_Init+0xac>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_GPIO_Init+0xac>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_GPIO_Init+0xac>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_GPIO_Init+0xac>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <MX_GPIO_Init+0xac>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_GPIO_Init+0xac>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0xb0>)
 80008f6:	f000 ff75 	bl	80017e4 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020800 	.word	0x40020800

0800090c <idr_pwm_fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_idr_pwm_fun */
void idr_pwm_fun(void const * argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	 uint16_t dutycycle = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	81fb      	strh	r3, [r7, #14]
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000918:	2100      	movs	r1, #0
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <idr_pwm_fun+0x64>)
 800091c:	f002 f82a 	bl	8002974 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <idr_pwm_fun+0x68>)
 8000922:	f000 fab1 	bl	8000e88 <HAL_ADC_Start>
	  	      if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000926:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <idr_pwm_fun+0x68>)
 800092c:	f000 fbb1 	bl	8001092 <HAL_ADC_PollForConversion>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d114      	bne.n	8000960 <idr_pwm_fun+0x54>
	  	      {
	  	        uint32_t adcValue = HAL_ADC_GetValue(&hadc1);  // Get ADC value
 8000936:	480f      	ldr	r0, [pc, #60]	; (8000974 <idr_pwm_fun+0x68>)
 8000938:	f000 fc36 	bl	80011a8 <HAL_ADC_GetValue>
 800093c:	60b8      	str	r0, [r7, #8]
	  	        dutycycle = (adcValue * 1000) / 4095;  // Scale ADC value to 0-1000 for PWM
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000944:	fb03 f202 	mul.w	r2, r3, r2
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <idr_pwm_fun+0x6c>)
 800094a:	fba3 1302 	umull	r1, r3, r3, r2
 800094e:	1ad2      	subs	r2, r2, r3
 8000950:	0852      	lsrs	r2, r2, #1
 8000952:	4413      	add	r3, r2
 8000954:	0adb      	lsrs	r3, r3, #11
 8000956:	81fb      	strh	r3, [r7, #14]
	  	        htim2.Instance->CCR1 = dutycycle;  // Set PWM duty cycle
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <idr_pwm_fun+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	89fa      	ldrh	r2, [r7, #14]
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
	  	      }
	  	      HAL_ADC_Stop(&hadc1);
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <idr_pwm_fun+0x68>)
 8000962:	f000 fb63 	bl	800102c <HAL_ADC_Stop>
    osDelay(1);
 8000966:	2001      	movs	r0, #1
 8000968:	f003 fa53 	bl	8003e12 <osDelay>
	  HAL_ADC_Start(&hadc1);
 800096c:	e7d8      	b.n	8000920 <idr_pwm_fun+0x14>
 800096e:	bf00      	nop
 8000970:	2000038c 	.word	0x2000038c
 8000974:	20000344 	.word	0x20000344
 8000978:	00100101 	.word	0x00100101

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fa17 	bl	8000dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40000400 	.word	0x40000400

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <HAL_MspInit+0x54>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_MspInit+0x54>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	210f      	movs	r1, #15
 80009ee:	f06f 0001 	mvn.w	r0, #1
 80009f2:	f000 fecd 	bl	8001790 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <HAL_ADC_MspInit+0x7c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d127      	bne.n	8000a76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_ADC_MspInit+0x80>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0x80>)
 8000a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_ADC_MspInit+0x80>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_ADC_MspInit+0x80>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_ADC_MspInit+0x80>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_ADC_MspInit+0x80>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_ADC_MspInit+0x84>)
 8000a72:	f000 feb7 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40012000 	.word	0x40012000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a9c:	d10d      	bne.n	8000aba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aec:	d11d      	bne.n	8000b2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_TIM_MspPostInit+0x68>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_TIM_MspPostInit+0x68>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_TIM_MspPostInit+0x68>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <HAL_TIM_MspPostInit+0x6c>)
 8000b26:	f000 fe5d 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb2:	f000 fe17 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <HAL_InitTick+0xe4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a32      	ldr	r2, [pc, #200]	; (8000cb0 <HAL_InitTick+0xe4>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <HAL_InitTick+0xe4>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f89c 	bl	8001d40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 f86d 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8000c16:	6378      	str	r0, [r7, #52]	; 0x34
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1a:	f001 f869 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <HAL_InitTick+0xe8>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0c9b      	lsrs	r3, r3, #18
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c44:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c5a:	f001 fd71 	bl	8002740 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11b      	bne.n	8000ca4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000c6c:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c6e:	f001 fdb7 	bl	80027e0 <HAL_TIM_Base_Start_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c80:	201d      	movs	r0, #29
 8000c82:	f000 fda1 	bl	80017c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d808      	bhi.n	8000c9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	201d      	movs	r0, #29
 8000c92:	f000 fd7d 	bl	8001790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0xf4>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e002      	b.n	8000ca4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	2000041c 	.word	0x2000041c
 8000cbc:	40000400 	.word	0x40000400
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM3_IRQHandler+0x10>)
 8000cf6:	f001 ff05 	bl	8002b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000041c 	.word	0x2000041c

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f004 fa69 	bl	800522c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fbf5 	bl	8000548 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d6c:	080054d8 	.word	0x080054d8
  ldr r2, =_sbss
 8000d70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d74:	200041c4 	.word	0x200041c4

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 fce8 	bl	800177a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f7ff ff0e 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fdfc 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000464 	.word	0x20000464

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000464 	.word	0x20000464

08000e00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e033      	b.n	8000e7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d109      	bne.n	8000e32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fdf0 	bl	8000a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d118      	bne.n	8000e70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e46:	f023 0302 	bic.w	r3, r3, #2
 8000e4a:	f043 0202 	orr.w	r2, r3, #2
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fae8 	bl	8001428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f023 0303 	bic.w	r3, r3, #3
 8000e66:	f043 0201 	orr.w	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6e:	e001      	b.n	8000e74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Start+0x1a>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e0b2      	b.n	8001008 <HAL_ADC_Start+0x180>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d018      	beq.n	8000eea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ec8:	4b52      	ldr	r3, [pc, #328]	; (8001014 <HAL_ADC_Start+0x18c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a52      	ldr	r2, [pc, #328]	; (8001018 <HAL_ADC_Start+0x190>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9a      	lsrs	r2, r3, #18
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000edc:	e002      	b.n	8000ee4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f9      	bne.n	8000ede <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d17a      	bne.n	8000fee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f36:	d106      	bne.n	8000f46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	f023 0206 	bic.w	r2, r3, #6
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	645a      	str	r2, [r3, #68]	; 0x44
 8000f44:	e002      	b.n	8000f4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_ADC_Start+0x194>)
 8000f56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d12a      	bne.n	8000fc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a2b      	ldr	r2, [pc, #172]	; (8001020 <HAL_ADC_Start+0x198>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d015      	beq.n	8000fa4 <HAL_ADC_Start+0x11c>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a29      	ldr	r2, [pc, #164]	; (8001024 <HAL_ADC_Start+0x19c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d105      	bne.n	8000f8e <HAL_ADC_Start+0x106>
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_ADC_Start+0x194>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00a      	beq.n	8000fa4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_ADC_Start+0x1a0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d136      	bne.n	8001006 <HAL_ADC_Start+0x17e>
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_ADC_Start+0x194>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d130      	bne.n	8001006 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d129      	bne.n	8001006 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	e020      	b.n	8001006 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <HAL_ADC_Start+0x198>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11b      	bne.n	8001006 <HAL_ADC_Start+0x17e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d114      	bne.n	8001006 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	e00b      	b.n	8001006 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f043 0210 	orr.w	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83
 800101c:	40012300 	.word	0x40012300
 8001020:	40012000 	.word	0x40012000
 8001024:	40012100 	.word	0x40012100
 8001028:	40012200 	.word	0x40012200

0800102c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_ADC_Stop+0x16>
 800103e:	2302      	movs	r3, #2
 8001040:	e021      	b.n	8001086 <HAL_ADC_Stop+0x5a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	f043 0201 	orr.w	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ae:	d113      	bne.n	80010d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010be:	d10b      	bne.n	80010d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f043 0220 	orr.w	r2, r3, #32
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e063      	b.n	80011a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010d8:	f7ff fe86 	bl	8000de8 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010de:	e021      	b.n	8001124 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e6:	d01d      	beq.n	8001124 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_ADC_PollForConversion+0x6c>
 80010ee:	f7ff fe7b 	bl	8000de8 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d212      	bcs.n	8001124 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b02      	cmp	r3, #2
 800110a:	d00b      	beq.n	8001124 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f043 0204 	orr.w	r2, r3, #4
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e03d      	b.n	80011a0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b02      	cmp	r3, #2
 8001130:	d1d6      	bne.n	80010e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f06f 0212 	mvn.w	r2, #18
 800113a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d123      	bne.n	800119e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800115a:	2b00      	cmp	r3, #0
 800115c:	d11f      	bne.n	800119e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001176:	2b00      	cmp	r3, #0
 8001178:	d111      	bne.n	800119e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1c>
 80011dc:	2302      	movs	r3, #2
 80011de:	e113      	b.n	8001408 <HAL_ADC_ConfigChannel+0x244>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d925      	bls.n	800123c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68d9      	ldr	r1, [r3, #12]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b1e      	subs	r3, #30
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43da      	mvns	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	400a      	ands	r2, r1
 8001214:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	4603      	mov	r3, r0
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4403      	add	r3, r0
 800122e:	3b1e      	subs	r3, #30
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	e022      	b.n	8001282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6919      	ldr	r1, [r3, #16]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	2207      	movs	r2, #7
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	400a      	ands	r2, r1
 800125e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6919      	ldr	r1, [r3, #16]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b06      	cmp	r3, #6
 8001288:	d824      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	221f      	movs	r2, #31
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b05      	subs	r3, #5
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
 80012d2:	e04c      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d824      	bhi.n	8001326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b23      	subs	r3, #35	; 0x23
 80012ee:	221f      	movs	r2, #31
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b23      	subs	r3, #35	; 0x23
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
 8001324:	e023      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b41      	subs	r3, #65	; 0x41
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b41      	subs	r3, #65	; 0x41
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_ADC_ConfigChannel+0x250>)
 8001370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_ADC_ConfigChannel+0x254>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10f      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d10b      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_ADC_ConfigChannel+0x254>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12b      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d003      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x1f4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b11      	cmp	r3, #17
 80013b6:	d122      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0x25c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_ADC_ConfigChannel+0x260>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40012300 	.word	0x40012300
 8001418:	40012000 	.word	0x40012000
 800141c:	10000012 	.word	0x10000012
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001430:	4b79      	ldr	r3, [pc, #484]	; (8001618 <ADC_Init+0x1f0>)
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800145c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	021a      	lsls	r2, r3, #8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <ADC_Init+0x1f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e00f      	b.n	8001526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0202 	bic.w	r2, r2, #2
 8001534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	005a      	lsls	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	3b01      	subs	r3, #1
 8001580:	035a      	lsls	r2, r3, #13
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	e007      	b.n	800159c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	051a      	lsls	r2, r3, #20
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015de:	025a      	lsls	r2, r3, #9
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	029a      	lsls	r2, r3, #10
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40012300 	.word	0x40012300
 800161c:	0f000001 	.word	0x0f000001

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ff4c 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a2:	f7ff ff61 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	6978      	ldr	r0, [r7, #20]
 80017ae:	f7ff ffb1 	bl	8001714 <NVIC_EncodePriority>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff80 	bl	80016c0 <__NVIC_SetPriority>
}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff54 	bl	8001684 <__NVIC_EnableIRQ>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	e165      	b.n	8001acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	429a      	cmp	r2, r3
 800181a:	f040 8154 	bne.w	8001ac6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d005      	beq.n	8001836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001832:	2b02      	cmp	r3, #2
 8001834:	d130      	bne.n	8001898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 0201 	and.w	r2, r3, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d017      	beq.n	80018d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d123      	bne.n	8001928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	08da      	lsrs	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3208      	adds	r2, #8
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0203 	and.w	r2, r3, #3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80ae 	beq.w	8001ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001986:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4f      	ldr	r2, [pc, #316]	; (8001aec <HAL_GPIO_Init+0x308>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x21a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_GPIO_Init+0x30c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x216>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x310>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x212>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_GPIO_Init+0x314>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x20e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_GPIO_Init+0x318>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x20a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x31c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x206>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x320>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x202>
 80019e2:	2306      	movs	r3, #6
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f ae96 	bls.w	8001800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0cc      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d90c      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b8      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	494d      	ldr	r1, [pc, #308]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d044      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d119      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e07f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e067      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4934      	ldr	r1, [pc, #208]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f8f4 	bl	8000de8 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f8f0 	bl	8000de8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e04f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d20c      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e032      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4916      	ldr	r1, [pc, #88]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	490e      	ldr	r1, [pc, #56]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c92:	f000 f887 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	490a      	ldr	r1, [pc, #40]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	5ccb      	ldrb	r3, [r1, r3]
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe ff8a 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	08005450 	.word	0x08005450
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a9b      	lsrs	r3, r3, #10
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08005460 	.word	0x08005460

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffdc 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0b5b      	lsrs	r3, r3, #13
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08005460 	.word	0x08005460

08001d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_RCC_GetClockConfig+0x60>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da8:	b0ae      	sub	sp, #184	; 0xb8
 8001daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dca:	4bcb      	ldr	r3, [pc, #812]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	f200 8206 	bhi.w	80021e4 <HAL_RCC_GetSysClockFreq+0x440>
 8001dd8:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001e15 	.word	0x08001e15
 8001de4:	080021e5 	.word	0x080021e5
 8001de8:	080021e5 	.word	0x080021e5
 8001dec:	080021e5 	.word	0x080021e5
 8001df0:	08001e1d 	.word	0x08001e1d
 8001df4:	080021e5 	.word	0x080021e5
 8001df8:	080021e5 	.word	0x080021e5
 8001dfc:	080021e5 	.word	0x080021e5
 8001e00:	08001e25 	.word	0x08001e25
 8001e04:	080021e5 	.word	0x080021e5
 8001e08:	080021e5 	.word	0x080021e5
 8001e0c:	080021e5 	.word	0x080021e5
 8001e10:	08002015 	.word	0x08002015
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4bb9      	ldr	r3, [pc, #740]	; (80020fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001e1a:	e1e7      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1c:	4bb8      	ldr	r3, [pc, #736]	; (8002100 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e22:	e1e3      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e24:	4bb4      	ldr	r3, [pc, #720]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e30:	4bb1      	ldr	r3, [pc, #708]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d071      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3c:	4bae      	ldr	r3, [pc, #696]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e48:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e62:	4622      	mov	r2, r4
 8001e64:	462b      	mov	r3, r5
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0159      	lsls	r1, r3, #5
 8001e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e74:	0150      	lsls	r0, r2, #5
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	1a51      	subs	r1, r2, r1
 8001e7e:	6439      	str	r1, [r7, #64]	; 0x40
 8001e80:	4629      	mov	r1, r5
 8001e82:	eb63 0301 	sbc.w	r3, r3, r1
 8001e86:	647b      	str	r3, [r7, #68]	; 0x44
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e94:	4649      	mov	r1, r9
 8001e96:	018b      	lsls	r3, r1, #6
 8001e98:	4641      	mov	r1, r8
 8001e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	018a      	lsls	r2, r1, #6
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	1a51      	subs	r1, r2, r1
 8001ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	00cb      	lsls	r3, r1, #3
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec6:	4641      	mov	r1, r8
 8001ec8:	00ca      	lsls	r2, r1, #3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4622      	mov	r2, r4
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed6:	462b      	mov	r3, r5
 8001ed8:	460a      	mov	r2, r1
 8001eda:	eb42 0303 	adc.w	r3, r2, r3
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eec:	4629      	mov	r1, r5
 8001eee:	024b      	lsls	r3, r1, #9
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	024a      	lsls	r2, r1, #9
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f02:	2200      	movs	r2, #0
 8001f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f10:	f7fe f97e 	bl	8000210 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f1e:	e067      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f20:	4b75      	ldr	r3, [pc, #468]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f2c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f38:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f42:	4622      	mov	r2, r4
 8001f44:	462b      	mov	r3, r5
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	0159      	lsls	r1, r3, #5
 8001f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f54:	0150      	lsls	r0, r2, #5
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	1a51      	subs	r1, r2, r1
 8001f5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f60:	4629      	mov	r1, r5
 8001f62:	eb63 0301 	sbc.w	r3, r3, r1
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f74:	4649      	mov	r1, r9
 8001f76:	018b      	lsls	r3, r1, #6
 8001f78:	4641      	mov	r1, r8
 8001f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7e:	4641      	mov	r1, r8
 8001f80:	018a      	lsls	r2, r1, #6
 8001f82:	4641      	mov	r1, r8
 8001f84:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f88:	4649      	mov	r1, r9
 8001f8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fa2:	4692      	mov	sl, r2
 8001fa4:	469b      	mov	fp, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	eb1a 0303 	adds.w	r3, sl, r3
 8001fac:	623b      	str	r3, [r7, #32]
 8001fae:	462b      	mov	r3, r5
 8001fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	028b      	lsls	r3, r1, #10
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fcc:	4621      	mov	r1, r4
 8001fce:	028a      	lsls	r2, r1, #10
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fd8:	2200      	movs	r2, #0
 8001fda:	673b      	str	r3, [r7, #112]	; 0x70
 8001fdc:	677a      	str	r2, [r7, #116]	; 0x74
 8001fde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fe2:	f7fe f915 	bl	8000210 <__aeabi_uldivmod>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4613      	mov	r3, r2
 8001fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ff0:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002012:	e0eb      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002014:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800201c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d06b      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	2200      	movs	r2, #0
 8002034:	66bb      	str	r3, [r7, #104]	; 0x68
 8002036:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800203a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203e:	663b      	str	r3, [r7, #96]	; 0x60
 8002040:	2300      	movs	r3, #0
 8002042:	667b      	str	r3, [r7, #100]	; 0x64
 8002044:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002048:	4622      	mov	r2, r4
 800204a:	462b      	mov	r3, r5
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	0159      	lsls	r1, r3, #5
 8002056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205a:	0150      	lsls	r0, r2, #5
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4621      	mov	r1, r4
 8002062:	1a51      	subs	r1, r2, r1
 8002064:	61b9      	str	r1, [r7, #24]
 8002066:	4629      	mov	r1, r5
 8002068:	eb63 0301 	sbc.w	r3, r3, r1
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800207a:	4659      	mov	r1, fp
 800207c:	018b      	lsls	r3, r1, #6
 800207e:	4651      	mov	r1, sl
 8002080:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002084:	4651      	mov	r1, sl
 8002086:	018a      	lsls	r2, r1, #6
 8002088:	4651      	mov	r1, sl
 800208a:	ebb2 0801 	subs.w	r8, r2, r1
 800208e:	4659      	mov	r1, fp
 8002090:	eb63 0901 	sbc.w	r9, r3, r1
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020a8:	4690      	mov	r8, r2
 80020aa:	4699      	mov	r9, r3
 80020ac:	4623      	mov	r3, r4
 80020ae:	eb18 0303 	adds.w	r3, r8, r3
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	462b      	mov	r3, r5
 80020b6:	eb49 0303 	adc.w	r3, r9, r3
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020c8:	4629      	mov	r1, r5
 80020ca:	024b      	lsls	r3, r1, #9
 80020cc:	4621      	mov	r1, r4
 80020ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020d2:	4621      	mov	r1, r4
 80020d4:	024a      	lsls	r2, r1, #9
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020de:	2200      	movs	r2, #0
 80020e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80020e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020e8:	f7fe f892 	bl	8000210 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020f6:	e065      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x420>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_GetSysClockFreq+0x458>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	2200      	movs	r2, #0
 800210c:	4618      	mov	r0, r3
 800210e:	4611      	mov	r1, r2
 8002110:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002114:	653b      	str	r3, [r7, #80]	; 0x50
 8002116:	2300      	movs	r3, #0
 8002118:	657b      	str	r3, [r7, #84]	; 0x54
 800211a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800211e:	4642      	mov	r2, r8
 8002120:	464b      	mov	r3, r9
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	0159      	lsls	r1, r3, #5
 800212c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002130:	0150      	lsls	r0, r2, #5
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4641      	mov	r1, r8
 8002138:	1a51      	subs	r1, r2, r1
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	4649      	mov	r1, r9
 800213e:	eb63 0301 	sbc.w	r3, r3, r1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002150:	4659      	mov	r1, fp
 8002152:	018b      	lsls	r3, r1, #6
 8002154:	4651      	mov	r1, sl
 8002156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800215a:	4651      	mov	r1, sl
 800215c:	018a      	lsls	r2, r1, #6
 800215e:	4651      	mov	r1, sl
 8002160:	1a54      	subs	r4, r2, r1
 8002162:	4659      	mov	r1, fp
 8002164:	eb63 0501 	sbc.w	r5, r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	00eb      	lsls	r3, r5, #3
 8002172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002176:	00e2      	lsls	r2, r4, #3
 8002178:	4614      	mov	r4, r2
 800217a:	461d      	mov	r5, r3
 800217c:	4643      	mov	r3, r8
 800217e:	18e3      	adds	r3, r4, r3
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	464b      	mov	r3, r9
 8002184:	eb45 0303 	adc.w	r3, r5, r3
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002196:	4629      	mov	r1, r5
 8002198:	028b      	lsls	r3, r1, #10
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a0:	4621      	mov	r1, r4
 80021a2:	028a      	lsls	r2, r1, #10
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021ac:	2200      	movs	r2, #0
 80021ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80021b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021b6:	f7fe f82b 	bl	8000210 <__aeabi_uldivmod>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4613      	mov	r3, r2
 80021c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_RCC_GetSysClockFreq+0x458>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0f1b      	lsrs	r3, r3, #28
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80021d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021e2:	e003      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	37b8      	adds	r7, #184	; 0xb8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400

08002204 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e28d      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8083 	beq.w	800232a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002224:	4b94      	ldr	r3, [pc, #592]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b04      	cmp	r3, #4
 800222e:	d019      	beq.n	8002264 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002230:	4b91      	ldr	r3, [pc, #580]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002238:	2b08      	cmp	r3, #8
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800223c:	4b8e      	ldr	r3, [pc, #568]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002248:	d00c      	beq.n	8002264 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4b8b      	ldr	r3, [pc, #556]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b88      	ldr	r3, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b84      	ldr	r3, [pc, #528]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05b      	beq.n	8002328 <HAL_RCC_OscConfig+0x124>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d157      	bne.n	8002328 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e25a      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x90>
 8002286:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a7b      	ldr	r2, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xcc>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0xb4>
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a75      	ldr	r2, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b73      	ldr	r3, [pc, #460]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a72      	ldr	r2, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xcc>
 80022b8:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b6c      	ldr	r3, [pc, #432]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a6b      	ldr	r2, [pc, #428]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fd86 	bl	8000de8 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe fd82 	bl	8000de8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e21f      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xdc>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fd72 	bl	8000de8 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fd6e 	bl	8000de8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e20b      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x104>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d06f      	beq.n	8002416 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002336:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d017      	beq.n	8002372 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002342:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800234a:	2b08      	cmp	r3, #8
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d11c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x186>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1d3      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4937      	ldr	r1, [pc, #220]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	e03a      	b.n	8002416 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x278>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7fe fd1b 	bl	8000de8 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe fd17 	bl	8000de8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1b4      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4925      	ldr	r1, [pc, #148]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x278>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fcfa 	bl	8000de8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe fcf6 	bl	8000de8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e193      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d036      	beq.n	8002490 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_RCC_OscConfig+0x27c>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fcda 	bl	8000de8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fcd6 	bl	8000de8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e173      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800244c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x234>
 8002456:	e01b      	b.n	8002490 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_OscConfig+0x27c>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe fcc3 	bl	8000de8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	e00e      	b.n	8002484 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe fcbf 	bl	8000de8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d907      	bls.n	8002484 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e15c      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
 8002478:	40023800 	.word	0x40023800
 800247c:	42470000 	.word	0x42470000
 8002480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b8a      	ldr	r3, [pc, #552]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ea      	bne.n	8002466 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8097 	beq.w	80025cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a7e      	ldr	r2, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <HAL_RCC_OscConfig+0x4b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x4b0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x4b0>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7fe fc7f 	bl	8000de8 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe fc7b 	bl	8000de8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e118      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x4b0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x31e>
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	e01c      	b.n	800255c <HAL_RCC_OscConfig+0x358>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x340>
 800252a:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a60      	ldr	r2, [pc, #384]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a5d      	ldr	r2, [pc, #372]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0x358>
 8002544:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d015      	beq.n	8002590 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fc40 	bl	8000de8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe fc3c 	bl	8000de8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e0d7      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ee      	beq.n	800256c <HAL_RCC_OscConfig+0x368>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fc2a 	bl	8000de8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe fc26 	bl	8000de8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0c1      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ae:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ee      	bne.n	8002598 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4a3a      	ldr	r2, [pc, #232]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80ad 	beq.w	8002730 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d6:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d060      	beq.n	80026a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d145      	bne.n	8002676 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_OscConfig+0x4b4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fbfa 	bl	8000de8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fbf6 	bl	8000de8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e093      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	3b01      	subs	r3, #1
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	071b      	lsls	r3, r3, #28
 8002642:	491b      	ldr	r1, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x4b4>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fbcb 	bl	8000de8 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fbc7 	bl	8000de8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e064      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x452>
 8002674:	e05c      	b.n	8002730 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_OscConfig+0x4b4>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fbb4 	bl	8000de8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fbb0 	bl	8000de8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e04d      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_OscConfig+0x4ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x480>
 80026a2:	e045      	b.n	8002730 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e040      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40007000 	.word	0x40007000
 80026b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_RCC_OscConfig+0x538>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d030      	beq.n	800272c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d129      	bne.n	800272c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d122      	bne.n	800272c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ec:	4013      	ands	r3, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d119      	bne.n	800272c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	3b01      	subs	r3, #1
 8002706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d10f      	bne.n	800272c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d107      	bne.n	800272c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e041      	b.n	80027d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe f990 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fc7a 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d001      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04e      	b.n	8002896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x80>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d01d      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x80>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x80>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x80>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x80>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x80>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x80>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_TIM_Base_Start_IT+0xdc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d111      	bne.n	8002884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b06      	cmp	r3, #6
 8002870:	d010      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002882:	e007      	b.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40000c00 	.word	0x40000c00
 80028b4:	40010400 	.word	0x40010400
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40001800 	.word	0x40001800

080028c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e041      	b.n	8002956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f839 	bl	800295e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 fbba 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_TIM_PWM_Start+0x24>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e022      	b.n	80029de <HAL_TIM_PWM_Start+0x6a>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d109      	bne.n	80029b2 <HAL_TIM_PWM_Start+0x3e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	e015      	b.n	80029de <HAL_TIM_PWM_Start+0x6a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d109      	bne.n	80029cc <HAL_TIM_PWM_Start+0x58>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e008      	b.n	80029de <HAL_TIM_PWM_Start+0x6a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07c      	b.n	8002ae0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start+0x82>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f4:	e013      	b.n	8002a1e <HAL_TIM_PWM_Start+0xaa>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0x92>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a04:	e00b      	b.n	8002a1e <HAL_TIM_PWM_Start+0xaa>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0xa2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a14:	e003      	b.n	8002a1e <HAL_TIM_PWM_Start+0xaa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2201      	movs	r2, #1
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fe10 	bl	800364c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <HAL_TIM_PWM_Start+0x174>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_TIM_PWM_Start+0xcc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <HAL_TIM_PWM_Start+0x178>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_TIM_PWM_Start+0xd0>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_TIM_PWM_Start+0xd2>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_TIM_PWM_Start+0x174>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	d01d      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_TIM_PWM_Start+0x17c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d018      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_TIM_PWM_Start+0x180>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <HAL_TIM_PWM_Start+0x184>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a16      	ldr	r2, [pc, #88]	; (8002aec <HAL_TIM_PWM_Start+0x178>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_TIM_PWM_Start+0x188>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_TIM_PWM_Start+0x18c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d111      	bne.n	8002ace <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d010      	beq.n	8002ade <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002acc:	e007      	b.n	8002ade <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40010400 	.word	0x40010400
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40001800 	.word	0x40001800

08002b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0202 	mvn.w	r2, #2
 8002b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa77 	bl	800303a <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa69 	bl	8003026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa7a 	bl	800304e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0204 	mvn.w	r2, #4
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa4d 	bl	800303a <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa3f 	bl	8003026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fa50 	bl	800304e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0208 	mvn.w	r2, #8
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa23 	bl	800303a <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa15 	bl	8003026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fa26 	bl	800304e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0210 	mvn.w	r2, #16
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2208      	movs	r2, #8
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f9f9 	bl	800303a <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f9eb 	bl	8003026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f9fc 	bl	800304e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0201 	mvn.w	r2, #1
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fd fe7a 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b80      	cmp	r3, #128	; 0x80
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fd78 	bl	80037a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d107      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9c1 	bl	8003062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d10e      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d107      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0220 	mvn.w	r2, #32
 8002d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fd42 	bl	8003790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0ae      	b.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	f200 809f 	bhi.w	8002e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002e81 	.word	0x08002e81
 8002d50:	08002e81 	.word	0x08002e81
 8002d54:	08002e81 	.word	0x08002e81
 8002d58:	08002dbd 	.word	0x08002dbd
 8002d5c:	08002e81 	.word	0x08002e81
 8002d60:	08002e81 	.word	0x08002e81
 8002d64:	08002e81 	.word	0x08002e81
 8002d68:	08002dff 	.word	0x08002dff
 8002d6c:	08002e81 	.word	0x08002e81
 8002d70:	08002e81 	.word	0x08002e81
 8002d74:	08002e81 	.word	0x08002e81
 8002d78:	08002e3f 	.word	0x08002e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fa18 	bl	80031b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0208 	orr.w	r2, r2, #8
 8002d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0204 	bic.w	r2, r2, #4
 8002da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6999      	ldr	r1, [r3, #24]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	619a      	str	r2, [r3, #24]
      break;
 8002dba:	e064      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fa68 	bl	8003298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	021a      	lsls	r2, r3, #8
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	619a      	str	r2, [r3, #24]
      break;
 8002dfc:	e043      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fabd 	bl	8003384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0208 	orr.w	r2, r2, #8
 8002e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0204 	bic.w	r2, r2, #4
 8002e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69d9      	ldr	r1, [r3, #28]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	61da      	str	r2, [r3, #28]
      break;
 8002e3c:	e023      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fb11 	bl	800346c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69d9      	ldr	r1, [r3, #28]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	021a      	lsls	r2, r3, #8
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	61da      	str	r2, [r3, #28]
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	75fb      	strb	r3, [r7, #23]
      break;
 8002e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0b4      	b.n	800301e <HAL_TIM_ConfigClockSource+0x186>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eec:	d03e      	beq.n	8002f6c <HAL_TIM_ConfigClockSource+0xd4>
 8002eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef2:	f200 8087 	bhi.w	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	f000 8086 	beq.w	800300a <HAL_TIM_ConfigClockSource+0x172>
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f02:	d87f      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b70      	cmp	r3, #112	; 0x70
 8002f06:	d01a      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0xa6>
 8002f08:	2b70      	cmp	r3, #112	; 0x70
 8002f0a:	d87b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d050      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8002f10:	2b60      	cmp	r3, #96	; 0x60
 8002f12:	d877      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b50      	cmp	r3, #80	; 0x50
 8002f16:	d03c      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xfa>
 8002f18:	2b50      	cmp	r3, #80	; 0x50
 8002f1a:	d873      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d058      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d86f      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d064      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f28:	2b30      	cmp	r3, #48	; 0x30
 8002f2a:	d86b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d060      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d867      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d05c      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d05a      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	e062      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f000 fb5d 	bl	800360c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	609a      	str	r2, [r3, #8]
      break;
 8002f6a:	e04f      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f000 fb46 	bl	800360c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8e:	609a      	str	r2, [r3, #8]
      break;
 8002f90:	e03c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 faba 	bl	8003518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2150      	movs	r1, #80	; 0x50
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb13 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e02c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 fad9 	bl	8003576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2160      	movs	r1, #96	; 0x60
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fb03 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e01c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f000 fa9a 	bl	8003518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2140      	movs	r1, #64	; 0x40
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 faf3 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8002ff0:	e00c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f000 faea 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8003002:	e003      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e000      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800300a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a40      	ldr	r2, [pc, #256]	; (800318c <TIM_Base_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d00f      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3d      	ldr	r2, [pc, #244]	; (8003190 <TIM_Base_SetConfig+0x118>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00b      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3c      	ldr	r2, [pc, #240]	; (8003194 <TIM_Base_SetConfig+0x11c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <TIM_Base_SetConfig+0x120>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3a      	ldr	r2, [pc, #232]	; (800319c <TIM_Base_SetConfig+0x124>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d108      	bne.n	80030ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2f      	ldr	r2, [pc, #188]	; (800318c <TIM_Base_SetConfig+0x114>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02b      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d027      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <TIM_Base_SetConfig+0x118>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d023      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <TIM_Base_SetConfig+0x11c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <TIM_Base_SetConfig+0x120>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01b      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <TIM_Base_SetConfig+0x124>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d017      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <TIM_Base_SetConfig+0x128>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <TIM_Base_SetConfig+0x12c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00f      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <TIM_Base_SetConfig+0x130>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00b      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <TIM_Base_SetConfig+0x134>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <TIM_Base_SetConfig+0x138>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a23      	ldr	r2, [pc, #140]	; (80031b4 <TIM_Base_SetConfig+0x13c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d108      	bne.n	800313c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <TIM_Base_SetConfig+0x114>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0xf8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <TIM_Base_SetConfig+0x124>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d103      	bne.n	8003178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	615a      	str	r2, [r3, #20]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	40001800 	.word	0x40001800
 80031b0:	40001c00 	.word	0x40001c00
 80031b4:	40002000 	.word	0x40002000

080031b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0201 	bic.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f023 0302 	bic.w	r3, r3, #2
 8003200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <TIM_OC1_SetConfig+0xd8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC1_SetConfig+0x64>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <TIM_OC1_SetConfig+0xdc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d10c      	bne.n	8003236 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0308 	bic.w	r3, r3, #8
 8003222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <TIM_OC1_SetConfig+0xd8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_OC1_SetConfig+0x8e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <TIM_OC1_SetConfig+0xdc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d111      	bne.n	800326a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	621a      	str	r2, [r3, #32]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40010000 	.word	0x40010000
 8003294:	40010400 	.word	0x40010400

08003298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0210 	bic.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0320 	bic.w	r3, r3, #32
 80032e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a22      	ldr	r2, [pc, #136]	; (800337c <TIM_OC2_SetConfig+0xe4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_OC2_SetConfig+0x68>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a21      	ldr	r2, [pc, #132]	; (8003380 <TIM_OC2_SetConfig+0xe8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10d      	bne.n	800331c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a17      	ldr	r2, [pc, #92]	; (800337c <TIM_OC2_SetConfig+0xe4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_OC2_SetConfig+0x94>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a16      	ldr	r2, [pc, #88]	; (8003380 <TIM_OC2_SetConfig+0xe8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d113      	bne.n	8003354 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40010000 	.word	0x40010000
 8003380:	40010400 	.word	0x40010400

08003384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a21      	ldr	r2, [pc, #132]	; (8003464 <TIM_OC3_SetConfig+0xe0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_OC3_SetConfig+0x66>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <TIM_OC3_SetConfig+0xe4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10d      	bne.n	8003406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <TIM_OC3_SetConfig+0xe0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d003      	beq.n	8003416 <TIM_OC3_SetConfig+0x92>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a15      	ldr	r2, [pc, #84]	; (8003468 <TIM_OC3_SetConfig+0xe4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d113      	bne.n	800343e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800341c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40010000 	.word	0x40010000
 8003468:	40010400 	.word	0x40010400

0800346c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	031b      	lsls	r3, r3, #12
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a12      	ldr	r2, [pc, #72]	; (8003510 <TIM_OC4_SetConfig+0xa4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_OC4_SetConfig+0x68>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a11      	ldr	r2, [pc, #68]	; (8003514 <TIM_OC4_SetConfig+0xa8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d109      	bne.n	80034e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000
 8003514:	40010400 	.word	0x40010400

08003518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0201 	bic.w	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 030a 	bic.w	r3, r3, #10
 8003554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f023 0210 	bic.w	r2, r3, #16
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	031b      	lsls	r3, r3, #12
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f043 0307 	orr.w	r3, r3, #7
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	431a      	orrs	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2201      	movs	r2, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1a      	ldr	r2, [r3, #32]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	43db      	mvns	r3, r3
 800366e:	401a      	ands	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	431a      	orrs	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e05a      	b.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d022      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d01d      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d018      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10c      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4313      	orrs	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40001800 	.word	0x40001800

08003790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e03f      	b.n	800384a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd f9ac 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f829 	bl	8003854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003858:	b0c0      	sub	sp, #256	; 0x100
 800385a:	af00      	add	r7, sp, #0
 800385c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	68d9      	ldr	r1, [r3, #12]
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	ea40 0301 	orr.w	r3, r0, r1
 800387c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	431a      	orrs	r2, r3
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	431a      	orrs	r2, r3
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038ac:	f021 010c 	bic.w	r1, r1, #12
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ba:	430b      	orrs	r3, r1
 80038bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	6999      	ldr	r1, [r3, #24]
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	ea40 0301 	orr.w	r3, r0, r1
 80038da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b8f      	ldr	r3, [pc, #572]	; (8003b20 <UART_SetConfig+0x2cc>)
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d005      	beq.n	80038f4 <UART_SetConfig+0xa0>
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b8d      	ldr	r3, [pc, #564]	; (8003b24 <UART_SetConfig+0x2d0>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d104      	bne.n	80038fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7fe fa10 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 80038f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038fc:	e003      	b.n	8003906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038fe:	f7fe f9f7 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8003902:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	f040 810c 	bne.w	8003b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003918:	2200      	movs	r2, #0
 800391a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800391e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	1891      	adds	r1, r2, r2
 800392c:	65b9      	str	r1, [r7, #88]	; 0x58
 800392e:	415b      	adcs	r3, r3
 8003930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003936:	4621      	mov	r1, r4
 8003938:	eb12 0801 	adds.w	r8, r2, r1
 800393c:	4629      	mov	r1, r5
 800393e:	eb43 0901 	adc.w	r9, r3, r1
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003956:	4690      	mov	r8, r2
 8003958:	4699      	mov	r9, r3
 800395a:	4623      	mov	r3, r4
 800395c:	eb18 0303 	adds.w	r3, r8, r3
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003964:	462b      	mov	r3, r5
 8003966:	eb49 0303 	adc.w	r3, r9, r3
 800396a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800397a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800397e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003982:	460b      	mov	r3, r1
 8003984:	18db      	adds	r3, r3, r3
 8003986:	653b      	str	r3, [r7, #80]	; 0x50
 8003988:	4613      	mov	r3, r2
 800398a:	eb42 0303 	adc.w	r3, r2, r3
 800398e:	657b      	str	r3, [r7, #84]	; 0x54
 8003990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003998:	f7fc fc3a 	bl	8000210 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4b61      	ldr	r3, [pc, #388]	; (8003b28 <UART_SetConfig+0x2d4>)
 80039a2:	fba3 2302 	umull	r2, r3, r3, r2
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	011c      	lsls	r4, r3, #4
 80039aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	1891      	adds	r1, r2, r2
 80039c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80039c4:	415b      	adcs	r3, r3
 80039c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039cc:	4641      	mov	r1, r8
 80039ce:	eb12 0a01 	adds.w	sl, r2, r1
 80039d2:	4649      	mov	r1, r9
 80039d4:	eb43 0b01 	adc.w	fp, r3, r1
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ec:	4692      	mov	sl, r2
 80039ee:	469b      	mov	fp, r3
 80039f0:	4643      	mov	r3, r8
 80039f2:	eb1a 0303 	adds.w	r3, sl, r3
 80039f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039fa:	464b      	mov	r3, r9
 80039fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	18db      	adds	r3, r3, r3
 8003a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a1e:	4613      	mov	r3, r2
 8003a20:	eb42 0303 	adc.w	r3, r2, r3
 8003a24:	647b      	str	r3, [r7, #68]	; 0x44
 8003a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a2e:	f7fc fbef 	bl	8000210 <__aeabi_uldivmod>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <UART_SetConfig+0x2d4>)
 8003a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2264      	movs	r2, #100	; 0x64
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	1acb      	subs	r3, r1, r3
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a4e:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <UART_SetConfig+0x2d4>)
 8003a50:	fba3 2302 	umull	r2, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a5c:	441c      	add	r4, r3
 8003a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a70:	4642      	mov	r2, r8
 8003a72:	464b      	mov	r3, r9
 8003a74:	1891      	adds	r1, r2, r2
 8003a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a78:	415b      	adcs	r3, r3
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a80:	4641      	mov	r1, r8
 8003a82:	1851      	adds	r1, r2, r1
 8003a84:	6339      	str	r1, [r7, #48]	; 0x30
 8003a86:	4649      	mov	r1, r9
 8003a88:	414b      	adcs	r3, r1
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a98:	4659      	mov	r1, fp
 8003a9a:	00cb      	lsls	r3, r1, #3
 8003a9c:	4651      	mov	r1, sl
 8003a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	00ca      	lsls	r2, r1, #3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4642      	mov	r2, r8
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	460a      	mov	r2, r1
 8003ab8:	eb42 0303 	adc.w	r3, r2, r3
 8003abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003acc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	18db      	adds	r3, r3, r3
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	4613      	mov	r3, r2
 8003adc:	eb42 0303 	adc.w	r3, r2, r3
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aea:	f7fc fb91 	bl	8000210 <__aeabi_uldivmod>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <UART_SetConfig+0x2d4>)
 8003af4:	fba3 1302 	umull	r1, r3, r3, r2
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	2164      	movs	r1, #100	; 0x64
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	3332      	adds	r3, #50	; 0x32
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <UART_SetConfig+0x2d4>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	f003 0207 	and.w	r2, r3, #7
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4422      	add	r2, r4
 8003b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b1c:	e105      	b.n	8003d2a <UART_SetConfig+0x4d6>
 8003b1e:	bf00      	nop
 8003b20:	40011000 	.word	0x40011000
 8003b24:	40011400 	.word	0x40011400
 8003b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b3e:	4642      	mov	r2, r8
 8003b40:	464b      	mov	r3, r9
 8003b42:	1891      	adds	r1, r2, r2
 8003b44:	6239      	str	r1, [r7, #32]
 8003b46:	415b      	adcs	r3, r3
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b4e:	4641      	mov	r1, r8
 8003b50:	1854      	adds	r4, r2, r1
 8003b52:	4649      	mov	r1, r9
 8003b54:	eb43 0501 	adc.w	r5, r3, r1
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	00eb      	lsls	r3, r5, #3
 8003b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b66:	00e2      	lsls	r2, r4, #3
 8003b68:	4614      	mov	r4, r2
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	18e3      	adds	r3, r4, r3
 8003b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b74:	464b      	mov	r3, r9
 8003b76:	eb45 0303 	adc.w	r3, r5, r3
 8003b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	008b      	lsls	r3, r1, #2
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	008a      	lsls	r2, r1, #2
 8003ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bac:	f7fc fb30 	bl	8000210 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4b60      	ldr	r3, [pc, #384]	; (8003d38 <UART_SetConfig+0x4e4>)
 8003bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	011c      	lsls	r4, r3, #4
 8003bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	61b9      	str	r1, [r7, #24]
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be0:	4641      	mov	r1, r8
 8003be2:	1851      	adds	r1, r2, r1
 8003be4:	6139      	str	r1, [r7, #16]
 8003be6:	4649      	mov	r1, r9
 8003be8:	414b      	adcs	r3, r1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	00cb      	lsls	r3, r1, #3
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c02:	4651      	mov	r1, sl
 8003c04:	00ca      	lsls	r2, r1, #3
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c14:	464b      	mov	r3, r9
 8003c16:	460a      	mov	r2, r1
 8003c18:	eb42 0303 	adc.w	r3, r2, r3
 8003c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c38:	4649      	mov	r1, r9
 8003c3a:	008b      	lsls	r3, r1, #2
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c42:	4641      	mov	r1, r8
 8003c44:	008a      	lsls	r2, r1, #2
 8003c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c4a:	f7fc fae1 	bl	8000210 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <UART_SetConfig+0x4e4>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	3332      	adds	r3, #50	; 0x32
 8003c66:	4a34      	ldr	r2, [pc, #208]	; (8003d38 <UART_SetConfig+0x4e4>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c72:	441c      	add	r4, r3
 8003c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c78:	2200      	movs	r2, #0
 8003c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c7c:	677a      	str	r2, [r7, #116]	; 0x74
 8003c7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c82:	4642      	mov	r2, r8
 8003c84:	464b      	mov	r3, r9
 8003c86:	1891      	adds	r1, r2, r2
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	415b      	adcs	r3, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c92:	4641      	mov	r1, r8
 8003c94:	1851      	adds	r1, r2, r1
 8003c96:	6039      	str	r1, [r7, #0]
 8003c98:	4649      	mov	r1, r9
 8003c9a:	414b      	adcs	r3, r1
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003caa:	4659      	mov	r1, fp
 8003cac:	00cb      	lsls	r3, r1, #3
 8003cae:	4651      	mov	r1, sl
 8003cb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	00ca      	lsls	r2, r1, #3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4642      	mov	r2, r8
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	460a      	mov	r2, r1
 8003cc8:	eb42 0303 	adc.w	r3, r2, r3
 8003ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd8:	667a      	str	r2, [r7, #100]	; 0x64
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	008b      	lsls	r3, r1, #2
 8003cea:	4641      	mov	r1, r8
 8003cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	008a      	lsls	r2, r1, #2
 8003cf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cf8:	f7fc fa8a 	bl	8000210 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <UART_SetConfig+0x4e4>)
 8003d02:	fba3 1302 	umull	r1, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2164      	movs	r1, #100	; 0x64
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	3332      	adds	r3, #50	; 0x32
 8003d14:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <UART_SetConfig+0x4e4>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	f003 020f 	and.w	r2, r3, #15
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4422      	add	r2, r4
 8003d28:	609a      	str	r2, [r3, #8]
}
 8003d2a:	bf00      	nop
 8003d2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d36:	bf00      	nop
 8003d38:	51eb851f 	.word	0x51eb851f

08003d3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d4e:	2b84      	cmp	r3, #132	; 0x84
 8003d50:	d005      	beq.n	8003d5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3303      	adds	r3, #3
 8003d5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d70:	f000 faf6 	bl	8004360 <vTaskStartScheduler>
  
  return osOK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7c:	b089      	sub	sp, #36	; 0x24
 8003d7e:	af04      	add	r7, sp, #16
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <osThreadCreate+0x54>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01c      	beq.n	8003dce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685c      	ldr	r4, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681d      	ldr	r5, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691e      	ldr	r6, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ffc8 	bl	8003d3c <makeFreeRtosPriority>
 8003dac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db6:	9202      	str	r2, [sp, #8]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	9100      	str	r1, [sp, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f000 f8ed 	bl	8003fa2 <xTaskCreateStatic>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e01c      	b.n	8003e08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685c      	ldr	r4, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dda:	b29e      	uxth	r6, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff ffaa 	bl	8003d3c <makeFreeRtosPriority>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f107 030c 	add.w	r3, r7, #12
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	9200      	str	r2, [sp, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4632      	mov	r2, r6
 8003df6:	4629      	mov	r1, r5
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f000 f92f 	bl	800405c <xTaskCreate>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d001      	beq.n	8003e08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e08:	68fb      	ldr	r3, [r7, #12]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <osDelay+0x16>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	e000      	b.n	8003e2a <osDelay+0x18>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fa64 	bl	80042f8 <vTaskDelay>
  
  return osOK;
 8003e30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f103 0208 	add.w	r2, r3, #8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f103 0208 	add.w	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 0208 	add.w	r2, r3, #8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef2:	d103      	bne.n	8003efc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e00c      	b.n	8003f16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3308      	adds	r3, #8
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e002      	b.n	8003f0a <vListInsert+0x2e>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d2f6      	bcs.n	8003f04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6892      	ldr	r2, [r2, #8]
 8003f64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6852      	ldr	r2, [r2, #4]
 8003f6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d103      	bne.n	8003f82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b08e      	sub	sp, #56	; 0x38
 8003fa6:	af04      	add	r7, sp, #16
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fc8:	bf00      	nop
 8003fca:	e7fe      	b.n	8003fca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	61fb      	str	r3, [r7, #28]
}
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fe8:	23b4      	movs	r3, #180	; 0xb4
 8003fea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2bb4      	cmp	r3, #180	; 0xb4
 8003ff0:	d00a      	beq.n	8004008 <xTaskCreateStatic+0x66>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	61bb      	str	r3, [r7, #24]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004008:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01e      	beq.n	800404e <xTaskCreateStatic+0xac>
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01b      	beq.n	800404e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800401e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	2202      	movs	r2, #2
 8004024:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004028:	2300      	movs	r3, #0
 800402a:	9303      	str	r3, [sp, #12]
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	9302      	str	r3, [sp, #8]
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f851 	bl	80040e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004048:	f000 f8ec 	bl	8004224 <prvAddNewTaskToReadyList>
 800404c:	e001      	b.n	8004052 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004052:	697b      	ldr	r3, [r7, #20]
	}
 8004054:	4618      	mov	r0, r3
 8004056:	3728      	adds	r7, #40	; 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	; 0x30
 8004060:	af04      	add	r7, sp, #16
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fef1 	bl	8004e58 <pvPortMalloc>
 8004076:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00e      	beq.n	800409c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800407e:	20b4      	movs	r0, #180	; 0xb4
 8004080:	f000 feea 	bl	8004e58 <pvPortMalloc>
 8004084:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
 8004092:	e005      	b.n	80040a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004094:	6978      	ldr	r0, [r7, #20]
 8004096:	f000 ffab 	bl	8004ff0 <vPortFree>
 800409a:	e001      	b.n	80040a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d017      	beq.n	80040d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	2300      	movs	r3, #0
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	9302      	str	r3, [sp, #8]
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f80f 	bl	80040e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040ca:	69f8      	ldr	r0, [r7, #28]
 80040cc:	f000 f8aa 	bl	8004224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040d0:	2301      	movs	r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e002      	b.n	80040dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040dc:	69bb      	ldr	r3, [r7, #24]
	}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004100:	3b01      	subs	r3, #1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <prvInitialiseNewTask+0x48>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	617b      	str	r3, [r7, #20]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01f      	beq.n	8004176 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e012      	b.n	8004162 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	7819      	ldrb	r1, [r3, #0]
 8004144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	3334      	adds	r3, #52	; 0x34
 800414c:	460a      	mov	r2, r1
 800414e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d006      	beq.n	800416a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	3301      	adds	r3, #1
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d9e9      	bls.n	800413c <prvInitialiseNewTask+0x54>
 8004168:	e000      	b.n	800416c <prvInitialiseNewTask+0x84>
			{
				break;
 800416a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004174:	e003      	b.n	800417e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	2b06      	cmp	r3, #6
 8004182:	d901      	bls.n	8004188 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004184:	2306      	movs	r3, #6
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800418c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	2200      	movs	r2, #0
 8004198:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	3304      	adds	r3, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fe6b 	bl	8003e7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	3318      	adds	r3, #24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fe66 	bl	8003e7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	f1c3 0207 	rsb	r2, r3, #7
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	334c      	adds	r3, #76	; 0x4c
 80041d8:	2260      	movs	r2, #96	; 0x60
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f84b 	bl	8005278 <memset>
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <prvInitialiseNewTask+0x130>)
 80041e6:	651a      	str	r2, [r3, #80]	; 0x50
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <prvInitialiseNewTask+0x134>)
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <prvInitialiseNewTask+0x138>)
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	68f9      	ldr	r1, [r7, #12]
 80041f8:	69b8      	ldr	r0, [r7, #24]
 80041fa:	f000 fc1f 	bl	8004a3c <pxPortInitialiseStack>
 80041fe:	4602      	mov	r2, r0
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004210:	bf00      	nop
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	08005488 	.word	0x08005488
 800421c:	080054a8 	.word	0x080054a8
 8004220:	08005468 	.word	0x08005468

08004224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800422c:	f000 fd32 	bl	8004c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <prvAddNewTaskToReadyList+0xb8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <prvAddNewTaskToReadyList+0xb8>)
 8004238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004242:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <prvAddNewTaskToReadyList+0xb8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d110      	bne.n	8004272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004250:	f000 facc 	bl	80047ec <prvInitialiseTaskLists>
 8004254:	e00d      	b.n	8004272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004256:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <prvAddNewTaskToReadyList+0xc0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	429a      	cmp	r2, r3
 800426a:	d802      	bhi.n	8004272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <prvAddNewTaskToReadyList+0xc4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <prvAddNewTaskToReadyList+0xc4>)
 800427a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <prvAddNewTaskToReadyList+0xc8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <prvAddNewTaskToReadyList+0xc8>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <prvAddNewTaskToReadyList+0xcc>)
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7ff fdf5 	bl	8003e94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042aa:	f000 fd23 	bl	8004cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <prvAddNewTaskToReadyList+0xc0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00e      	beq.n	80042d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d207      	bcs.n	80042d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <prvAddNewTaskToReadyList+0xd0>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000568 	.word	0x20000568
 80042e0:	20000468 	.word	0x20000468
 80042e4:	20000574 	.word	0x20000574
 80042e8:	20000584 	.word	0x20000584
 80042ec:	20000570 	.word	0x20000570
 80042f0:	2000046c 	.word	0x2000046c
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d017      	beq.n	800433a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <vTaskDelay+0x60>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <vTaskDelay+0x30>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60bb      	str	r3, [r7, #8]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004328:	f000 f884 	bl	8004434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800432c:	2100      	movs	r1, #0
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fb1e 	bl	8004970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004334:	f000 f88c 	bl	8004450 <xTaskResumeAll>
 8004338:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <vTaskDelay+0x64>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000590 	.word	0x20000590
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800436e:	463a      	mov	r2, r7
 8004370:	1d39      	adds	r1, r7, #4
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc f8cc 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	9202      	str	r2, [sp, #8]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	2300      	movs	r3, #0
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	460a      	mov	r2, r1
 800438e:	4921      	ldr	r1, [pc, #132]	; (8004414 <vTaskStartScheduler+0xb4>)
 8004390:	4821      	ldr	r0, [pc, #132]	; (8004418 <vTaskStartScheduler+0xb8>)
 8004392:	f7ff fe06 	bl	8003fa2 <xTaskCreateStatic>
 8004396:	4603      	mov	r3, r0
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <vTaskStartScheduler+0xbc>)
 800439a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <vTaskStartScheduler+0xbc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043a4:	2301      	movs	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e001      	b.n	80043ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d11b      	bne.n	80043ec <vTaskStartScheduler+0x8c>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
}
 80043c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <vTaskStartScheduler+0xc0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	334c      	adds	r3, #76	; 0x4c
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <vTaskStartScheduler+0xc4>)
 80043d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <vTaskStartScheduler+0xc8>)
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <vTaskStartScheduler+0xcc>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043e0:	4b13      	ldr	r3, [pc, #76]	; (8004430 <vTaskStartScheduler+0xd0>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043e6:	f000 fbb3 	bl	8004b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043ea:	e00e      	b.n	800440a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f2:	d10a      	bne.n	800440a <vTaskStartScheduler+0xaa>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <vTaskStartScheduler+0xa8>
}
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	08005448 	.word	0x08005448
 8004418:	080047bd 	.word	0x080047bd
 800441c:	2000058c 	.word	0x2000058c
 8004420:	20000468 	.word	0x20000468
 8004424:	20000010 	.word	0x20000010
 8004428:	20000588 	.word	0x20000588
 800442c:	20000574 	.word	0x20000574
 8004430:	2000056c 	.word	0x2000056c

08004434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <vTaskSuspendAll+0x18>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3301      	adds	r3, #1
 800443e:	4a03      	ldr	r2, [pc, #12]	; (800444c <vTaskSuspendAll+0x18>)
 8004440:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004442:	bf00      	nop
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000590 	.word	0x20000590

08004450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <xTaskResumeAll+0x114>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <xTaskResumeAll+0x2c>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	603b      	str	r3, [r7, #0]
}
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800447c:	f000 fc0a 	bl	8004c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004480:	4b38      	ldr	r3, [pc, #224]	; (8004564 <xTaskResumeAll+0x114>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3b01      	subs	r3, #1
 8004486:	4a37      	ldr	r2, [pc, #220]	; (8004564 <xTaskResumeAll+0x114>)
 8004488:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <xTaskResumeAll+0x114>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d161      	bne.n	8004556 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004492:	4b35      	ldr	r3, [pc, #212]	; (8004568 <xTaskResumeAll+0x118>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d05d      	beq.n	8004556 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800449a:	e02e      	b.n	80044fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449c:	4b33      	ldr	r3, [pc, #204]	; (800456c <xTaskResumeAll+0x11c>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3318      	adds	r3, #24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fd50 	bl	8003f4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fd4b 	bl	8003f4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <xTaskResumeAll+0x120>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <xTaskResumeAll+0x120>)
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4a27      	ldr	r2, [pc, #156]	; (8004574 <xTaskResumeAll+0x124>)
 80044d8:	441a      	add	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7ff fcd7 	bl	8003e94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ea:	4b23      	ldr	r3, [pc, #140]	; (8004578 <xTaskResumeAll+0x128>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044f4:	4b21      	ldr	r3, [pc, #132]	; (800457c <xTaskResumeAll+0x12c>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <xTaskResumeAll+0x11c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1cc      	bne.n	800449c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004508:	f000 fa12 	bl	8004930 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <xTaskResumeAll+0x130>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d010      	beq.n	800453a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004518:	f000 f836 	bl	8004588 <xTaskIncrementTick>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004522:	4b16      	ldr	r3, [pc, #88]	; (800457c <xTaskResumeAll+0x12c>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3b01      	subs	r3, #1
 800452c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f1      	bne.n	8004518 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004534:	4b12      	ldr	r3, [pc, #72]	; (8004580 <xTaskResumeAll+0x130>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <xTaskResumeAll+0x12c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004542:	2301      	movs	r3, #1
 8004544:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <xTaskResumeAll+0x134>)
 8004548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004556:	f000 fbcd 	bl	8004cf4 <vPortExitCritical>

	return xAlreadyYielded;
 800455a:	68bb      	ldr	r3, [r7, #8]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000590 	.word	0x20000590
 8004568:	20000568 	.word	0x20000568
 800456c:	20000528 	.word	0x20000528
 8004570:	20000570 	.word	0x20000570
 8004574:	2000046c 	.word	0x2000046c
 8004578:	20000468 	.word	0x20000468
 800457c:	2000057c 	.word	0x2000057c
 8004580:	20000578 	.word	0x20000578
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004592:	4b4e      	ldr	r3, [pc, #312]	; (80046cc <xTaskIncrementTick+0x144>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 808e 	bne.w	80046b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800459c:	4b4c      	ldr	r3, [pc, #304]	; (80046d0 <xTaskIncrementTick+0x148>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045a4:	4a4a      	ldr	r2, [pc, #296]	; (80046d0 <xTaskIncrementTick+0x148>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d120      	bne.n	80045f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045b0:	4b48      	ldr	r3, [pc, #288]	; (80046d4 <xTaskIncrementTick+0x14c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	603b      	str	r3, [r7, #0]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <xTaskIncrementTick+0x46>
 80045d0:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <xTaskIncrementTick+0x14c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <xTaskIncrementTick+0x150>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3e      	ldr	r2, [pc, #248]	; (80046d4 <xTaskIncrementTick+0x14c>)
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <xTaskIncrementTick+0x150>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <xTaskIncrementTick+0x154>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	4a3c      	ldr	r2, [pc, #240]	; (80046dc <xTaskIncrementTick+0x154>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	f000 f99f 	bl	8004930 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045f2:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <xTaskIncrementTick+0x158>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d348      	bcc.n	800468e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045fc:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <xTaskIncrementTick+0x14c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <xTaskIncrementTick+0x158>)
 8004608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800460c:	601a      	str	r2, [r3, #0]
					break;
 800460e:	e03e      	b.n	800468e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b30      	ldr	r3, [pc, #192]	; (80046d4 <xTaskIncrementTick+0x14c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d203      	bcs.n	8004630 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <xTaskIncrementTick+0x158>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800462e:	e02e      	b.n	800468e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3304      	adds	r3, #4
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff fc8a 	bl	8003f4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3318      	adds	r3, #24
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fc81 	bl	8003f4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	2201      	movs	r2, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <xTaskIncrementTick+0x15c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <xTaskIncrementTick+0x15c>)
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a1f      	ldr	r2, [pc, #124]	; (80046e8 <xTaskIncrementTick+0x160>)
 800466c:	441a      	add	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f7ff fc0d 	bl	8003e94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <xTaskIncrementTick+0x164>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d3b9      	bcc.n	80045fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468c:	e7b6      	b.n	80045fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <xTaskIncrementTick+0x164>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	4914      	ldr	r1, [pc, #80]	; (80046e8 <xTaskIncrementTick+0x160>)
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d901      	bls.n	80046aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <xTaskIncrementTick+0x168>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80046b2:	2301      	movs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e004      	b.n	80046c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046b8:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <xTaskIncrementTick+0x16c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	4a0d      	ldr	r2, [pc, #52]	; (80046f4 <xTaskIncrementTick+0x16c>)
 80046c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046c2:	697b      	ldr	r3, [r7, #20]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000590 	.word	0x20000590
 80046d0:	2000056c 	.word	0x2000056c
 80046d4:	20000520 	.word	0x20000520
 80046d8:	20000524 	.word	0x20000524
 80046dc:	20000580 	.word	0x20000580
 80046e0:	20000588 	.word	0x20000588
 80046e4:	20000570 	.word	0x20000570
 80046e8:	2000046c 	.word	0x2000046c
 80046ec:	20000468 	.word	0x20000468
 80046f0:	2000057c 	.word	0x2000057c
 80046f4:	20000578 	.word	0x20000578

080046f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <vTaskSwitchContext+0xac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <vTaskSwitchContext+0xb0>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800470c:	e044      	b.n	8004798 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800470e:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <vTaskSwitchContext+0xb0>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <vTaskSwitchContext+0xb4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004722:	7afb      	ldrb	r3, [r7, #11]
 8004724:	f1c3 031f 	rsb	r3, r3, #31
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	4921      	ldr	r1, [pc, #132]	; (80047b0 <vTaskSwitchContext+0xb8>)
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <vTaskSwitchContext+0x5c>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <vTaskSwitchContext+0x5a>
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <vTaskSwitchContext+0xb8>)
 8004760:	4413      	add	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3308      	adds	r3, #8
 8004776:	429a      	cmp	r2, r3
 8004778:	d104      	bne.n	8004784 <vTaskSwitchContext+0x8c>
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <vTaskSwitchContext+0xbc>)
 800478c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <vTaskSwitchContext+0xbc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	334c      	adds	r3, #76	; 0x4c
 8004794:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <vTaskSwitchContext+0xc0>)
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20000590 	.word	0x20000590
 80047a8:	2000057c 	.word	0x2000057c
 80047ac:	20000570 	.word	0x20000570
 80047b0:	2000046c 	.word	0x2000046c
 80047b4:	20000468 	.word	0x20000468
 80047b8:	20000010 	.word	0x20000010

080047bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047c4:	f000 f852 	bl	800486c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <prvIdleTask+0x28>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d9f9      	bls.n	80047c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <prvIdleTask+0x2c>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047e0:	e7f0      	b.n	80047c4 <prvIdleTask+0x8>
 80047e2:	bf00      	nop
 80047e4:	2000046c 	.word	0x2000046c
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	e00c      	b.n	8004812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <prvInitialiseTaskLists+0x60>)
 8004804:	4413      	add	r3, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fb17 	bl	8003e3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3301      	adds	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b06      	cmp	r3, #6
 8004816:	d9ef      	bls.n	80047f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004818:	480d      	ldr	r0, [pc, #52]	; (8004850 <prvInitialiseTaskLists+0x64>)
 800481a:	f7ff fb0e 	bl	8003e3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800481e:	480d      	ldr	r0, [pc, #52]	; (8004854 <prvInitialiseTaskLists+0x68>)
 8004820:	f7ff fb0b 	bl	8003e3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004824:	480c      	ldr	r0, [pc, #48]	; (8004858 <prvInitialiseTaskLists+0x6c>)
 8004826:	f7ff fb08 	bl	8003e3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800482a:	480c      	ldr	r0, [pc, #48]	; (800485c <prvInitialiseTaskLists+0x70>)
 800482c:	f7ff fb05 	bl	8003e3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <prvInitialiseTaskLists+0x74>)
 8004832:	f7ff fb02 	bl	8003e3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <prvInitialiseTaskLists+0x78>)
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <prvInitialiseTaskLists+0x64>)
 800483a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <prvInitialiseTaskLists+0x7c>)
 800483e:	4a05      	ldr	r2, [pc, #20]	; (8004854 <prvInitialiseTaskLists+0x68>)
 8004840:	601a      	str	r2, [r3, #0]
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000046c 	.word	0x2000046c
 8004850:	200004f8 	.word	0x200004f8
 8004854:	2000050c 	.word	0x2000050c
 8004858:	20000528 	.word	0x20000528
 800485c:	2000053c 	.word	0x2000053c
 8004860:	20000554 	.word	0x20000554
 8004864:	20000520 	.word	0x20000520
 8004868:	20000524 	.word	0x20000524

0800486c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004872:	e019      	b.n	80048a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004874:	f000 fa0e 	bl	8004c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004878:	4b10      	ldr	r3, [pc, #64]	; (80048bc <prvCheckTasksWaitingTermination+0x50>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fb62 	bl	8003f4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <prvCheckTasksWaitingTermination+0x54>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <prvCheckTasksWaitingTermination+0x54>)
 8004892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <prvCheckTasksWaitingTermination+0x58>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <prvCheckTasksWaitingTermination+0x58>)
 800489c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800489e:	f000 fa29 	bl	8004cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f810 	bl	80048c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <prvCheckTasksWaitingTermination+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e1      	bne.n	8004874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	2000053c 	.word	0x2000053c
 80048c0:	20000568 	.word	0x20000568
 80048c4:	20000550 	.word	0x20000550

080048c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	334c      	adds	r3, #76	; 0x4c
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fce5 	bl	80052a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fb81 	bl	8004ff0 <vPortFree>
				vPortFree( pxTCB );
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fb7e 	bl	8004ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048f4:	e018      	b.n	8004928 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d103      	bne.n	8004908 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fb75 	bl	8004ff0 <vPortFree>
	}
 8004906:	e00f      	b.n	8004928 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800490e:	2b02      	cmp	r3, #2
 8004910:	d00a      	beq.n	8004928 <prvDeleteTCB+0x60>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60fb      	str	r3, [r7, #12]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <prvDeleteTCB+0x5e>
	}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <prvResetNextTaskUnblockTime+0x38>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <prvResetNextTaskUnblockTime+0x3c>)
 8004942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004946:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004948:	e008      	b.n	800495c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <prvResetNextTaskUnblockTime+0x38>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a04      	ldr	r2, [pc, #16]	; (800496c <prvResetNextTaskUnblockTime+0x3c>)
 800495a:	6013      	str	r3, [r2, #0]
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000520 	.word	0x20000520
 800496c:	20000588 	.word	0x20000588

08004970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800497a:	4b29      	ldr	r3, [pc, #164]	; (8004a20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004980:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3304      	adds	r3, #4
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fae1 	bl	8003f4e <uxListRemove>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	2201      	movs	r2, #1
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43da      	mvns	r2, r3
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4013      	ands	r3, r2
 80049a6:	4a20      	ldr	r2, [pc, #128]	; (8004a28 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b0:	d10a      	bne.n	80049c8 <prvAddCurrentTaskToDelayedList+0x58>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	481a      	ldr	r0, [pc, #104]	; (8004a2c <prvAddCurrentTaskToDelayedList+0xbc>)
 80049c2:	f7ff fa67 	bl	8003e94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049c6:	e026      	b.n	8004a16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d209      	bcs.n	80049f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e0:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f7ff fa75 	bl	8003edc <vListInsert>
}
 80049f2:	e010      	b.n	8004a16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f7ff fa6b 	bl	8003edc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d202      	bcs.n	8004a16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a10:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6013      	str	r3, [r2, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	2000056c 	.word	0x2000056c
 8004a24:	20000468 	.word	0x20000468
 8004a28:	20000570 	.word	0x20000570
 8004a2c:	20000554 	.word	0x20000554
 8004a30:	20000524 	.word	0x20000524
 8004a34:	20000520 	.word	0x20000520
 8004a38:	20000588 	.word	0x20000588

08004a3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b04      	subs	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f023 0201 	bic.w	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b04      	subs	r3, #4
 8004a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a6c:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <pxPortInitialiseStack+0x64>)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3b14      	subs	r3, #20
 8004a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3b04      	subs	r3, #4
 8004a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f06f 0202 	mvn.w	r2, #2
 8004a8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3b20      	subs	r3, #32
 8004a90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a92:	68fb      	ldr	r3, [r7, #12]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	08004aa5 	.word	0x08004aa5

08004aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <prvTaskExitError+0x54>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab6:	d00a      	beq.n	8004ace <prvTaskExitError+0x2a>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <prvTaskExitError+0x28>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60bb      	str	r3, [r7, #8]
}
 8004ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ae2:	bf00      	nop
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0fc      	beq.n	8004ae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	00000000 	.word	0x00000000

08004b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <pxCurrentTCBConst2>)
 8004b02:	6819      	ldr	r1, [r3, #0]
 8004b04:	6808      	ldr	r0, [r1, #0]
 8004b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	f380 8809 	msr	PSP, r0
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f380 8811 	msr	BASEPRI, r0
 8004b1a:	4770      	bx	lr
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst2>:
 8004b20:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b28:	4808      	ldr	r0, [pc, #32]	; (8004b4c <prvPortStartFirstTask+0x24>)
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	6800      	ldr	r0, [r0, #0]
 8004b2e:	f380 8808 	msr	MSP, r0
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8814 	msr	CONTROL, r0
 8004b3a:	b662      	cpsie	i
 8004b3c:	b661      	cpsie	f
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	df00      	svc	0
 8004b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b4a:	bf00      	nop
 8004b4c:	e000ed08 	.word	0xe000ed08

08004b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b56:	4b46      	ldr	r3, [pc, #280]	; (8004c70 <xPortStartScheduler+0x120>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a46      	ldr	r2, [pc, #280]	; (8004c74 <xPortStartScheduler+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10a      	bne.n	8004b76 <xPortStartScheduler+0x26>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b76:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <xPortStartScheduler+0x120>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3f      	ldr	r2, [pc, #252]	; (8004c78 <xPortStartScheduler+0x128>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10a      	bne.n	8004b96 <xPortStartScheduler+0x46>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <xPortStartScheduler+0x12c>)
 8004b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	22ff      	movs	r2, #255	; 0xff
 8004ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <xPortStartScheduler+0x130>)
 8004bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <xPortStartScheduler+0x134>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bc4:	e009      	b.n	8004bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <xPortStartScheduler+0x134>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <xPortStartScheduler+0x134>)
 8004bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d0ef      	beq.n	8004bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004be6:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <xPortStartScheduler+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1c3 0307 	rsb	r3, r3, #7
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d00a      	beq.n	8004c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	60bb      	str	r3, [r7, #8]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c12:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c1a:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c26:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c3e:	f000 f8dd 	bl	8004dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <xPortStartScheduler+0x13c>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c48:	f000 f8fc 	bl	8004e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <xPortStartScheduler+0x140>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <xPortStartScheduler+0x140>)
 8004c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c58:	f7ff ff66 	bl	8004b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c5c:	f7ff fd4c 	bl	80046f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c60:	f7ff ff20 	bl	8004aa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	e000ed00 	.word	0xe000ed00
 8004c74:	410fc271 	.word	0x410fc271
 8004c78:	410fc270 	.word	0x410fc270
 8004c7c:	e000e400 	.word	0xe000e400
 8004c80:	20000594 	.word	0x20000594
 8004c84:	20000598 	.word	0x20000598
 8004c88:	e000ed20 	.word	0xe000ed20
 8004c8c:	2000000c 	.word	0x2000000c
 8004c90:	e000ef34 	.word	0xe000ef34

08004c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	607b      	str	r3, [r7, #4]
}
 8004cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <vPortEnterCritical+0x58>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a0d      	ldr	r2, [pc, #52]	; (8004cec <vPortEnterCritical+0x58>)
 8004cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <vPortEnterCritical+0x58>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10f      	bne.n	8004ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <vPortEnterCritical+0x5c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	603b      	str	r3, [r7, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <vPortEnterCritical+0x4a>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	2000000c 	.word	0x2000000c
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <vPortExitCritical+0x50>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <vPortExitCritical+0x24>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	607b      	str	r3, [r7, #4]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <vPortExitCritical+0x50>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <vPortExitCritical+0x50>)
 8004d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <vPortExitCritical+0x50>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <vPortExitCritical+0x42>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	2000000c 	.word	0x2000000c
	...

08004d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d50:	f3ef 8009 	mrs	r0, PSP
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <pxCurrentTCBConst>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	f01e 0f10 	tst.w	lr, #16
 8004d60:	bf08      	it	eq
 8004d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	6010      	str	r0, [r2, #0]
 8004d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d74:	f380 8811 	msr	BASEPRI, r0
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f7ff fcba 	bl	80046f8 <vTaskSwitchContext>
 8004d84:	f04f 0000 	mov.w	r0, #0
 8004d88:	f380 8811 	msr	BASEPRI, r0
 8004d8c:	bc09      	pop	{r0, r3}
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	6808      	ldr	r0, [r1, #0]
 8004d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d96:	f01e 0f10 	tst.w	lr, #16
 8004d9a:	bf08      	it	eq
 8004d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004da0:	f380 8809 	msr	PSP, r0
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	f3af 8000 	nop.w

08004db0 <pxCurrentTCBConst>:
 8004db0:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
}
 8004dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dd2:	f7ff fbd9 	bl	8004588 <xTaskIncrementTick>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <SysTick_Handler+0x40>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f383 8811 	msr	BASEPRI, r3
}
 8004dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <vPortSetupTimerInterrupt+0x34>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <vPortSetupTimerInterrupt+0x38>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <vPortSetupTimerInterrupt+0x3c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <vPortSetupTimerInterrupt+0x40>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <vPortSetupTimerInterrupt+0x44>)
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e1e:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <vPortSetupTimerInterrupt+0x34>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	e000e010 	.word	0xe000e010
 8004e34:	e000e018 	.word	0xe000e018
 8004e38:	20000000 	.word	0x20000000
 8004e3c:	10624dd3 	.word	0x10624dd3
 8004e40:	e000e014 	.word	0xe000e014

08004e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e54 <vPortEnableVFP+0x10>
 8004e48:	6801      	ldr	r1, [r0, #0]
 8004e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e4e:	6001      	str	r1, [r0, #0]
 8004e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e52:	bf00      	nop
 8004e54:	e000ed88 	.word	0xe000ed88

08004e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e64:	f7ff fae6 	bl	8004434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e68:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <pvPortMalloc+0x180>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e70:	f000 f920 	bl	80050b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e74:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <pvPortMalloc+0x184>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 8093 	bne.w	8004fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01d      	beq.n	8004ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e88:	2208      	movs	r2, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d06e      	beq.n	8004fa8 <pvPortMalloc+0x150>
 8004eca:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <pvPortMalloc+0x188>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d869      	bhi.n	8004fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ede:	e004      	b.n	8004eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d903      	bls.n	8004efc <pvPortMalloc+0xa4>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f1      	bne.n	8004ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <pvPortMalloc+0x180>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d050      	beq.n	8004fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4413      	add	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	2308      	movs	r3, #8
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d91f      	bls.n	8004f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <pvPortMalloc+0xf8>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	613b      	str	r3, [r7, #16]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f62:	69b8      	ldr	r0, [r7, #24]
 8004f64:	f000 f908 	bl	8005178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d203      	bcs.n	8004f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <pvPortMalloc+0x184>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <pvPortMalloc+0x194>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <pvPortMalloc+0x194>)
 8004fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fa8:	f7ff fa52 	bl	8004450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <pvPortMalloc+0x174>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0x172>
	return pvReturn;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200041a4 	.word	0x200041a4
 8004fdc:	200041b8 	.word	0x200041b8
 8004fe0:	200041a8 	.word	0x200041a8
 8004fe4:	2000419c 	.word	0x2000419c
 8004fe8:	200041ac 	.word	0x200041ac
 8004fec:	200041b0 	.word	0x200041b0

08004ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04d      	beq.n	800509e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005002:	2308      	movs	r3, #8
 8005004:	425b      	negs	r3, r3
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <vPortFree+0xb8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <vPortFree+0x44>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <vPortFree+0x62>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60bb      	str	r3, [r7, #8]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <vPortFree+0xb8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d11a      	bne.n	800509e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <vPortFree+0xb8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005078:	f7ff f9dc 	bl	8004434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <vPortFree+0xbc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4413      	add	r3, r2
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <vPortFree+0xbc>)
 8005088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f000 f874 	bl	8005178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <vPortFree+0xc0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	4a06      	ldr	r2, [pc, #24]	; (80050b0 <vPortFree+0xc0>)
 8005098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800509a:	f7ff f9d9 	bl	8004450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	200041b8 	.word	0x200041b8
 80050ac:	200041a8 	.word	0x200041a8
 80050b0:	200041b4 	.word	0x200041b4

080050b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050c0:	4b27      	ldr	r3, [pc, #156]	; (8005160 <prvHeapInit+0xac>)
 80050c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <prvHeapInit+0xac>)
 80050e4:	4413      	add	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <prvHeapInit+0xb0>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <prvHeapInit+0xb0>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005100:	2208      	movs	r2, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <prvHeapInit+0xb4>)
 8005114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <prvHeapInit+0xb4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <prvHeapInit+0xb4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <prvHeapInit+0xb4>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <prvHeapInit+0xb8>)
 8005142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <prvHeapInit+0xbc>)
 800514a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <prvHeapInit+0xc0>)
 800514e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	2000059c 	.word	0x2000059c
 8005164:	2000419c 	.word	0x2000419c
 8005168:	200041a4 	.word	0x200041a4
 800516c:	200041ac 	.word	0x200041ac
 8005170:	200041a8 	.word	0x200041a8
 8005174:	200041b8 	.word	0x200041b8

08005178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005180:	4b28      	ldr	r3, [pc, #160]	; (8005224 <prvInsertBlockIntoFreeList+0xac>)
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e002      	b.n	800518c <prvInsertBlockIntoFreeList+0x14>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d8f7      	bhi.n	8005186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d108      	bne.n	80051ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d118      	bne.n	8005200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d00d      	beq.n	80051f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e008      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e003      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d002      	beq.n	8005216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	2000419c 	.word	0x2000419c
 8005228:	200041a4 	.word	0x200041a4

0800522c <__libc_init_array>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	4d0d      	ldr	r5, [pc, #52]	; (8005264 <__libc_init_array+0x38>)
 8005230:	4c0d      	ldr	r4, [pc, #52]	; (8005268 <__libc_init_array+0x3c>)
 8005232:	1b64      	subs	r4, r4, r5
 8005234:	10a4      	asrs	r4, r4, #2
 8005236:	2600      	movs	r6, #0
 8005238:	42a6      	cmp	r6, r4
 800523a:	d109      	bne.n	8005250 <__libc_init_array+0x24>
 800523c:	4d0b      	ldr	r5, [pc, #44]	; (800526c <__libc_init_array+0x40>)
 800523e:	4c0c      	ldr	r4, [pc, #48]	; (8005270 <__libc_init_array+0x44>)
 8005240:	f000 f8e4 	bl	800540c <_init>
 8005244:	1b64      	subs	r4, r4, r5
 8005246:	10a4      	asrs	r4, r4, #2
 8005248:	2600      	movs	r6, #0
 800524a:	42a6      	cmp	r6, r4
 800524c:	d105      	bne.n	800525a <__libc_init_array+0x2e>
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	f855 3b04 	ldr.w	r3, [r5], #4
 8005254:	4798      	blx	r3
 8005256:	3601      	adds	r6, #1
 8005258:	e7ee      	b.n	8005238 <__libc_init_array+0xc>
 800525a:	f855 3b04 	ldr.w	r3, [r5], #4
 800525e:	4798      	blx	r3
 8005260:	3601      	adds	r6, #1
 8005262:	e7f2      	b.n	800524a <__libc_init_array+0x1e>
 8005264:	080054d0 	.word	0x080054d0
 8005268:	080054d0 	.word	0x080054d0
 800526c:	080054d0 	.word	0x080054d0
 8005270:	080054d4 	.word	0x080054d4

08005274 <__retarget_lock_acquire_recursive>:
 8005274:	4770      	bx	lr

08005276 <__retarget_lock_release_recursive>:
 8005276:	4770      	bx	lr

08005278 <memset>:
 8005278:	4402      	add	r2, r0
 800527a:	4603      	mov	r3, r0
 800527c:	4293      	cmp	r3, r2
 800527e:	d100      	bne.n	8005282 <memset+0xa>
 8005280:	4770      	bx	lr
 8005282:	f803 1b01 	strb.w	r1, [r3], #1
 8005286:	e7f9      	b.n	800527c <memset+0x4>

08005288 <cleanup_glue>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	460c      	mov	r4, r1
 800528c:	6809      	ldr	r1, [r1, #0]
 800528e:	4605      	mov	r5, r0
 8005290:	b109      	cbz	r1, 8005296 <cleanup_glue+0xe>
 8005292:	f7ff fff9 	bl	8005288 <cleanup_glue>
 8005296:	4621      	mov	r1, r4
 8005298:	4628      	mov	r0, r5
 800529a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800529e:	f000 b869 	b.w	8005374 <_free_r>
	...

080052a4 <_reclaim_reent>:
 80052a4:	4b2c      	ldr	r3, [pc, #176]	; (8005358 <_reclaim_reent+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4283      	cmp	r3, r0
 80052aa:	b570      	push	{r4, r5, r6, lr}
 80052ac:	4604      	mov	r4, r0
 80052ae:	d051      	beq.n	8005354 <_reclaim_reent+0xb0>
 80052b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052b2:	b143      	cbz	r3, 80052c6 <_reclaim_reent+0x22>
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d14a      	bne.n	8005350 <_reclaim_reent+0xac>
 80052ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	b111      	cbz	r1, 80052c6 <_reclaim_reent+0x22>
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 f857 	bl	8005374 <_free_r>
 80052c6:	6961      	ldr	r1, [r4, #20]
 80052c8:	b111      	cbz	r1, 80052d0 <_reclaim_reent+0x2c>
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f852 	bl	8005374 <_free_r>
 80052d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052d2:	b111      	cbz	r1, 80052da <_reclaim_reent+0x36>
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 f84d 	bl	8005374 <_free_r>
 80052da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052dc:	b111      	cbz	r1, 80052e4 <_reclaim_reent+0x40>
 80052de:	4620      	mov	r0, r4
 80052e0:	f000 f848 	bl	8005374 <_free_r>
 80052e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80052e6:	b111      	cbz	r1, 80052ee <_reclaim_reent+0x4a>
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 f843 	bl	8005374 <_free_r>
 80052ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80052f0:	b111      	cbz	r1, 80052f8 <_reclaim_reent+0x54>
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 f83e 	bl	8005374 <_free_r>
 80052f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80052fa:	b111      	cbz	r1, 8005302 <_reclaim_reent+0x5e>
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 f839 	bl	8005374 <_free_r>
 8005302:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005304:	b111      	cbz	r1, 800530c <_reclaim_reent+0x68>
 8005306:	4620      	mov	r0, r4
 8005308:	f000 f834 	bl	8005374 <_free_r>
 800530c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800530e:	b111      	cbz	r1, 8005316 <_reclaim_reent+0x72>
 8005310:	4620      	mov	r0, r4
 8005312:	f000 f82f 	bl	8005374 <_free_r>
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	b1e3      	cbz	r3, 8005354 <_reclaim_reent+0xb0>
 800531a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800531c:	4620      	mov	r0, r4
 800531e:	4798      	blx	r3
 8005320:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005322:	b1b9      	cbz	r1, 8005354 <_reclaim_reent+0xb0>
 8005324:	4620      	mov	r0, r4
 8005326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800532a:	f7ff bfad 	b.w	8005288 <cleanup_glue>
 800532e:	5949      	ldr	r1, [r1, r5]
 8005330:	b941      	cbnz	r1, 8005344 <_reclaim_reent+0xa0>
 8005332:	3504      	adds	r5, #4
 8005334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005336:	2d80      	cmp	r5, #128	; 0x80
 8005338:	68d9      	ldr	r1, [r3, #12]
 800533a:	d1f8      	bne.n	800532e <_reclaim_reent+0x8a>
 800533c:	4620      	mov	r0, r4
 800533e:	f000 f819 	bl	8005374 <_free_r>
 8005342:	e7ba      	b.n	80052ba <_reclaim_reent+0x16>
 8005344:	680e      	ldr	r6, [r1, #0]
 8005346:	4620      	mov	r0, r4
 8005348:	f000 f814 	bl	8005374 <_free_r>
 800534c:	4631      	mov	r1, r6
 800534e:	e7ef      	b.n	8005330 <_reclaim_reent+0x8c>
 8005350:	2500      	movs	r5, #0
 8005352:	e7ef      	b.n	8005334 <_reclaim_reent+0x90>
 8005354:	bd70      	pop	{r4, r5, r6, pc}
 8005356:	bf00      	nop
 8005358:	20000010 	.word	0x20000010

0800535c <__malloc_lock>:
 800535c:	4801      	ldr	r0, [pc, #4]	; (8005364 <__malloc_lock+0x8>)
 800535e:	f7ff bf89 	b.w	8005274 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	200041bc 	.word	0x200041bc

08005368 <__malloc_unlock>:
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__malloc_unlock+0x8>)
 800536a:	f7ff bf84 	b.w	8005276 <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	200041bc 	.word	0x200041bc

08005374 <_free_r>:
 8005374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005376:	2900      	cmp	r1, #0
 8005378:	d044      	beq.n	8005404 <_free_r+0x90>
 800537a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537e:	9001      	str	r0, [sp, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f1a1 0404 	sub.w	r4, r1, #4
 8005386:	bfb8      	it	lt
 8005388:	18e4      	addlt	r4, r4, r3
 800538a:	f7ff ffe7 	bl	800535c <__malloc_lock>
 800538e:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <_free_r+0x94>)
 8005390:	9801      	ldr	r0, [sp, #4]
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	b933      	cbnz	r3, 80053a4 <_free_r+0x30>
 8005396:	6063      	str	r3, [r4, #4]
 8005398:	6014      	str	r4, [r2, #0]
 800539a:	b003      	add	sp, #12
 800539c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053a0:	f7ff bfe2 	b.w	8005368 <__malloc_unlock>
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d908      	bls.n	80053ba <_free_r+0x46>
 80053a8:	6825      	ldr	r5, [r4, #0]
 80053aa:	1961      	adds	r1, r4, r5
 80053ac:	428b      	cmp	r3, r1
 80053ae:	bf01      	itttt	eq
 80053b0:	6819      	ldreq	r1, [r3, #0]
 80053b2:	685b      	ldreq	r3, [r3, #4]
 80053b4:	1949      	addeq	r1, r1, r5
 80053b6:	6021      	streq	r1, [r4, #0]
 80053b8:	e7ed      	b.n	8005396 <_free_r+0x22>
 80053ba:	461a      	mov	r2, r3
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	b10b      	cbz	r3, 80053c4 <_free_r+0x50>
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	d9fa      	bls.n	80053ba <_free_r+0x46>
 80053c4:	6811      	ldr	r1, [r2, #0]
 80053c6:	1855      	adds	r5, r2, r1
 80053c8:	42a5      	cmp	r5, r4
 80053ca:	d10b      	bne.n	80053e4 <_free_r+0x70>
 80053cc:	6824      	ldr	r4, [r4, #0]
 80053ce:	4421      	add	r1, r4
 80053d0:	1854      	adds	r4, r2, r1
 80053d2:	42a3      	cmp	r3, r4
 80053d4:	6011      	str	r1, [r2, #0]
 80053d6:	d1e0      	bne.n	800539a <_free_r+0x26>
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	6053      	str	r3, [r2, #4]
 80053de:	4421      	add	r1, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	e7da      	b.n	800539a <_free_r+0x26>
 80053e4:	d902      	bls.n	80053ec <_free_r+0x78>
 80053e6:	230c      	movs	r3, #12
 80053e8:	6003      	str	r3, [r0, #0]
 80053ea:	e7d6      	b.n	800539a <_free_r+0x26>
 80053ec:	6825      	ldr	r5, [r4, #0]
 80053ee:	1961      	adds	r1, r4, r5
 80053f0:	428b      	cmp	r3, r1
 80053f2:	bf04      	itt	eq
 80053f4:	6819      	ldreq	r1, [r3, #0]
 80053f6:	685b      	ldreq	r3, [r3, #4]
 80053f8:	6063      	str	r3, [r4, #4]
 80053fa:	bf04      	itt	eq
 80053fc:	1949      	addeq	r1, r1, r5
 80053fe:	6021      	streq	r1, [r4, #0]
 8005400:	6054      	str	r4, [r2, #4]
 8005402:	e7ca      	b.n	800539a <_free_r+0x26>
 8005404:	b003      	add	sp, #12
 8005406:	bd30      	pop	{r4, r5, pc}
 8005408:	200041c0 	.word	0x200041c0

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
