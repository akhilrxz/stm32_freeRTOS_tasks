
freeRTOS_pwm_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004884  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af8  08004af8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b00  08004b00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000410c  20000074  08004b7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004180  08004b7c  00024180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a8d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b50  00000000  00000000  00034b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00037688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00038758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002312f  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fd3  00000000  00000000  0005c84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d866e  00000000  00000000  0006f822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  00147ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a3c 	.word	0x08004a3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004a3c 	.word	0x08004a3c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000090 	.word	0x20000090
 8000544:	20000144 	.word	0x20000144

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fb4f 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f825 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f931 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f905 	bl	8000768 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800055e:	f000 f88d 	bl	800067c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <main+0x4c>)
 8000566:	f001 fd1b 	bl	8001fa0 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of pwm_led */
  osThreadDef(pwm_led, pwm_led_fun, osPriorityNormal, 0, 128);
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <main+0x50>)
 800056c:	1d3c      	adds	r4, r7, #4
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwm_ledHandle = osThreadCreate(osThread(pwm_led), NULL);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f002 ff10 	bl	80033a6 <osThreadCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <main+0x54>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f002 ff04 	bl	8003398 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x48>
 8000592:	bf00      	nop
 8000594:	20000344 	.word	0x20000344
 8000598:	08004a5c 	.word	0x08004a5c
 800059c:	200003d0 	.word	0x200003d0

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 f97a 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <SystemClock_Config+0xd4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a29      	ldr	r2, [pc, #164]	; (8000674 <SystemClock_Config+0xd4>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <SystemClock_Config+0xd4>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xd8>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xd8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000614:	2310      	movs	r3, #16
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f8fe 	bl	8001830 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800063a:	f000 f92f 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd6c 	bl	8001138 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000666:	f000 f919 	bl	800089c <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006b6:	220f      	movs	r2, #15
 80006b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006d6:	f001 fb49 	bl	8001d6c <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006e0:	f000 f8dc 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ee:	4619      	mov	r1, r3
 80006f0:	481c      	ldr	r0, [pc, #112]	; (8000764 <MX_TIM2_Init+0xe8>)
 80006f2:	f001 fee7 	bl	80024c4 <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006fc:	f000 f8ce 	bl	800089c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000700:	4818      	ldr	r0, [pc, #96]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000702:	f001 fbf3 	bl	8001eec <HAL_TIM_PWM_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800070c:	f000 f8c6 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4619      	mov	r1, r3
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000720:	f002 fad0 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800072a:	f000 f8b7 	bl	800089c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072e:	2360      	movs	r3, #96	; 0x60
 8000730:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500; // Initialize with a 50% duty cycle
 8000732:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000748:	f001 fdfa 	bl	8002340 <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000752:	f000 f8a3 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <MX_TIM2_Init+0xe8>)
 8000758:	f000 f8f2 	bl	8000940 <HAL_TIM_MspPostInit>

}
 800075c:	bf00      	nop
 800075e:	3738      	adds	r7, #56	; 0x38
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000344 	.word	0x20000344

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f002 fb20 	bl	8002de4 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f877 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000038c 	.word	0x2000038c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIO_Init 0 */

  /* USER CODE END GPIO_Init 0 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN GPIO_Init 1 */

  /* USER CODE END GPIO_Init 1 */

}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <pwm_led_fun>:
/* USER CODE BEGIN 3 */

/* USER CODE END 3 */

void pwm_led_fun(void const * argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  while (1)
  {
    /* Toggle PWM value between 0 and 1000 */
	  if (state == 0) {
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <pwm_led_fun+0x70>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <pwm_led_fun+0x1e>
	  	              pwm_value = 250; // 25% (1000 - 750)
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <pwm_led_fun+0x74>)
 800081e:	22fa      	movs	r2, #250	; 0xfa
 8000820:	601a      	str	r2, [r3, #0]
	  	              state = 1;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <pwm_led_fun+0x70>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	e01d      	b.n	8000866 <pwm_led_fun+0x5a>
	  	          } else if (state == 1) {
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <pwm_led_fun+0x70>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d107      	bne.n	8000842 <pwm_led_fun+0x36>
	  	              pwm_value = 500; // 50% (1000 - 500)
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <pwm_led_fun+0x74>)
 8000834:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000838:	601a      	str	r2, [r3, #0]
	  	              state = 2;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <pwm_led_fun+0x70>)
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e011      	b.n	8000866 <pwm_led_fun+0x5a>
	  	          } else if (state == 2) {
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <pwm_led_fun+0x70>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d107      	bne.n	800085a <pwm_led_fun+0x4e>
	  	              pwm_value = 750; // 75% (1000 - 250)
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <pwm_led_fun+0x74>)
 800084c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000850:	601a      	str	r2, [r3, #0]
	  	              state = 3;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <pwm_led_fun+0x70>)
 8000854:	2203      	movs	r2, #3
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	e005      	b.n	8000866 <pwm_led_fun+0x5a>
	  	          } else {
	  	              pwm_value = 0; // Reset to 100%
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <pwm_led_fun+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
	  	              state = 0;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <pwm_led_fun+0x70>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
	  	          }

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <pwm_led_fun+0x78>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <pwm_led_fun+0x74>)
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	635a      	str	r2, [r3, #52]	; 0x34

    osDelay(1000); // 1-second delay
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f002 fde3 	bl	800343e <osDelay>
	  if (state == 0) {
 8000878:	e7cc      	b.n	8000814 <pwm_led_fun+0x8>
 800087a:	bf00      	nop
 800087c:	200003d4 	.word	0x200003d4
 8000880:	20000000 	.word	0x20000000
 8000884:	20000344 	.word	0x20000344

08000888 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 5 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    /* Handle TIM3 events */
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <Error_Handler>:

void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */

  /* USER CODE END Error_Handler_Debug */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x54>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_MspInit+0x54>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_MspInit+0x54>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_MspInit+0x54>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	f06f 0001 	mvn.w	r0, #1
 80008ee:	f000 fa65 	bl	8000dbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000910:	d10d      	bne.n	800092e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_TIM_Base_MspInit+0x3c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_TIM_Base_MspInit+0x3c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000960:	d11d      	bne.n	800099e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_TIM_MspPostInit+0x68>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_TIM_MspPostInit+0x68>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_MspPostInit+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800097e:	2320      	movs	r3, #32
 8000980:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800098e:	2301      	movs	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <HAL_TIM_MspPostInit+0x6c>)
 800099a:	f000 fa39 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_UART_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_UART_MspInit+0x8c>)
 8000a26:	f000 f9f3 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <HAL_InitTick+0xe4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <HAL_InitTick+0xe4>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <HAL_InitTick+0xe4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6c:	f107 0210 	add.w	r2, r7, #16
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fc78 	bl	800136c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a86:	f000 fc49 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 8000a8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a8c:	e004      	b.n	8000a98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8e:	f000 fc45 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 8000a92:	4603      	mov	r3, r0
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <HAL_InitTick+0xe8>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	0c9b      	lsrs	r3, r3, #18
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <HAL_InitTick+0xec>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <HAL_InitTick+0xf0>)
 8000aaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_InitTick+0xec>)
 8000aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <HAL_InitTick+0xec>)
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_InitTick+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_InitTick+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_InitTick+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000acc:	4817      	ldr	r0, [pc, #92]	; (8000b2c <HAL_InitTick+0xec>)
 8000ace:	f001 f94d 	bl	8001d6c <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d11b      	bne.n	8000b18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000ae0:	4812      	ldr	r0, [pc, #72]	; (8000b2c <HAL_InitTick+0xec>)
 8000ae2:	f001 f993 	bl	8001e0c <HAL_TIM_Base_Start_IT>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d111      	bne.n	8000b18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000af4:	201d      	movs	r0, #29
 8000af6:	f000 f97d 	bl	8000df4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d808      	bhi.n	8000b12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	201d      	movs	r0, #29
 8000b06:	f000 f959 	bl	8000dbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0xf4>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e002      	b.n	8000b18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3738      	adds	r7, #56	; 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	431bde83 	.word	0x431bde83
 8000b2c:	200003d8 	.word	0x200003d8
 8000b30:	40000400 	.word	0x40000400
 8000b34:	20000008 	.word	0x20000008

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM3_IRQHandler+0x10>)
 8000b6a:	f001 fae1 	bl	8002130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200003d8 	.word	0x200003d8

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba2:	490e      	ldr	r1, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb8:	4c0b      	ldr	r4, [pc, #44]	; (8000be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc6:	f7ff ffd7 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f003 fe47 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fcbb 	bl	8000548 <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000be0:	08004b08 	.word	0x08004b08
  ldr r2, =_sbss
 8000be4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000be8:	20004180 	.word	0x20004180

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_Init+0x40>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_Init+0x40>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x40>)
 8000c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f8c4 	bl	8000da6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f7ff ff0e 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe40 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000420 	.word	0x20000420

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <__NVIC_EnableIRQ+0x38>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff4c 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dce:	f7ff ff61 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	6978      	ldr	r0, [r7, #20]
 8000dda:	f7ff ffb1 	bl	8000d40 <NVIC_EncodePriority>
 8000dde:	4602      	mov	r2, r0
 8000de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff80 	bl	8000cec <__NVIC_SetPriority>
}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff54 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e165      	b.n	80010f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8154 	bne.w	80010f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d005      	beq.n	8000e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d130      	bne.n	8000ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d017      	beq.n	8000f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80ae 	beq.w	80010f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <HAL_GPIO_Init+0x300>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a5c      	ldr	r2, [pc, #368]	; (8001110 <HAL_GPIO_Init+0x300>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b5a      	ldr	r3, [pc, #360]	; (8001110 <HAL_GPIO_Init+0x300>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb2:	4a58      	ldr	r2, [pc, #352]	; (8001114 <HAL_GPIO_Init+0x304>)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_GPIO_Init+0x308>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d025      	beq.n	800102a <HAL_GPIO_Init+0x21a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_GPIO_Init+0x30c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d01f      	beq.n	8001026 <HAL_GPIO_Init+0x216>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <HAL_GPIO_Init+0x310>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d019      	beq.n	8001022 <HAL_GPIO_Init+0x212>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_GPIO_Init+0x314>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0x20e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_GPIO_Init+0x318>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00d      	beq.n	800101a <HAL_GPIO_Init+0x20a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4a      	ldr	r2, [pc, #296]	; (800112c <HAL_GPIO_Init+0x31c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x206>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a49      	ldr	r2, [pc, #292]	; (8001130 <HAL_GPIO_Init+0x320>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_GPIO_Init+0x202>
 800100e:	2306      	movs	r3, #6
 8001010:	e00c      	b.n	800102c <HAL_GPIO_Init+0x21c>
 8001012:	2307      	movs	r3, #7
 8001014:	e00a      	b.n	800102c <HAL_GPIO_Init+0x21c>
 8001016:	2305      	movs	r3, #5
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x21c>
 800101a:	2304      	movs	r3, #4
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x21c>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x21c>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x21c>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x21c>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x304>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <HAL_GPIO_Init+0x324>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106e:	4a31      	ldr	r2, [pc, #196]	; (8001134 <HAL_GPIO_Init+0x324>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <HAL_GPIO_Init+0x324>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <HAL_GPIO_Init+0x324>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_GPIO_Init+0x324>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_GPIO_Init+0x324>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_GPIO_Init+0x324>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_GPIO_Init+0x324>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f ae96 	bls.w	8000e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40013c00 	.word	0x40013c00

08001138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0cc      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d90c      	bls.n	8001174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b8      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118c:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	494d      	ldr	r1, [pc, #308]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d044      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d119      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d003      	beq.n	80011f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e06f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e067      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4934      	ldr	r1, [pc, #208]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	4313      	orrs	r3, r2
 8001226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fd04 	bl	8000c34 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fd00 	bl	8000c34 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e04f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d20c      	bcs.n	8001280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e032      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4916      	ldr	r1, [pc, #88]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	4313      	orrs	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012be:	f000 f887 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	5ccb      	ldrb	r3, [r1, r3]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fbae 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	08004a80 	.word	0x08004a80
 80012fc:	20000004 	.word	0x20000004
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_RCC_GetHCLKFreq+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001320:	f7ff fff0 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0a9b      	lsrs	r3, r3, #10
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4903      	ldr	r1, [pc, #12]	; (8001340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	08004a90 	.word	0x08004a90

08001344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001348:	f7ff ffdc 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	0b5b      	lsrs	r3, r3, #13
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	4903      	ldr	r1, [pc, #12]	; (8001368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	08004a90 	.word	0x08004a90

0800136c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	220f      	movs	r2, #15
 800137a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0203 	and.w	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_RCC_GetClockConfig+0x60>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 020f 	and.w	r2, r3, #15
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d4:	b0ae      	sub	sp, #184	; 0xb8
 80013d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f6:	4bcb      	ldr	r3, [pc, #812]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	f200 8206 	bhi.w	8001810 <HAL_RCC_GetSysClockFreq+0x440>
 8001404:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	08001441 	.word	0x08001441
 8001410:	08001811 	.word	0x08001811
 8001414:	08001811 	.word	0x08001811
 8001418:	08001811 	.word	0x08001811
 800141c:	08001449 	.word	0x08001449
 8001420:	08001811 	.word	0x08001811
 8001424:	08001811 	.word	0x08001811
 8001428:	08001811 	.word	0x08001811
 800142c:	08001451 	.word	0x08001451
 8001430:	08001811 	.word	0x08001811
 8001434:	08001811 	.word	0x08001811
 8001438:	08001811 	.word	0x08001811
 800143c:	08001641 	.word	0x08001641
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001440:	4bb9      	ldr	r3, [pc, #740]	; (8001728 <HAL_RCC_GetSysClockFreq+0x358>)
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001446:	e1e7      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001448:	4bb8      	ldr	r3, [pc, #736]	; (800172c <HAL_RCC_GetSysClockFreq+0x35c>)
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800144e:	e1e3      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001450:	4bb4      	ldr	r3, [pc, #720]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800145c:	4bb1      	ldr	r3, [pc, #708]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d071      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001468:	4bae      	ldr	r3, [pc, #696]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	2200      	movs	r2, #0
 8001470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001474:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800147c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800148a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800148e:	4622      	mov	r2, r4
 8001490:	462b      	mov	r3, r5
 8001492:	f04f 0000 	mov.w	r0, #0
 8001496:	f04f 0100 	mov.w	r1, #0
 800149a:	0159      	lsls	r1, r3, #5
 800149c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014a0:	0150      	lsls	r0, r2, #5
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4621      	mov	r1, r4
 80014a8:	1a51      	subs	r1, r2, r1
 80014aa:	6439      	str	r1, [r7, #64]	; 0x40
 80014ac:	4629      	mov	r1, r5
 80014ae:	eb63 0301 	sbc.w	r3, r3, r1
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014c0:	4649      	mov	r1, r9
 80014c2:	018b      	lsls	r3, r1, #6
 80014c4:	4641      	mov	r1, r8
 80014c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ca:	4641      	mov	r1, r8
 80014cc:	018a      	lsls	r2, r1, #6
 80014ce:	4641      	mov	r1, r8
 80014d0:	1a51      	subs	r1, r2, r1
 80014d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80014d4:	4649      	mov	r1, r9
 80014d6:	eb63 0301 	sbc.w	r3, r3, r1
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014e8:	4649      	mov	r1, r9
 80014ea:	00cb      	lsls	r3, r1, #3
 80014ec:	4641      	mov	r1, r8
 80014ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014f2:	4641      	mov	r1, r8
 80014f4:	00ca      	lsls	r2, r1, #3
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	4603      	mov	r3, r0
 80014fc:	4622      	mov	r2, r4
 80014fe:	189b      	adds	r3, r3, r2
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
 8001502:	462b      	mov	r3, r5
 8001504:	460a      	mov	r2, r1
 8001506:	eb42 0303 	adc.w	r3, r2, r3
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001518:	4629      	mov	r1, r5
 800151a:	024b      	lsls	r3, r1, #9
 800151c:	4621      	mov	r1, r4
 800151e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001522:	4621      	mov	r1, r4
 8001524:	024a      	lsls	r2, r1, #9
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800152e:	2200      	movs	r2, #0
 8001530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001538:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800153c:	f7fe fe68 	bl	8000210 <__aeabi_uldivmod>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4613      	mov	r3, r2
 8001546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800154a:	e067      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154c:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	2200      	movs	r2, #0
 8001554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001558:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800155c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001564:	67bb      	str	r3, [r7, #120]	; 0x78
 8001566:	2300      	movs	r3, #0
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
 800156a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800156e:	4622      	mov	r2, r4
 8001570:	462b      	mov	r3, r5
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	0159      	lsls	r1, r3, #5
 800157c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001580:	0150      	lsls	r0, r2, #5
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4621      	mov	r1, r4
 8001588:	1a51      	subs	r1, r2, r1
 800158a:	62b9      	str	r1, [r7, #40]	; 0x28
 800158c:	4629      	mov	r1, r5
 800158e:	eb63 0301 	sbc.w	r3, r3, r1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015a0:	4649      	mov	r1, r9
 80015a2:	018b      	lsls	r3, r1, #6
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015aa:	4641      	mov	r1, r8
 80015ac:	018a      	lsls	r2, r1, #6
 80015ae:	4641      	mov	r1, r8
 80015b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80015b4:	4649      	mov	r1, r9
 80015b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015ce:	4692      	mov	sl, r2
 80015d0:	469b      	mov	fp, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	eb1a 0303 	adds.w	r3, sl, r3
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	462b      	mov	r3, r5
 80015dc:	eb4b 0303 	adc.w	r3, fp, r3
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ee:	4629      	mov	r1, r5
 80015f0:	028b      	lsls	r3, r1, #10
 80015f2:	4621      	mov	r1, r4
 80015f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015f8:	4621      	mov	r1, r4
 80015fa:	028a      	lsls	r2, r1, #10
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001604:	2200      	movs	r2, #0
 8001606:	673b      	str	r3, [r7, #112]	; 0x70
 8001608:	677a      	str	r2, [r7, #116]	; 0x74
 800160a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800160e:	f7fe fdff 	bl	8000210 <__aeabi_uldivmod>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4613      	mov	r3, r2
 8001618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800161c:	4b41      	ldr	r3, [pc, #260]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800162e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800163e:	e0eb      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d06b      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	2200      	movs	r2, #0
 8001660:	66bb      	str	r3, [r7, #104]	; 0x68
 8001662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166a:	663b      	str	r3, [r7, #96]	; 0x60
 800166c:	2300      	movs	r3, #0
 800166e:	667b      	str	r3, [r7, #100]	; 0x64
 8001670:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001674:	4622      	mov	r2, r4
 8001676:	462b      	mov	r3, r5
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	f04f 0100 	mov.w	r1, #0
 8001680:	0159      	lsls	r1, r3, #5
 8001682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001686:	0150      	lsls	r0, r2, #5
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4621      	mov	r1, r4
 800168e:	1a51      	subs	r1, r2, r1
 8001690:	61b9      	str	r1, [r7, #24]
 8001692:	4629      	mov	r1, r5
 8001694:	eb63 0301 	sbc.w	r3, r3, r1
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016a6:	4659      	mov	r1, fp
 80016a8:	018b      	lsls	r3, r1, #6
 80016aa:	4651      	mov	r1, sl
 80016ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b0:	4651      	mov	r1, sl
 80016b2:	018a      	lsls	r2, r1, #6
 80016b4:	4651      	mov	r1, sl
 80016b6:	ebb2 0801 	subs.w	r8, r2, r1
 80016ba:	4659      	mov	r1, fp
 80016bc:	eb63 0901 	sbc.w	r9, r3, r1
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d4:	4690      	mov	r8, r2
 80016d6:	4699      	mov	r9, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	eb18 0303 	adds.w	r3, r8, r3
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	462b      	mov	r3, r5
 80016e2:	eb49 0303 	adc.w	r3, r9, r3
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016f4:	4629      	mov	r1, r5
 80016f6:	024b      	lsls	r3, r1, #9
 80016f8:	4621      	mov	r1, r4
 80016fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fe:	4621      	mov	r1, r4
 8001700:	024a      	lsls	r2, r1, #9
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800170a:	2200      	movs	r2, #0
 800170c:	65bb      	str	r3, [r7, #88]	; 0x58
 800170e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001710:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001714:	f7fe fd7c 	bl	8000210 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001722:	e065      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x420>
 8001724:	40023800 	.word	0x40023800
 8001728:	00f42400 	.word	0x00f42400
 800172c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001730:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_GetSysClockFreq+0x458>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	2200      	movs	r2, #0
 8001738:	4618      	mov	r0, r3
 800173a:	4611      	mov	r1, r2
 800173c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001740:	653b      	str	r3, [r7, #80]	; 0x50
 8001742:	2300      	movs	r3, #0
 8001744:	657b      	str	r3, [r7, #84]	; 0x54
 8001746:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800174a:	4642      	mov	r2, r8
 800174c:	464b      	mov	r3, r9
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	0159      	lsls	r1, r3, #5
 8001758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800175c:	0150      	lsls	r0, r2, #5
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4641      	mov	r1, r8
 8001764:	1a51      	subs	r1, r2, r1
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	4649      	mov	r1, r9
 800176a:	eb63 0301 	sbc.w	r3, r3, r1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800177c:	4659      	mov	r1, fp
 800177e:	018b      	lsls	r3, r1, #6
 8001780:	4651      	mov	r1, sl
 8001782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001786:	4651      	mov	r1, sl
 8001788:	018a      	lsls	r2, r1, #6
 800178a:	4651      	mov	r1, sl
 800178c:	1a54      	subs	r4, r2, r1
 800178e:	4659      	mov	r1, fp
 8001790:	eb63 0501 	sbc.w	r5, r3, r1
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	00eb      	lsls	r3, r5, #3
 800179e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a2:	00e2      	lsls	r2, r4, #3
 80017a4:	4614      	mov	r4, r2
 80017a6:	461d      	mov	r5, r3
 80017a8:	4643      	mov	r3, r8
 80017aa:	18e3      	adds	r3, r4, r3
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	464b      	mov	r3, r9
 80017b0:	eb45 0303 	adc.w	r3, r5, r3
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c2:	4629      	mov	r1, r5
 80017c4:	028b      	lsls	r3, r1, #10
 80017c6:	4621      	mov	r1, r4
 80017c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017cc:	4621      	mov	r1, r4
 80017ce:	028a      	lsls	r2, r1, #10
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d8:	2200      	movs	r2, #0
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
 80017dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017e2:	f7fe fd15 	bl	8000210 <__aeabi_uldivmod>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4613      	mov	r3, r2
 80017ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017f0:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_GetSysClockFreq+0x458>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0f1b      	lsrs	r3, r3, #28
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800180e:	e003      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001816:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800181c:	4618      	mov	r0, r3
 800181e:	37b8      	adds	r7, #184	; 0xb8
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	00f42400 	.word	0x00f42400

08001830 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e28d      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8083 	beq.w	8001956 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001850:	4b94      	ldr	r3, [pc, #592]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b04      	cmp	r3, #4
 800185a:	d019      	beq.n	8001890 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800185c:	4b91      	ldr	r3, [pc, #580]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001864:	2b08      	cmp	r3, #8
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001874:	d00c      	beq.n	8001890 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4b8b      	ldr	r3, [pc, #556]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d112      	bne.n	80018a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188e:	d10b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d05b      	beq.n	8001954 <HAL_RCC_OscConfig+0x124>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d157      	bne.n	8001954 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e25a      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x90>
 80018b2:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7b      	ldr	r2, [pc, #492]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xcc>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0xb4>
 80018ca:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a75      	ldr	r2, [pc, #468]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a72      	ldr	r2, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xcc>
 80018e4:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6e      	ldr	r2, [pc, #440]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6b      	ldr	r2, [pc, #428]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f996 	bl	8000c34 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f992 	bl	8000c34 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e21f      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xdc>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f982 	bl	8000c34 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f97e 	bl	8000c34 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e20b      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x104>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d06f      	beq.n	8001a42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d017      	beq.n	800199e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001976:	2b08      	cmp	r3, #8
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800197a:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001992:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x186>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1d3      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4937      	ldr	r1, [pc, #220]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_RCC_OscConfig+0x278>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff f92b 	bl	8000c34 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f927 	bl	8000c34 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1b4      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4925      	ldr	r1, [pc, #148]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_OscConfig+0x278>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f90a 	bl	8000c34 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff f906 	bl	8000c34 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e193      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d036      	beq.n	8001abc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_RCC_OscConfig+0x27c>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f8ea 	bl	8000c34 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff f8e6 	bl	8000c34 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e173      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x234>
 8001a82:	e01b      	b.n	8001abc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_OscConfig+0x27c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f8d3 	bl	8000c34 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	e00e      	b.n	8001ab0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a92:	f7ff f8cf 	bl	8000c34 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d907      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e15c      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470000 	.word	0x42470000
 8001aac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	4b8a      	ldr	r3, [pc, #552]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ea      	bne.n	8001a92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8097 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ace:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10f      	bne.n	8001afa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f88f 	bl	8000c34 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff f88b 	bl	8000c34 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e118      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x31e>
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x358>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x340>
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a5d      	ldr	r2, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0x358>
 8001b70:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a59      	ldr	r2, [pc, #356]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a56      	ldr	r2, [pc, #344]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	f023 0304 	bic.w	r3, r3, #4
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d015      	beq.n	8001bbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff f850 	bl	8000c34 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f84c 	bl	8000c34 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0d7      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0ee      	beq.n	8001b98 <HAL_RCC_OscConfig+0x368>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f83a 	bl	8000c34 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f836 	bl	8000c34 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e0c1      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ee      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80ad 	beq.w	8001d5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c02:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d060      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d145      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <HAL_RCC_OscConfig+0x4b4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f80a 	bl	8000c34 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f806 	bl	8000c34 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e093      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	041b      	lsls	r3, r3, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	071b      	lsls	r3, r3, #28
 8001c6e:	491b      	ldr	r1, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x4b4>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe ffdb 	bl	8000c34 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe ffd7 	bl	8000c34 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e064      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x452>
 8001ca0:	e05c      	b.n	8001d5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x4b4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7fe ffc4 	bl	8000c34 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7fe ffc0 	bl	8000c34 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04d      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x480>
 8001cce:	e045      	b.n	8001d5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e040      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <HAL_RCC_OscConfig+0x538>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d030      	beq.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d129      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d122      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d119      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	3b01      	subs	r3, #1
 8001d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d10f      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e041      	b.n	8001e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fdb4 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f000 fc7a 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d001      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04e      	b.n	8001ec2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d022      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4e:	d01d      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d018      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d010      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	e007      	b.n	8001ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40000800 	.word	0x40000800
 8001edc:	40000c00 	.word	0x40000c00
 8001ee0:	40010400 	.word	0x40010400
 8001ee4:	40014000 	.word	0x40014000
 8001ee8:	40001800 	.word	0x40001800

08001eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e041      	b.n	8001f82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f839 	bl	8001f8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f000 fbba 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_TIM_PWM_Start+0x24>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	bf14      	ite	ne
 8001fbc:	2301      	movne	r3, #1
 8001fbe:	2300      	moveq	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e022      	b.n	800200a <HAL_TIM_PWM_Start+0x6a>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d109      	bne.n	8001fde <HAL_TIM_PWM_Start+0x3e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	e015      	b.n	800200a <HAL_TIM_PWM_Start+0x6a>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d109      	bne.n	8001ff8 <HAL_TIM_PWM_Start+0x58>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	bf14      	ite	ne
 8001ff0:	2301      	movne	r3, #1
 8001ff2:	2300      	moveq	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e008      	b.n	800200a <HAL_TIM_PWM_Start+0x6a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07c      	b.n	800210c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_TIM_PWM_Start+0x82>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002020:	e013      	b.n	800204a <HAL_TIM_PWM_Start+0xaa>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d104      	bne.n	8002032 <HAL_TIM_PWM_Start+0x92>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002030:	e00b      	b.n	800204a <HAL_TIM_PWM_Start+0xaa>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d104      	bne.n	8002042 <HAL_TIM_PWM_Start+0xa2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002040:	e003      	b.n	800204a <HAL_TIM_PWM_Start+0xaa>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fe10 	bl	8002c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_TIM_PWM_Start+0x174>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_TIM_PWM_Start+0xcc>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <HAL_TIM_PWM_Start+0x178>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_TIM_PWM_Start+0xd0>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_TIM_PWM_Start+0xd2>
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_TIM_PWM_Start+0x174>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x136>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d01d      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x136>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HAL_TIM_PWM_Start+0x17c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d018      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x136>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_TIM_PWM_Start+0x180>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x136>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_TIM_PWM_Start+0x184>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x136>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_TIM_PWM_Start+0x178>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x136>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_TIM_PWM_Start+0x188>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x136>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a16      	ldr	r2, [pc, #88]	; (800212c <HAL_TIM_PWM_Start+0x18c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d111      	bne.n	80020fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d010      	beq.n	800210a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	e007      	b.n	800210a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010000 	.word	0x40010000
 8002118:	40010400 	.word	0x40010400
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40014000 	.word	0x40014000
 800212c:	40001800 	.word	0x40001800

08002130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0202 	mvn.w	r2, #2
 800215c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa77 	bl	8002666 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fa69 	bl	8002652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fa7a 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0204 	mvn.w	r2, #4
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa4d 	bl	8002666 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fa3f 	bl	8002652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa50 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0208 	mvn.w	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2204      	movs	r2, #4
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa23 	bl	8002666 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa15 	bl	8002652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fa26 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b10      	cmp	r3, #16
 8002240:	d122      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b10      	cmp	r3, #16
 800224e:	d11b      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0210 	mvn.w	r2, #16
 8002258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2208      	movs	r2, #8
 800225e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f9f9 	bl	8002666 <HAL_TIM_IC_CaptureCallback>
 8002274:	e005      	b.n	8002282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f9eb 	bl	8002652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f9fc 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0201 	mvn.w	r2, #1
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe faea 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fd78 	bl	8002dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f9c1 	bl	800268e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b20      	cmp	r3, #32
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0220 	mvn.w	r2, #32
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fd42 	bl	8002dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800235a:	2302      	movs	r3, #2
 800235c:	e0ae      	b.n	80024bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0c      	cmp	r3, #12
 800236a:	f200 809f 	bhi.w	80024ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800236e:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	080023a9 	.word	0x080023a9
 8002378:	080024ad 	.word	0x080024ad
 800237c:	080024ad 	.word	0x080024ad
 8002380:	080024ad 	.word	0x080024ad
 8002384:	080023e9 	.word	0x080023e9
 8002388:	080024ad 	.word	0x080024ad
 800238c:	080024ad 	.word	0x080024ad
 8002390:	080024ad 	.word	0x080024ad
 8002394:	0800242b 	.word	0x0800242b
 8002398:	080024ad 	.word	0x080024ad
 800239c:	080024ad 	.word	0x080024ad
 80023a0:	080024ad 	.word	0x080024ad
 80023a4:	0800246b 	.word	0x0800246b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fa18 	bl	80027e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0208 	orr.w	r2, r2, #8
 80023c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0204 	bic.w	r2, r2, #4
 80023d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6999      	ldr	r1, [r3, #24]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	619a      	str	r2, [r3, #24]
      break;
 80023e6:	e064      	b.n	80024b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fa68 	bl	80028c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6999      	ldr	r1, [r3, #24]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	021a      	lsls	r2, r3, #8
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	619a      	str	r2, [r3, #24]
      break;
 8002428:	e043      	b.n	80024b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fabd 	bl	80029b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0208 	orr.w	r2, r2, #8
 8002444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0204 	bic.w	r2, r2, #4
 8002454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69d9      	ldr	r1, [r3, #28]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	61da      	str	r2, [r3, #28]
      break;
 8002468:	e023      	b.n	80024b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fb11 	bl	8002a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69d9      	ldr	r1, [r3, #28]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	61da      	str	r2, [r3, #28]
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	75fb      	strb	r3, [r7, #23]
      break;
 80024b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c>
 80024dc:	2302      	movs	r3, #2
 80024de:	e0b4      	b.n	800264a <HAL_TIM_ConfigClockSource+0x186>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002518:	d03e      	beq.n	8002598 <HAL_TIM_ConfigClockSource+0xd4>
 800251a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251e:	f200 8087 	bhi.w	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002526:	f000 8086 	beq.w	8002636 <HAL_TIM_ConfigClockSource+0x172>
 800252a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252e:	d87f      	bhi.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002530:	2b70      	cmp	r3, #112	; 0x70
 8002532:	d01a      	beq.n	800256a <HAL_TIM_ConfigClockSource+0xa6>
 8002534:	2b70      	cmp	r3, #112	; 0x70
 8002536:	d87b      	bhi.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002538:	2b60      	cmp	r3, #96	; 0x60
 800253a:	d050      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x11a>
 800253c:	2b60      	cmp	r3, #96	; 0x60
 800253e:	d877      	bhi.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b50      	cmp	r3, #80	; 0x50
 8002542:	d03c      	beq.n	80025be <HAL_TIM_ConfigClockSource+0xfa>
 8002544:	2b50      	cmp	r3, #80	; 0x50
 8002546:	d873      	bhi.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d058      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x13a>
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	d86f      	bhi.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b30      	cmp	r3, #48	; 0x30
 8002552:	d064      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x15a>
 8002554:	2b30      	cmp	r3, #48	; 0x30
 8002556:	d86b      	bhi.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b20      	cmp	r3, #32
 800255a:	d060      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x15a>
 800255c:	2b20      	cmp	r3, #32
 800255e:	d867      	bhi.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002560:	2b00      	cmp	r3, #0
 8002562:	d05c      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x15a>
 8002564:	2b10      	cmp	r3, #16
 8002566:	d05a      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x15a>
 8002568:	e062      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f000 fb5d 	bl	8002c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800258c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	609a      	str	r2, [r3, #8]
      break;
 8002596:	e04f      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f000 fb46 	bl	8002c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ba:	609a      	str	r2, [r3, #8]
      break;
 80025bc:	e03c      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f000 faba 	bl	8002b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2150      	movs	r1, #80	; 0x50
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fb13 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 80025dc:	e02c      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f000 fad9 	bl	8002ba2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2160      	movs	r1, #96	; 0x60
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fb03 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 80025fc:	e01c      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	461a      	mov	r2, r3
 800260c:	f000 fa9a 	bl	8002b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2140      	movs	r1, #64	; 0x40
 8002616:	4618      	mov	r0, r3
 8002618:	f000 faf3 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 800261c:	e00c      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f000 faea 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 800262e:	e003      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e000      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a40      	ldr	r2, [pc, #256]	; (80027b8 <TIM_Base_SetConfig+0x114>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <TIM_Base_SetConfig+0x40>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c2:	d00f      	beq.n	80026e4 <TIM_Base_SetConfig+0x40>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3d      	ldr	r2, [pc, #244]	; (80027bc <TIM_Base_SetConfig+0x118>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00b      	beq.n	80026e4 <TIM_Base_SetConfig+0x40>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <TIM_Base_SetConfig+0x11c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d007      	beq.n	80026e4 <TIM_Base_SetConfig+0x40>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a3b      	ldr	r2, [pc, #236]	; (80027c4 <TIM_Base_SetConfig+0x120>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d003      	beq.n	80026e4 <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <TIM_Base_SetConfig+0x124>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d108      	bne.n	80026f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a2f      	ldr	r2, [pc, #188]	; (80027b8 <TIM_Base_SetConfig+0x114>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d02b      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002704:	d027      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <TIM_Base_SetConfig+0x118>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d023      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <TIM_Base_SetConfig+0x11c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <TIM_Base_SetConfig+0x120>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01b      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <TIM_Base_SetConfig+0x124>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d017      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <TIM_Base_SetConfig+0x128>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <TIM_Base_SetConfig+0x12c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00f      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <TIM_Base_SetConfig+0x130>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <TIM_Base_SetConfig+0x134>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <TIM_Base_SetConfig+0x138>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <TIM_Base_SetConfig+0x13c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <TIM_Base_SetConfig+0x114>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_Base_SetConfig+0xf8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <TIM_Base_SetConfig+0x124>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d103      	bne.n	80027a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	615a      	str	r2, [r3, #20]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	40010400 	.word	0x40010400
 80027cc:	40014000 	.word	0x40014000
 80027d0:	40014400 	.word	0x40014400
 80027d4:	40014800 	.word	0x40014800
 80027d8:	40001800 	.word	0x40001800
 80027dc:	40001c00 	.word	0x40001c00
 80027e0:	40002000 	.word	0x40002000

080027e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a20      	ldr	r2, [pc, #128]	; (80028bc <TIM_OC1_SetConfig+0xd8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <TIM_OC1_SetConfig+0x64>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <TIM_OC1_SetConfig+0xdc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d10c      	bne.n	8002862 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f023 0308 	bic.w	r3, r3, #8
 800284e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a15      	ldr	r2, [pc, #84]	; (80028bc <TIM_OC1_SetConfig+0xd8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <TIM_OC1_SetConfig+0x8e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <TIM_OC1_SetConfig+0xdc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	621a      	str	r2, [r3, #32]
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010400 	.word	0x40010400

080028c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f023 0210 	bic.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0320 	bic.w	r3, r3, #32
 800290e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <TIM_OC2_SetConfig+0xe4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_OC2_SetConfig+0x68>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <TIM_OC2_SetConfig+0xe8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10d      	bne.n	8002948 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <TIM_OC2_SetConfig+0xe4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_OC2_SetConfig+0x94>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a16      	ldr	r2, [pc, #88]	; (80029ac <TIM_OC2_SetConfig+0xe8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d113      	bne.n	8002980 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800295e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40010400 	.word	0x40010400

080029b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <TIM_OC3_SetConfig+0xe0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_OC3_SetConfig+0x66>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a20      	ldr	r2, [pc, #128]	; (8002a94 <TIM_OC3_SetConfig+0xe4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10d      	bne.n	8002a32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <TIM_OC3_SetConfig+0xe0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d003      	beq.n	8002a42 <TIM_OC3_SetConfig+0x92>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <TIM_OC3_SetConfig+0xe4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d113      	bne.n	8002a6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	621a      	str	r2, [r3, #32]
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40010400 	.word	0x40010400

08002a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	031b      	lsls	r3, r3, #12
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <TIM_OC4_SetConfig+0xa4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d003      	beq.n	8002b00 <TIM_OC4_SetConfig+0x68>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <TIM_OC4_SetConfig+0xa8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d109      	bne.n	8002b14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	621a      	str	r2, [r3, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40010400 	.word	0x40010400

08002b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 030a 	bic.w	r3, r3, #10
 8002b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0210 	bic.w	r2, r3, #16
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	031b      	lsls	r3, r3, #12
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f043 0307 	orr.w	r3, r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	021a      	lsls	r2, r3, #8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e05a      	b.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d01d      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a18      	ldr	r2, [pc, #96]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40001800 	.word	0x40001800

08002dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e03f      	b.n	8002e76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fdd0 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f829 	bl	8002e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b0c0      	sub	sp, #256	; 0x100
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	ea40 0301 	orr.w	r3, r0, r1
 8002ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ed8:	f021 010c 	bic.w	r1, r1, #12
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	6999      	ldr	r1, [r3, #24]
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	ea40 0301 	orr.w	r3, r0, r1
 8002f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b8f      	ldr	r3, [pc, #572]	; (800314c <UART_SetConfig+0x2cc>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d005      	beq.n	8002f20 <UART_SetConfig+0xa0>
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	; (8003150 <UART_SetConfig+0x2d0>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d104      	bne.n	8002f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f20:	f7fe fa10 	bl	8001344 <HAL_RCC_GetPCLK2Freq>
 8002f24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f28:	e003      	b.n	8002f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f2a:	f7fe f9f7 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 8002f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3c:	f040 810c 	bne.w	8003158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	1891      	adds	r1, r2, r2
 8002f58:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f5a:	415b      	adcs	r3, r3
 8002f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f62:	4621      	mov	r1, r4
 8002f64:	eb12 0801 	adds.w	r8, r2, r1
 8002f68:	4629      	mov	r1, r5
 8002f6a:	eb43 0901 	adc.w	r9, r3, r1
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f82:	4690      	mov	r8, r2
 8002f84:	4699      	mov	r9, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	eb18 0303 	adds.w	r3, r8, r3
 8002f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f90:	462b      	mov	r3, r5
 8002f92:	eb49 0303 	adc.w	r3, r9, r3
 8002f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fae:	460b      	mov	r3, r1
 8002fb0:	18db      	adds	r3, r3, r3
 8002fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	eb42 0303 	adc.w	r3, r2, r3
 8002fba:	657b      	str	r3, [r7, #84]	; 0x54
 8002fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fc4:	f7fd f924 	bl	8000210 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <UART_SetConfig+0x2d4>)
 8002fce:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	011c      	lsls	r4, r3, #4
 8002fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	1891      	adds	r1, r2, r2
 8002fee:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ff0:	415b      	adcs	r3, r3
 8002ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8002ffe:	4649      	mov	r1, r9
 8003000:	eb43 0b01 	adc.w	fp, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003018:	4692      	mov	sl, r2
 800301a:	469b      	mov	fp, r3
 800301c:	4643      	mov	r3, r8
 800301e:	eb1a 0303 	adds.w	r3, sl, r3
 8003022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003026:	464b      	mov	r3, r9
 8003028:	eb4b 0303 	adc.w	r3, fp, r3
 800302c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800303c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003044:	460b      	mov	r3, r1
 8003046:	18db      	adds	r3, r3, r3
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
 800304a:	4613      	mov	r3, r2
 800304c:	eb42 0303 	adc.w	r3, r2, r3
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
 8003052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800305a:	f7fd f8d9 	bl	8000210 <__aeabi_uldivmod>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4611      	mov	r1, r2
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <UART_SetConfig+0x2d4>)
 8003066:	fba3 2301 	umull	r2, r3, r3, r1
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2264      	movs	r2, #100	; 0x64
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	1acb      	subs	r3, r1, r3
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <UART_SetConfig+0x2d4>)
 800307c:	fba3 2302 	umull	r2, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003088:	441c      	add	r4, r3
 800308a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003094:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030a4:	415b      	adcs	r3, r3
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	6339      	str	r1, [r7, #48]	; 0x30
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030e0:	464b      	mov	r3, r9
 80030e2:	460a      	mov	r2, r1
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003100:	460b      	mov	r3, r1
 8003102:	18db      	adds	r3, r3, r3
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
 8003106:	4613      	mov	r3, r2
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003116:	f7fd f87b 	bl	8000210 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <UART_SetConfig+0x2d4>)
 8003120:	fba3 1302 	umull	r1, r3, r3, r2
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	2164      	movs	r1, #100	; 0x64
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	3332      	adds	r3, #50	; 0x32
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <UART_SetConfig+0x2d4>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 0207 	and.w	r2, r3, #7
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4422      	add	r2, r4
 8003146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003148:	e105      	b.n	8003356 <UART_SetConfig+0x4d6>
 800314a:	bf00      	nop
 800314c:	40011000 	.word	0x40011000
 8003150:	40011400 	.word	0x40011400
 8003154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003162:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800316a:	4642      	mov	r2, r8
 800316c:	464b      	mov	r3, r9
 800316e:	1891      	adds	r1, r2, r2
 8003170:	6239      	str	r1, [r7, #32]
 8003172:	415b      	adcs	r3, r3
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800317a:	4641      	mov	r1, r8
 800317c:	1854      	adds	r4, r2, r1
 800317e:	4649      	mov	r1, r9
 8003180:	eb43 0501 	adc.w	r5, r3, r1
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	00eb      	lsls	r3, r5, #3
 800318e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003192:	00e2      	lsls	r2, r4, #3
 8003194:	4614      	mov	r4, r2
 8003196:	461d      	mov	r5, r3
 8003198:	4643      	mov	r3, r8
 800319a:	18e3      	adds	r3, r4, r3
 800319c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031a0:	464b      	mov	r3, r9
 80031a2:	eb45 0303 	adc.w	r3, r5, r3
 80031a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031c6:	4629      	mov	r1, r5
 80031c8:	008b      	lsls	r3, r1, #2
 80031ca:	4621      	mov	r1, r4
 80031cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d0:	4621      	mov	r1, r4
 80031d2:	008a      	lsls	r2, r1, #2
 80031d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031d8:	f7fd f81a 	bl	8000210 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b60      	ldr	r3, [pc, #384]	; (8003364 <UART_SetConfig+0x4e4>)
 80031e2:	fba3 2302 	umull	r2, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	011c      	lsls	r4, r3, #4
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031fc:	4642      	mov	r2, r8
 80031fe:	464b      	mov	r3, r9
 8003200:	1891      	adds	r1, r2, r2
 8003202:	61b9      	str	r1, [r7, #24]
 8003204:	415b      	adcs	r3, r3
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320c:	4641      	mov	r1, r8
 800320e:	1851      	adds	r1, r2, r1
 8003210:	6139      	str	r1, [r7, #16]
 8003212:	4649      	mov	r1, r9
 8003214:	414b      	adcs	r3, r1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003224:	4659      	mov	r1, fp
 8003226:	00cb      	lsls	r3, r1, #3
 8003228:	4651      	mov	r1, sl
 800322a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322e:	4651      	mov	r1, sl
 8003230:	00ca      	lsls	r2, r1, #3
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	4603      	mov	r3, r0
 8003238:	4642      	mov	r2, r8
 800323a:	189b      	adds	r3, r3, r2
 800323c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003240:	464b      	mov	r3, r9
 8003242:	460a      	mov	r2, r1
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	67bb      	str	r3, [r7, #120]	; 0x78
 8003256:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003264:	4649      	mov	r1, r9
 8003266:	008b      	lsls	r3, r1, #2
 8003268:	4641      	mov	r1, r8
 800326a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800326e:	4641      	mov	r1, r8
 8003270:	008a      	lsls	r2, r1, #2
 8003272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003276:	f7fc ffcb 	bl	8000210 <__aeabi_uldivmod>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <UART_SetConfig+0x4e4>)
 8003280:	fba3 1302 	umull	r1, r3, r3, r2
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	2164      	movs	r1, #100	; 0x64
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	3332      	adds	r3, #50	; 0x32
 8003292:	4a34      	ldr	r2, [pc, #208]	; (8003364 <UART_SetConfig+0x4e4>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329e:	441c      	add	r4, r3
 80032a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a4:	2200      	movs	r2, #0
 80032a6:	673b      	str	r3, [r7, #112]	; 0x70
 80032a8:	677a      	str	r2, [r7, #116]	; 0x74
 80032aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032ae:	4642      	mov	r2, r8
 80032b0:	464b      	mov	r3, r9
 80032b2:	1891      	adds	r1, r2, r2
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	415b      	adcs	r3, r3
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032be:	4641      	mov	r1, r8
 80032c0:	1851      	adds	r1, r2, r1
 80032c2:	6039      	str	r1, [r7, #0]
 80032c4:	4649      	mov	r1, r9
 80032c6:	414b      	adcs	r3, r1
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032d6:	4659      	mov	r1, fp
 80032d8:	00cb      	lsls	r3, r1, #3
 80032da:	4651      	mov	r1, sl
 80032dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e0:	4651      	mov	r1, sl
 80032e2:	00ca      	lsls	r2, r1, #3
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	4603      	mov	r3, r0
 80032ea:	4642      	mov	r2, r8
 80032ec:	189b      	adds	r3, r3, r2
 80032ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80032f0:	464b      	mov	r3, r9
 80032f2:	460a      	mov	r2, r1
 80032f4:	eb42 0303 	adc.w	r3, r2, r3
 80032f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	663b      	str	r3, [r7, #96]	; 0x60
 8003304:	667a      	str	r2, [r7, #100]	; 0x64
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003312:	4649      	mov	r1, r9
 8003314:	008b      	lsls	r3, r1, #2
 8003316:	4641      	mov	r1, r8
 8003318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800331c:	4641      	mov	r1, r8
 800331e:	008a      	lsls	r2, r1, #2
 8003320:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003324:	f7fc ff74 	bl	8000210 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <UART_SetConfig+0x4e4>)
 800332e:	fba3 1302 	umull	r1, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2164      	movs	r1, #100	; 0x64
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	3332      	adds	r3, #50	; 0x32
 8003340:	4a08      	ldr	r2, [pc, #32]	; (8003364 <UART_SetConfig+0x4e4>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4422      	add	r2, r4
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	bf00      	nop
 8003358:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003362:	bf00      	nop
 8003364:	51eb851f 	.word	0x51eb851f

08003368 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337a:	2b84      	cmp	r3, #132	; 0x84
 800337c:	d005      	beq.n	800338a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800337e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	3303      	adds	r3, #3
 8003388:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800339c:	f000 faf6 	bl	800398c <vTaskStartScheduler>
  
  return osOK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a8:	b089      	sub	sp, #36	; 0x24
 80033aa:	af04      	add	r7, sp, #16
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <osThreadCreate+0x54>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01c      	beq.n	80033fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685c      	ldr	r4, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681d      	ldr	r5, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691e      	ldr	r6, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ffc8 	bl	8003368 <makeFreeRtosPriority>
 80033d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033e2:	9202      	str	r2, [sp, #8]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	9100      	str	r1, [sp, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4632      	mov	r2, r6
 80033ec:	4629      	mov	r1, r5
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 f8ed 	bl	80035ce <xTaskCreateStatic>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e01c      	b.n	8003434 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685c      	ldr	r4, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003406:	b29e      	uxth	r6, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ffaa 	bl	8003368 <makeFreeRtosPriority>
 8003414:	4602      	mov	r2, r0
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	9200      	str	r2, [sp, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	4632      	mov	r2, r6
 8003422:	4629      	mov	r1, r5
 8003424:	4620      	mov	r0, r4
 8003426:	f000 f92f 	bl	8003688 <xTaskCreate>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d001      	beq.n	8003434 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003434:	68fb      	ldr	r3, [r7, #12]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800343e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <osDelay+0x16>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	e000      	b.n	8003456 <osDelay+0x18>
 8003454:	2301      	movs	r3, #1
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fa64 	bl	8003924 <vTaskDelay>
  
  return osOK;
 800345c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f103 0208 	add.w	r2, r3, #8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800347e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f103 0208 	add.w	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 0208 	add.w	r2, r3, #8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800351e:	d103      	bne.n	8003528 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e00c      	b.n	8003542 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3308      	adds	r3, #8
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e002      	b.n	8003536 <vListInsert+0x2e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d2f6      	bcs.n	8003530 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6892      	ldr	r2, [r2, #8]
 8003590:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6852      	ldr	r2, [r2, #4]
 800359a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d103      	bne.n	80035ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1e5a      	subs	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b08e      	sub	sp, #56	; 0x38
 80035d2:	af04      	add	r7, sp, #16
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <xTaskCreateStatic+0x46>
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	61fb      	str	r3, [r7, #28]
}
 8003610:	bf00      	nop
 8003612:	e7fe      	b.n	8003612 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003614:	23b4      	movs	r3, #180	; 0xb4
 8003616:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2bb4      	cmp	r3, #180	; 0xb4
 800361c:	d00a      	beq.n	8003634 <xTaskCreateStatic+0x66>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	61bb      	str	r3, [r7, #24]
}
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003634:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01e      	beq.n	800367a <xTaskCreateStatic+0xac>
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800364a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	2202      	movs	r2, #2
 8003650:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003654:	2300      	movs	r3, #0
 8003656:	9303      	str	r3, [sp, #12]
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f851 	bl	8003714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003674:	f000 f8ec 	bl	8003850 <prvAddNewTaskToReadyList>
 8003678:	e001      	b.n	800367e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800367e:	697b      	ldr	r3, [r7, #20]
	}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fef3 	bl	8004488 <pvPortMalloc>
 80036a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036aa:	20b4      	movs	r0, #180	; 0xb4
 80036ac:	f000 feec 	bl	8004488 <pvPortMalloc>
 80036b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
 80036be:	e005      	b.n	80036cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036c0:	6978      	ldr	r0, [r7, #20]
 80036c2:	f000 ffad 	bl	8004620 <vPortFree>
 80036c6:	e001      	b.n	80036cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	2300      	movs	r3, #0
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f80f 	bl	8003714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f6:	69f8      	ldr	r0, [r7, #28]
 80036f8:	f000 f8aa 	bl	8003850 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e002      	b.n	8003708 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003708:	69bb      	ldr	r3, [r7, #24]
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800372c:	3b01      	subs	r3, #1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	617b      	str	r3, [r7, #20]
}
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01f      	beq.n	80037a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e012      	b.n	800378e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	7819      	ldrb	r1, [r3, #0]
 8003770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	3334      	adds	r3, #52	; 0x34
 8003778:	460a      	mov	r2, r1
 800377a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d9e9      	bls.n	8003768 <prvInitialiseNewTask+0x54>
 8003794:	e000      	b.n	8003798 <prvInitialiseNewTask+0x84>
			{
				break;
 8003796:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a0:	e003      	b.n	80037aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d901      	bls.n	80037b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037b0:	2306      	movs	r3, #6
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fe6b 	bl	80034a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	3318      	adds	r3, #24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fe66 	bl	80034a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f1c3 0207 	rsb	r2, r3, #7
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	334c      	adds	r3, #76	; 0x4c
 8003804:	2260      	movs	r2, #96	; 0x60
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f001 f84d 	bl	80048a8 <memset>
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <prvInitialiseNewTask+0x130>)
 8003812:	651a      	str	r2, [r3, #80]	; 0x50
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <prvInitialiseNewTask+0x134>)
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	4a0b      	ldr	r2, [pc, #44]	; (800384c <prvInitialiseNewTask+0x138>)
 800381e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	69b8      	ldr	r0, [r7, #24]
 8003826:	f000 fc1f 	bl	8004068 <pxPortInitialiseStack>
 800382a:	4602      	mov	r2, r0
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	08004ab8 	.word	0x08004ab8
 8003848:	08004ad8 	.word	0x08004ad8
 800384c:	08004a98 	.word	0x08004a98

08003850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003858:	f000 fd34 	bl	80042c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800385c:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <prvAddNewTaskToReadyList+0xb8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	4a29      	ldr	r2, [pc, #164]	; (8003908 <prvAddNewTaskToReadyList+0xb8>)
 8003864:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003866:	4b29      	ldr	r3, [pc, #164]	; (800390c <prvAddNewTaskToReadyList+0xbc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800386e:	4a27      	ldr	r2, [pc, #156]	; (800390c <prvAddNewTaskToReadyList+0xbc>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <prvAddNewTaskToReadyList+0xb8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d110      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800387c:	f000 facc 	bl	8003e18 <prvInitialiseTaskLists>
 8003880:	e00d      	b.n	800389e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <prvAddNewTaskToReadyList+0xc0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <prvAddNewTaskToReadyList+0xbc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d802      	bhi.n	800389e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <prvAddNewTaskToReadyList+0xbc>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 80038a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	2201      	movs	r2, #1
 80038ae:	409a      	lsls	r2, r3
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	4a18      	ldr	r2, [pc, #96]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4a15      	ldr	r2, [pc, #84]	; (800391c <prvAddNewTaskToReadyList+0xcc>)
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff fdf5 	bl	80034c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038d6:	f000 fd25 	bl	8004324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038da:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <prvAddNewTaskToReadyList+0xc0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <prvAddNewTaskToReadyList+0xbc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d207      	bcs.n	8003900 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <prvAddNewTaskToReadyList+0xd0>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000524 	.word	0x20000524
 800390c:	20000424 	.word	0x20000424
 8003910:	20000530 	.word	0x20000530
 8003914:	20000540 	.word	0x20000540
 8003918:	2000052c 	.word	0x2000052c
 800391c:	20000428 	.word	0x20000428
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d017      	beq.n	8003966 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <vTaskDelay+0x60>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <vTaskDelay+0x30>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	60bb      	str	r3, [r7, #8]
}
 8003950:	bf00      	nop
 8003952:	e7fe      	b.n	8003952 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003954:	f000 f884 	bl	8003a60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003958:	2100      	movs	r1, #0
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fb1e 	bl	8003f9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003960:	f000 f88c 	bl	8003a7c <xTaskResumeAll>
 8003964:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <vTaskDelay+0x64>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000054c 	.word	0x2000054c
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800399a:	463a      	mov	r2, r7
 800399c:	1d39      	adds	r1, r7, #4
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fdb6 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039a8:	6839      	ldr	r1, [r7, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	9202      	str	r2, [sp, #8]
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	2300      	movs	r3, #0
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	460a      	mov	r2, r1
 80039ba:	4921      	ldr	r1, [pc, #132]	; (8003a40 <vTaskStartScheduler+0xb4>)
 80039bc:	4821      	ldr	r0, [pc, #132]	; (8003a44 <vTaskStartScheduler+0xb8>)
 80039be:	f7ff fe06 	bl	80035ce <xTaskCreateStatic>
 80039c2:	4603      	mov	r3, r0
 80039c4:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <vTaskStartScheduler+0xbc>)
 80039c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039c8:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <vTaskStartScheduler+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039d0:	2301      	movs	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e001      	b.n	80039da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d11b      	bne.n	8003a18 <vTaskStartScheduler+0x8c>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <vTaskStartScheduler+0xc0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	334c      	adds	r3, #76	; 0x4c
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <vTaskStartScheduler+0xc4>)
 80039fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <vTaskStartScheduler+0xc8>)
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <vTaskStartScheduler+0xcc>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <vTaskStartScheduler+0xd0>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a12:	f000 fbb5 	bl	8004180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a16:	e00e      	b.n	8003a36 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a1e:	d10a      	bne.n	8003a36 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	60fb      	str	r3, [r7, #12]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <vTaskStartScheduler+0xa8>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	08004a78 	.word	0x08004a78
 8003a44:	08003de9 	.word	0x08003de9
 8003a48:	20000548 	.word	0x20000548
 8003a4c:	20000424 	.word	0x20000424
 8003a50:	20000010 	.word	0x20000010
 8003a54:	20000544 	.word	0x20000544
 8003a58:	20000530 	.word	0x20000530
 8003a5c:	20000528 	.word	0x20000528

08003a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <vTaskSuspendAll+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <vTaskSuspendAll+0x18>)
 8003a6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	2000054c 	.word	0x2000054c

08003a7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <xTaskResumeAll+0x114>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aa8:	f000 fc0c 	bl	80042c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aac:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <xTaskResumeAll+0x114>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <xTaskResumeAll+0x114>)
 8003ab4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <xTaskResumeAll+0x114>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d161      	bne.n	8003b82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003abe:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <xTaskResumeAll+0x118>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d05d      	beq.n	8003b82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac6:	e02e      	b.n	8003b26 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac8:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <xTaskResumeAll+0x11c>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fd50 	bl	800357a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fd4b 	bl	800357a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2201      	movs	r2, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <xTaskResumeAll+0x120>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <xTaskResumeAll+0x120>)
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <xTaskResumeAll+0x124>)
 8003b04:	441a      	add	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7ff fcd7 	bl	80034c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <xTaskResumeAll+0x128>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <xTaskResumeAll+0x12c>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <xTaskResumeAll+0x11c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1cc      	bne.n	8003ac8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b34:	f000 fa12 	bl	8003f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b38:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <xTaskResumeAll+0x130>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d010      	beq.n	8003b66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b44:	f000 f836 	bl	8003bb4 <xTaskIncrementTick>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <xTaskResumeAll+0x12c>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f1      	bne.n	8003b44 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <xTaskResumeAll+0x130>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <xTaskResumeAll+0x12c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <xTaskResumeAll+0x134>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b82:	f000 fbcf 	bl	8004324 <vPortExitCritical>

	return xAlreadyYielded;
 8003b86:	68bb      	ldr	r3, [r7, #8]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	2000054c 	.word	0x2000054c
 8003b94:	20000524 	.word	0x20000524
 8003b98:	200004e4 	.word	0x200004e4
 8003b9c:	2000052c 	.word	0x2000052c
 8003ba0:	20000428 	.word	0x20000428
 8003ba4:	20000424 	.word	0x20000424
 8003ba8:	20000538 	.word	0x20000538
 8003bac:	20000534 	.word	0x20000534
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <xTaskIncrementTick+0x144>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 808e 	bne.w	8003ce4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <xTaskIncrementTick+0x148>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bd0:	4a4a      	ldr	r2, [pc, #296]	; (8003cfc <xTaskIncrementTick+0x148>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d120      	bne.n	8003c1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bdc:	4b48      	ldr	r3, [pc, #288]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <xTaskIncrementTick+0x48>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	603b      	str	r3, [r7, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	e7fe      	b.n	8003bfa <xTaskIncrementTick+0x46>
 8003bfc:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <xTaskIncrementTick+0x150>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a3e      	ldr	r2, [pc, #248]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4a3e      	ldr	r2, [pc, #248]	; (8003d04 <xTaskIncrementTick+0x150>)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <xTaskIncrementTick+0x154>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	4a3c      	ldr	r2, [pc, #240]	; (8003d08 <xTaskIncrementTick+0x154>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	f000 f99f 	bl	8003f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <xTaskIncrementTick+0x158>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d348      	bcc.n	8003cba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c32:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <xTaskIncrementTick+0x158>)
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c38:	601a      	str	r2, [r3, #0]
					break;
 8003c3a:	e03e      	b.n	8003cba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3c:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d203      	bcs.n	8003c5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c54:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <xTaskIncrementTick+0x158>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c5a:	e02e      	b.n	8003cba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fc8a 	bl	800357a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3318      	adds	r3, #24
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fc81 	bl	800357a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <xTaskIncrementTick+0x15c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <xTaskIncrementTick+0x15c>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <xTaskIncrementTick+0x160>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7ff fc0d 	bl	80034c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <xTaskIncrementTick+0x164>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3b9      	bcc.n	8003c28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb8:	e7b6      	b.n	8003c28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <xTaskIncrementTick+0x164>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc0:	4914      	ldr	r1, [pc, #80]	; (8003d14 <xTaskIncrementTick+0x160>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d901      	bls.n	8003cd6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <xTaskIncrementTick+0x168>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e004      	b.n	8003cee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <xTaskIncrementTick+0x16c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <xTaskIncrementTick+0x16c>)
 8003cec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cee:	697b      	ldr	r3, [r7, #20]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	2000054c 	.word	0x2000054c
 8003cfc:	20000528 	.word	0x20000528
 8003d00:	200004dc 	.word	0x200004dc
 8003d04:	200004e0 	.word	0x200004e0
 8003d08:	2000053c 	.word	0x2000053c
 8003d0c:	20000544 	.word	0x20000544
 8003d10:	2000052c 	.word	0x2000052c
 8003d14:	20000428 	.word	0x20000428
 8003d18:	20000424 	.word	0x20000424
 8003d1c:	20000538 	.word	0x20000538
 8003d20:	20000534 	.word	0x20000534

08003d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d2a:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <vTaskSwitchContext+0xac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <vTaskSwitchContext+0xb0>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d38:	e044      	b.n	8003dc4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003d3a:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <vTaskSwitchContext+0xb0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <vTaskSwitchContext+0xb4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	f1c3 031f 	rsb	r3, r3, #31
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	4921      	ldr	r1, [pc, #132]	; (8003ddc <vTaskSwitchContext+0xb8>)
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	607b      	str	r3, [r7, #4]
}
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <vTaskSwitchContext+0x5a>
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <vTaskSwitchContext+0xb8>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	3308      	adds	r3, #8
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d104      	bne.n	8003db0 <vTaskSwitchContext+0x8c>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <vTaskSwitchContext+0xbc>)
 8003db8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <vTaskSwitchContext+0xbc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	334c      	adds	r3, #76	; 0x4c
 8003dc0:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <vTaskSwitchContext+0xc0>)
 8003dc2:	6013      	str	r3, [r2, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	2000054c 	.word	0x2000054c
 8003dd4:	20000538 	.word	0x20000538
 8003dd8:	2000052c 	.word	0x2000052c
 8003ddc:	20000428 	.word	0x20000428
 8003de0:	20000424 	.word	0x20000424
 8003de4:	20000010 	.word	0x20000010

08003de8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003df0:	f000 f852 	bl	8003e98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <prvIdleTask+0x28>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d9f9      	bls.n	8003df0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <prvIdleTask+0x2c>)
 8003dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e0c:	e7f0      	b.n	8003df0 <prvIdleTask+0x8>
 8003e0e:	bf00      	nop
 8003e10:	20000428 	.word	0x20000428
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	e00c      	b.n	8003e3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <prvInitialiseTaskLists+0x60>)
 8003e30:	4413      	add	r3, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fb17 	bl	8003466 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d9ef      	bls.n	8003e24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e44:	480d      	ldr	r0, [pc, #52]	; (8003e7c <prvInitialiseTaskLists+0x64>)
 8003e46:	f7ff fb0e 	bl	8003466 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e4a:	480d      	ldr	r0, [pc, #52]	; (8003e80 <prvInitialiseTaskLists+0x68>)
 8003e4c:	f7ff fb0b 	bl	8003466 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e50:	480c      	ldr	r0, [pc, #48]	; (8003e84 <prvInitialiseTaskLists+0x6c>)
 8003e52:	f7ff fb08 	bl	8003466 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e56:	480c      	ldr	r0, [pc, #48]	; (8003e88 <prvInitialiseTaskLists+0x70>)
 8003e58:	f7ff fb05 	bl	8003466 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e5c:	480b      	ldr	r0, [pc, #44]	; (8003e8c <prvInitialiseTaskLists+0x74>)
 8003e5e:	f7ff fb02 	bl	8003466 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <prvInitialiseTaskLists+0x78>)
 8003e64:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <prvInitialiseTaskLists+0x64>)
 8003e66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <prvInitialiseTaskLists+0x7c>)
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <prvInitialiseTaskLists+0x68>)
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000428 	.word	0x20000428
 8003e7c:	200004b4 	.word	0x200004b4
 8003e80:	200004c8 	.word	0x200004c8
 8003e84:	200004e4 	.word	0x200004e4
 8003e88:	200004f8 	.word	0x200004f8
 8003e8c:	20000510 	.word	0x20000510
 8003e90:	200004dc 	.word	0x200004dc
 8003e94:	200004e0 	.word	0x200004e0

08003e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e9e:	e019      	b.n	8003ed4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ea0:	f000 fa10 	bl	80042c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <prvCheckTasksWaitingTermination+0x50>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fb62 	bl	800357a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <prvCheckTasksWaitingTermination+0x54>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <prvCheckTasksWaitingTermination+0x54>)
 8003ebe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <prvCheckTasksWaitingTermination+0x58>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <prvCheckTasksWaitingTermination+0x58>)
 8003ec8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003eca:	f000 fa2b 	bl	8004324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f810 	bl	8003ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <prvCheckTasksWaitingTermination+0x58>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e1      	bne.n	8003ea0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200004f8 	.word	0x200004f8
 8003eec:	20000524 	.word	0x20000524
 8003ef0:	2000050c 	.word	0x2000050c

08003ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	334c      	adds	r3, #76	; 0x4c
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fce7 	bl	80048d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fb83 	bl	8004620 <vPortFree>
				vPortFree( pxTCB );
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb80 	bl	8004620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f20:	e018      	b.n	8003f54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d103      	bne.n	8003f34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fb77 	bl	8004620 <vPortFree>
	}
 8003f32:	e00f      	b.n	8003f54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d00a      	beq.n	8003f54 <prvDeleteTCB+0x60>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	60fb      	str	r3, [r7, #12]
}
 8003f50:	bf00      	nop
 8003f52:	e7fe      	b.n	8003f52 <prvDeleteTCB+0x5e>
	}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <prvResetNextTaskUnblockTime+0x38>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvResetNextTaskUnblockTime+0x3c>)
 8003f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f74:	e008      	b.n	8003f88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <prvResetNextTaskUnblockTime+0x38>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <prvResetNextTaskUnblockTime+0x3c>)
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	200004dc 	.word	0x200004dc
 8003f98:	20000544 	.word	0x20000544

08003f9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fac:	4b28      	ldr	r3, [pc, #160]	; (8004050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fae1 	bl	800357a <uxListRemove>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	4a20      	ldr	r2, [pc, #128]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fdc:	d10a      	bne.n	8003ff4 <prvAddCurrentTaskToDelayedList+0x58>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	481a      	ldr	r0, [pc, #104]	; (8004058 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fee:	f7ff fa67 	bl	80034c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ff2:	e026      	b.n	8004042 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d209      	bcs.n	8004020 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <prvAddCurrentTaskToDelayedList+0xc0>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f7ff fa75 	bl	8003508 <vListInsert>
}
 800401e:	e010      	b.n	8004042 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3304      	adds	r3, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f7ff fa6b 	bl	8003508 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	d202      	bcs.n	8004042 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800403c:	4a09      	ldr	r2, [pc, #36]	; (8004064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6013      	str	r3, [r2, #0]
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000528 	.word	0x20000528
 8004050:	20000424 	.word	0x20000424
 8004054:	2000052c 	.word	0x2000052c
 8004058:	20000510 	.word	0x20000510
 800405c:	200004e0 	.word	0x200004e0
 8004060:	200004dc 	.word	0x200004dc
 8004064:	20000544 	.word	0x20000544

08004068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b04      	subs	r3, #4
 8004078:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b04      	subs	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b04      	subs	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004098:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <pxPortInitialiseStack+0x64>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b14      	subs	r3, #20
 80040a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b04      	subs	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f06f 0202 	mvn.w	r2, #2
 80040b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3b20      	subs	r3, #32
 80040bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	080040d1 	.word	0x080040d1

080040d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <prvTaskExitError+0x54>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e2:	d00a      	beq.n	80040fa <prvTaskExitError+0x2a>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	60fb      	str	r3, [r7, #12]
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <prvTaskExitError+0x28>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	60bb      	str	r3, [r7, #8]
}
 800410c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800410e:	bf00      	nop
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0fc      	beq.n	8004110 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	2000000c 	.word	0x2000000c
	...

08004130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <pxCurrentTCBConst2>)
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	f380 8809 	msr	PSP, r0
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8811 	msr	BASEPRI, r0
 800414a:	4770      	bx	lr
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst2>:
 8004150:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <prvPortStartFirstTask+0x24>)
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	6800      	ldr	r0, [r0, #0]
 800415e:	f380 8808 	msr	MSP, r0
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8814 	msr	CONTROL, r0
 800416a:	b662      	cpsie	i
 800416c:	b661      	cpsie	f
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	df00      	svc	0
 8004178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800417a:	bf00      	nop
 800417c:	e000ed08 	.word	0xe000ed08

08004180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004186:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <xPortStartScheduler+0x120>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a46      	ldr	r2, [pc, #280]	; (80042a4 <xPortStartScheduler+0x124>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10a      	bne.n	80041a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	613b      	str	r3, [r7, #16]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041a6:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <xPortStartScheduler+0x120>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a3f      	ldr	r2, [pc, #252]	; (80042a8 <xPortStartScheduler+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10a      	bne.n	80041c6 <xPortStartScheduler+0x46>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60fb      	str	r3, [r7, #12]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041c6:	4b39      	ldr	r3, [pc, #228]	; (80042ac <xPortStartScheduler+0x12c>)
 80041c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <xPortStartScheduler+0x130>)
 80041ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <xPortStartScheduler+0x134>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041f4:	e009      	b.n	800420a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <xPortStartScheduler+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <xPortStartScheduler+0x134>)
 80041fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d0ef      	beq.n	80041f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004216:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <xPortStartScheduler+0x134>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1c3 0307 	rsb	r3, r3, #7
 800421e:	2b04      	cmp	r3, #4
 8004220:	d00a      	beq.n	8004238 <xPortStartScheduler+0xb8>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <xPortStartScheduler+0x134>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <xPortStartScheduler+0x134>)
 8004240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <xPortStartScheduler+0x134>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <xPortStartScheduler+0x134>)
 800424c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <xPortStartScheduler+0x138>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <xPortStartScheduler+0x138>)
 800425c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <xPortStartScheduler+0x138>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a14      	ldr	r2, [pc, #80]	; (80042b8 <xPortStartScheduler+0x138>)
 8004268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800426c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800426e:	f000 f8dd 	bl	800442c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <xPortStartScheduler+0x13c>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004278:	f000 f8fc 	bl	8004474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <xPortStartScheduler+0x140>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <xPortStartScheduler+0x140>)
 8004282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004288:	f7ff ff66 	bl	8004158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800428c:	f7ff fd4a 	bl	8003d24 <vTaskSwitchContext>
	prvTaskExitError();
 8004290:	f7ff ff1e 	bl	80040d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	e000ed00 	.word	0xe000ed00
 80042a4:	410fc271 	.word	0x410fc271
 80042a8:	410fc270 	.word	0x410fc270
 80042ac:	e000e400 	.word	0xe000e400
 80042b0:	20000550 	.word	0x20000550
 80042b4:	20000554 	.word	0x20000554
 80042b8:	e000ed20 	.word	0xe000ed20
 80042bc:	2000000c 	.word	0x2000000c
 80042c0:	e000ef34 	.word	0xe000ef34

080042c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	607b      	str	r3, [r7, #4]
}
 80042dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <vPortEnterCritical+0x58>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a0d      	ldr	r2, [pc, #52]	; (800431c <vPortEnterCritical+0x58>)
 80042e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <vPortEnterCritical+0x58>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10f      	bne.n	8004310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <vPortEnterCritical+0x5c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <vPortEnterCritical+0x4c>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	603b      	str	r3, [r7, #0]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vPortEnterCritical+0x4a>
	}
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	2000000c 	.word	0x2000000c
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <vPortExitCritical+0x50>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <vPortExitCritical+0x24>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	607b      	str	r3, [r7, #4]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <vPortExitCritical+0x50>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <vPortExitCritical+0x50>)
 8004350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <vPortExitCritical+0x50>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <vPortExitCritical+0x42>
 800435a:	2300      	movs	r3, #0
 800435c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	2000000c 	.word	0x2000000c
	...

08004380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004380:	f3ef 8009 	mrs	r0, PSP
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <pxCurrentTCBConst>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f01e 0f10 	tst.w	lr, #16
 8004390:	bf08      	it	eq
 8004392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439a:	6010      	str	r0, [r2, #0]
 800439c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043a4:	f380 8811 	msr	BASEPRI, r0
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f7ff fcb8 	bl	8003d24 <vTaskSwitchContext>
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	f380 8811 	msr	BASEPRI, r0
 80043bc:	bc09      	pop	{r0, r3}
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	6808      	ldr	r0, [r1, #0]
 80043c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c6:	f01e 0f10 	tst.w	lr, #16
 80043ca:	bf08      	it	eq
 80043cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043d0:	f380 8809 	msr	PSP, r0
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	f3af 8000 	nop.w

080043e0 <pxCurrentTCBConst>:
 80043e0:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
}
 8004400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004402:	f7ff fbd7 	bl	8003bb4 <xTaskIncrementTick>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <SysTick_Handler+0x40>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	2300      	movs	r3, #0
 8004416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f383 8811 	msr	BASEPRI, r3
}
 800441e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <vPortSetupTimerInterrupt+0x34>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <vPortSetupTimerInterrupt+0x38>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <vPortSetupTimerInterrupt+0x3c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a0a      	ldr	r2, [pc, #40]	; (800446c <vPortSetupTimerInterrupt+0x40>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	4a09      	ldr	r2, [pc, #36]	; (8004470 <vPortSetupTimerInterrupt+0x44>)
 800444a:	3b01      	subs	r3, #1
 800444c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <vPortSetupTimerInterrupt+0x34>)
 8004450:	2207      	movs	r2, #7
 8004452:	601a      	str	r2, [r3, #0]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	e000e010 	.word	0xe000e010
 8004464:	e000e018 	.word	0xe000e018
 8004468:	20000004 	.word	0x20000004
 800446c:	10624dd3 	.word	0x10624dd3
 8004470:	e000e014 	.word	0xe000e014

08004474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004484 <vPortEnableVFP+0x10>
 8004478:	6801      	ldr	r1, [r0, #0]
 800447a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800447e:	6001      	str	r1, [r0, #0]
 8004480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004482:	bf00      	nop
 8004484:	e000ed88 	.word	0xe000ed88

08004488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004494:	f7ff fae4 	bl	8003a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004498:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <pvPortMalloc+0x180>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044a0:	f000 f920 	bl	80046e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044a4:	4b59      	ldr	r3, [pc, #356]	; (800460c <pvPortMalloc+0x184>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f040 8093 	bne.w	80045d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01d      	beq.n	80044f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044b8:	2208      	movs	r2, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	3308      	adds	r3, #8
 80044d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <pvPortMalloc+0x6c>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	617b      	str	r3, [r7, #20]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d06e      	beq.n	80045d8 <pvPortMalloc+0x150>
 80044fa:	4b45      	ldr	r3, [pc, #276]	; (8004610 <pvPortMalloc+0x188>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d869      	bhi.n	80045d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004504:	4b43      	ldr	r3, [pc, #268]	; (8004614 <pvPortMalloc+0x18c>)
 8004506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004508:	4b42      	ldr	r3, [pc, #264]	; (8004614 <pvPortMalloc+0x18c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800450e:	e004      	b.n	800451a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d903      	bls.n	800452c <pvPortMalloc+0xa4>
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f1      	bne.n	8004510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800452c:	4b36      	ldr	r3, [pc, #216]	; (8004608 <pvPortMalloc+0x180>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	429a      	cmp	r2, r3
 8004534:	d050      	beq.n	80045d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2208      	movs	r2, #8
 800453c:	4413      	add	r3, r2
 800453e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	2308      	movs	r3, #8
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	429a      	cmp	r2, r3
 8004556:	d91f      	bls.n	8004598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <pvPortMalloc+0xf8>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	613b      	str	r3, [r7, #16]
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1ad2      	subs	r2, r2, r3
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004592:	69b8      	ldr	r0, [r7, #24]
 8004594:	f000 f908 	bl	80047a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <pvPortMalloc+0x188>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <pvPortMalloc+0x188>)
 80045a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <pvPortMalloc+0x188>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <pvPortMalloc+0x190>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d203      	bcs.n	80045ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <pvPortMalloc+0x188>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a18      	ldr	r2, [pc, #96]	; (8004618 <pvPortMalloc+0x190>)
 80045b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <pvPortMalloc+0x184>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <pvPortMalloc+0x194>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <pvPortMalloc+0x194>)
 80045d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045d8:	f7ff fa50 	bl	8003a7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <pvPortMalloc+0x174>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60fb      	str	r3, [r7, #12]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <pvPortMalloc+0x172>
	return pvReturn;
 80045fc:	69fb      	ldr	r3, [r7, #28]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3728      	adds	r7, #40	; 0x28
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20004160 	.word	0x20004160
 800460c:	20004174 	.word	0x20004174
 8004610:	20004164 	.word	0x20004164
 8004614:	20004158 	.word	0x20004158
 8004618:	20004168 	.word	0x20004168
 800461c:	2000416c 	.word	0x2000416c

08004620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04d      	beq.n	80046ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004632:	2308      	movs	r3, #8
 8004634:	425b      	negs	r3, r3
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <vPortFree+0xb8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4013      	ands	r3, r2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <vPortFree+0x44>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	60fb      	str	r3, [r7, #12]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <vPortFree+0x62>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60bb      	str	r3, [r7, #8]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <vPortFree+0xb8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01e      	beq.n	80046ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11a      	bne.n	80046ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <vPortFree+0xb8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	401a      	ands	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046a8:	f7ff f9da 	bl	8003a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <vPortFree+0xbc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	4a09      	ldr	r2, [pc, #36]	; (80046dc <vPortFree+0xbc>)
 80046b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ba:	6938      	ldr	r0, [r7, #16]
 80046bc:	f000 f874 	bl	80047a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <vPortFree+0xc0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	4a06      	ldr	r2, [pc, #24]	; (80046e0 <vPortFree+0xc0>)
 80046c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046ca:	f7ff f9d7 	bl	8003a7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046ce:	bf00      	nop
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20004174 	.word	0x20004174
 80046dc:	20004164 	.word	0x20004164
 80046e0:	20004170 	.word	0x20004170

080046e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046f0:	4b27      	ldr	r3, [pc, #156]	; (8004790 <prvHeapInit+0xac>)
 80046f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3307      	adds	r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0307 	bic.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <prvHeapInit+0xac>)
 8004714:	4413      	add	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <prvHeapInit+0xb0>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004722:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <prvHeapInit+0xb0>)
 8004724:	2200      	movs	r2, #0
 8004726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	4413      	add	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004730:	2208      	movs	r2, #8
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0307 	bic.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a15      	ldr	r2, [pc, #84]	; (8004798 <prvHeapInit+0xb4>)
 8004744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <prvHeapInit+0xb4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2200      	movs	r2, #0
 800474c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <prvHeapInit+0xb4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <prvHeapInit+0xb4>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a0a      	ldr	r2, [pc, #40]	; (800479c <prvHeapInit+0xb8>)
 8004772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <prvHeapInit+0xbc>)
 800477a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <prvHeapInit+0xc0>)
 800477e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000558 	.word	0x20000558
 8004794:	20004158 	.word	0x20004158
 8004798:	20004160 	.word	0x20004160
 800479c:	20004168 	.word	0x20004168
 80047a0:	20004164 	.word	0x20004164
 80047a4:	20004174 	.word	0x20004174

080047a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047b0:	4b28      	ldr	r3, [pc, #160]	; (8004854 <prvInsertBlockIntoFreeList+0xac>)
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e002      	b.n	80047bc <prvInsertBlockIntoFreeList+0x14>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d8f7      	bhi.n	80047b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d108      	bne.n	80047ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	441a      	add	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	441a      	add	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d118      	bne.n	8004830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <prvInsertBlockIntoFreeList+0xb0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d00d      	beq.n	8004826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e008      	b.n	8004838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <prvInsertBlockIntoFreeList+0xb0>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e003      	b.n	8004838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d002      	beq.n	8004846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20004158 	.word	0x20004158
 8004858:	20004160 	.word	0x20004160

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4d0d      	ldr	r5, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2600      	movs	r6, #0
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4d0b      	ldr	r5, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 f8e4 	bl	8004a3c <_init>
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2600      	movs	r6, #0
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08004b00 	.word	0x08004b00
 8004898:	08004b00 	.word	0x08004b00
 800489c:	08004b00 	.word	0x08004b00
 80048a0:	08004b04 	.word	0x08004b04

080048a4 <__retarget_lock_acquire_recursive>:
 80048a4:	4770      	bx	lr

080048a6 <__retarget_lock_release_recursive>:
 80048a6:	4770      	bx	lr

080048a8 <memset>:
 80048a8:	4402      	add	r2, r0
 80048aa:	4603      	mov	r3, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <cleanup_glue>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	460c      	mov	r4, r1
 80048bc:	6809      	ldr	r1, [r1, #0]
 80048be:	4605      	mov	r5, r0
 80048c0:	b109      	cbz	r1, 80048c6 <cleanup_glue+0xe>
 80048c2:	f7ff fff9 	bl	80048b8 <cleanup_glue>
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ce:	f000 b869 	b.w	80049a4 <_free_r>
	...

080048d4 <_reclaim_reent>:
 80048d4:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <_reclaim_reent+0xb4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4283      	cmp	r3, r0
 80048da:	b570      	push	{r4, r5, r6, lr}
 80048dc:	4604      	mov	r4, r0
 80048de:	d051      	beq.n	8004984 <_reclaim_reent+0xb0>
 80048e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048e2:	b143      	cbz	r3, 80048f6 <_reclaim_reent+0x22>
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d14a      	bne.n	8004980 <_reclaim_reent+0xac>
 80048ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ec:	6819      	ldr	r1, [r3, #0]
 80048ee:	b111      	cbz	r1, 80048f6 <_reclaim_reent+0x22>
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 f857 	bl	80049a4 <_free_r>
 80048f6:	6961      	ldr	r1, [r4, #20]
 80048f8:	b111      	cbz	r1, 8004900 <_reclaim_reent+0x2c>
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 f852 	bl	80049a4 <_free_r>
 8004900:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004902:	b111      	cbz	r1, 800490a <_reclaim_reent+0x36>
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f84d 	bl	80049a4 <_free_r>
 800490a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800490c:	b111      	cbz	r1, 8004914 <_reclaim_reent+0x40>
 800490e:	4620      	mov	r0, r4
 8004910:	f000 f848 	bl	80049a4 <_free_r>
 8004914:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004916:	b111      	cbz	r1, 800491e <_reclaim_reent+0x4a>
 8004918:	4620      	mov	r0, r4
 800491a:	f000 f843 	bl	80049a4 <_free_r>
 800491e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004920:	b111      	cbz	r1, 8004928 <_reclaim_reent+0x54>
 8004922:	4620      	mov	r0, r4
 8004924:	f000 f83e 	bl	80049a4 <_free_r>
 8004928:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800492a:	b111      	cbz	r1, 8004932 <_reclaim_reent+0x5e>
 800492c:	4620      	mov	r0, r4
 800492e:	f000 f839 	bl	80049a4 <_free_r>
 8004932:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004934:	b111      	cbz	r1, 800493c <_reclaim_reent+0x68>
 8004936:	4620      	mov	r0, r4
 8004938:	f000 f834 	bl	80049a4 <_free_r>
 800493c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800493e:	b111      	cbz	r1, 8004946 <_reclaim_reent+0x72>
 8004940:	4620      	mov	r0, r4
 8004942:	f000 f82f 	bl	80049a4 <_free_r>
 8004946:	69a3      	ldr	r3, [r4, #24]
 8004948:	b1e3      	cbz	r3, 8004984 <_reclaim_reent+0xb0>
 800494a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800494c:	4620      	mov	r0, r4
 800494e:	4798      	blx	r3
 8004950:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004952:	b1b9      	cbz	r1, 8004984 <_reclaim_reent+0xb0>
 8004954:	4620      	mov	r0, r4
 8004956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800495a:	f7ff bfad 	b.w	80048b8 <cleanup_glue>
 800495e:	5949      	ldr	r1, [r1, r5]
 8004960:	b941      	cbnz	r1, 8004974 <_reclaim_reent+0xa0>
 8004962:	3504      	adds	r5, #4
 8004964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004966:	2d80      	cmp	r5, #128	; 0x80
 8004968:	68d9      	ldr	r1, [r3, #12]
 800496a:	d1f8      	bne.n	800495e <_reclaim_reent+0x8a>
 800496c:	4620      	mov	r0, r4
 800496e:	f000 f819 	bl	80049a4 <_free_r>
 8004972:	e7ba      	b.n	80048ea <_reclaim_reent+0x16>
 8004974:	680e      	ldr	r6, [r1, #0]
 8004976:	4620      	mov	r0, r4
 8004978:	f000 f814 	bl	80049a4 <_free_r>
 800497c:	4631      	mov	r1, r6
 800497e:	e7ef      	b.n	8004960 <_reclaim_reent+0x8c>
 8004980:	2500      	movs	r5, #0
 8004982:	e7ef      	b.n	8004964 <_reclaim_reent+0x90>
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	bf00      	nop
 8004988:	20000010 	.word	0x20000010

0800498c <__malloc_lock>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__malloc_lock+0x8>)
 800498e:	f7ff bf89 	b.w	80048a4 <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	20004178 	.word	0x20004178

08004998 <__malloc_unlock>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__malloc_unlock+0x8>)
 800499a:	f7ff bf84 	b.w	80048a6 <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	20004178 	.word	0x20004178

080049a4 <_free_r>:
 80049a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049a6:	2900      	cmp	r1, #0
 80049a8:	d044      	beq.n	8004a34 <_free_r+0x90>
 80049aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ae:	9001      	str	r0, [sp, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f1a1 0404 	sub.w	r4, r1, #4
 80049b6:	bfb8      	it	lt
 80049b8:	18e4      	addlt	r4, r4, r3
 80049ba:	f7ff ffe7 	bl	800498c <__malloc_lock>
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <_free_r+0x94>)
 80049c0:	9801      	ldr	r0, [sp, #4]
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	b933      	cbnz	r3, 80049d4 <_free_r+0x30>
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6014      	str	r4, [r2, #0]
 80049ca:	b003      	add	sp, #12
 80049cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049d0:	f7ff bfe2 	b.w	8004998 <__malloc_unlock>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x46>
 80049d8:	6825      	ldr	r5, [r4, #0]
 80049da:	1961      	adds	r1, r4, r5
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1949      	addeq	r1, r1, r5
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	e7ed      	b.n	80049c6 <_free_r+0x22>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x50>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x46>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1855      	adds	r5, r2, r1
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x70>
 80049fc:	6824      	ldr	r4, [r4, #0]
 80049fe:	4421      	add	r1, r4
 8004a00:	1854      	adds	r4, r2, r1
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1e0      	bne.n	80049ca <_free_r+0x26>
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	4421      	add	r1, r4
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	e7da      	b.n	80049ca <_free_r+0x26>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x78>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	e7d6      	b.n	80049ca <_free_r+0x26>
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf04      	itt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	bf04      	itt	eq
 8004a2c:	1949      	addeq	r1, r1, r5
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	6054      	str	r4, [r2, #4]
 8004a32:	e7ca      	b.n	80049ca <_free_r+0x26>
 8004a34:	b003      	add	sp, #12
 8004a36:	bd30      	pop	{r4, r5, pc}
 8004a38:	2000417c 	.word	0x2000417c

08004a3c <_init>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr

08004a48 <_fini>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr
